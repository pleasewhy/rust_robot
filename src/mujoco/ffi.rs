#![allow(warnings)]

/* automatically generated by rust-bindgen 0.71.1 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    fn extract_bit(byte: u8, index: usize) -> bool {
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        Self::extract_bit(byte, index)
    }
    #[inline]
    pub unsafe fn raw_get_bit(this: *const Self, index: usize) -> bool {
        debug_assert!(index / 8 < core::mem::size_of::<Storage>());
        let byte_index = index / 8;
        let byte = *(core::ptr::addr_of!((*this).storage) as *const u8).offset(byte_index as isize);
        Self::extract_bit(byte, index)
    }
    #[inline]
    fn change_bit(byte: u8, index: usize, val: bool) -> u8 {
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            byte | mask
        } else {
            byte & !mask
        }
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        *byte = Self::change_bit(*byte, index, val);
    }
    #[inline]
    pub unsafe fn raw_set_bit(this: *mut Self, index: usize, val: bool) {
        debug_assert!(index / 8 < core::mem::size_of::<Storage>());
        let byte_index = index / 8;
        let byte =
            (core::ptr::addr_of_mut!((*this).storage) as *mut u8).offset(byte_index as isize);
        *byte = Self::change_bit(*byte, index, val);
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub unsafe fn raw_get(this: *const Self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < core::mem::size_of::<Storage>());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= core::mem::size_of::<Storage>());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if Self::raw_get_bit(this, i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
    #[inline]
    pub unsafe fn raw_set(this: *mut Self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < core::mem::size_of::<Storage>());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= core::mem::size_of::<Storage>());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            Self::raw_set_bit(this, index + bit_offset, val_bit_is_set);
        }
    }
}
pub const mjVERSION_HEADER: u32 = 327;
pub const __API_TO_BE_DEPRECATED: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_MACOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_IOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_MACCATALYST: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_WATCHOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_TVOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_DRIVERKIT: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_VISIONOS: u32 = 100000;
pub const __MAC_10_0: u32 = 1000;
pub const __MAC_10_1: u32 = 1010;
pub const __MAC_10_2: u32 = 1020;
pub const __MAC_10_3: u32 = 1030;
pub const __MAC_10_4: u32 = 1040;
pub const __MAC_10_5: u32 = 1050;
pub const __MAC_10_6: u32 = 1060;
pub const __MAC_10_7: u32 = 1070;
pub const __MAC_10_8: u32 = 1080;
pub const __MAC_10_9: u32 = 1090;
pub const __MAC_10_10: u32 = 101000;
pub const __MAC_10_10_2: u32 = 101002;
pub const __MAC_10_10_3: u32 = 101003;
pub const __MAC_10_11: u32 = 101100;
pub const __MAC_10_11_2: u32 = 101102;
pub const __MAC_10_11_3: u32 = 101103;
pub const __MAC_10_11_4: u32 = 101104;
pub const __MAC_10_12: u32 = 101200;
pub const __MAC_10_12_1: u32 = 101201;
pub const __MAC_10_12_2: u32 = 101202;
pub const __MAC_10_12_4: u32 = 101204;
pub const __MAC_10_13: u32 = 101300;
pub const __MAC_10_13_1: u32 = 101301;
pub const __MAC_10_13_2: u32 = 101302;
pub const __MAC_10_13_4: u32 = 101304;
pub const __MAC_10_14: u32 = 101400;
pub const __MAC_10_14_1: u32 = 101401;
pub const __MAC_10_14_4: u32 = 101404;
pub const __MAC_10_14_5: u32 = 101405;
pub const __MAC_10_14_6: u32 = 101406;
pub const __MAC_10_15: u32 = 101500;
pub const __MAC_10_15_1: u32 = 101501;
pub const __MAC_10_15_4: u32 = 101504;
pub const __MAC_10_16: u32 = 101600;
pub const __MAC_11_0: u32 = 110000;
pub const __MAC_11_1: u32 = 110100;
pub const __MAC_11_3: u32 = 110300;
pub const __MAC_11_4: u32 = 110400;
pub const __MAC_11_5: u32 = 110500;
pub const __MAC_11_6: u32 = 110600;
pub const __MAC_12_0: u32 = 120000;
pub const __MAC_12_1: u32 = 120100;
pub const __MAC_12_2: u32 = 120200;
pub const __MAC_12_3: u32 = 120300;
pub const __MAC_12_4: u32 = 120400;
pub const __MAC_12_5: u32 = 120500;
pub const __MAC_12_6: u32 = 120600;
pub const __MAC_12_7: u32 = 120700;
pub const __MAC_13_0: u32 = 130000;
pub const __MAC_13_1: u32 = 130100;
pub const __MAC_13_2: u32 = 130200;
pub const __MAC_13_3: u32 = 130300;
pub const __MAC_13_4: u32 = 130400;
pub const __MAC_13_5: u32 = 130500;
pub const __MAC_13_6: u32 = 130600;
pub const __MAC_14_0: u32 = 140000;
pub const __MAC_14_1: u32 = 140100;
pub const __MAC_14_2: u32 = 140200;
pub const __MAC_14_3: u32 = 140300;
pub const __MAC_14_4: u32 = 140400;
pub const __IPHONE_2_0: u32 = 20000;
pub const __IPHONE_2_1: u32 = 20100;
pub const __IPHONE_2_2: u32 = 20200;
pub const __IPHONE_3_0: u32 = 30000;
pub const __IPHONE_3_1: u32 = 30100;
pub const __IPHONE_3_2: u32 = 30200;
pub const __IPHONE_4_0: u32 = 40000;
pub const __IPHONE_4_1: u32 = 40100;
pub const __IPHONE_4_2: u32 = 40200;
pub const __IPHONE_4_3: u32 = 40300;
pub const __IPHONE_5_0: u32 = 50000;
pub const __IPHONE_5_1: u32 = 50100;
pub const __IPHONE_6_0: u32 = 60000;
pub const __IPHONE_6_1: u32 = 60100;
pub const __IPHONE_7_0: u32 = 70000;
pub const __IPHONE_7_1: u32 = 70100;
pub const __IPHONE_8_0: u32 = 80000;
pub const __IPHONE_8_1: u32 = 80100;
pub const __IPHONE_8_2: u32 = 80200;
pub const __IPHONE_8_3: u32 = 80300;
pub const __IPHONE_8_4: u32 = 80400;
pub const __IPHONE_9_0: u32 = 90000;
pub const __IPHONE_9_1: u32 = 90100;
pub const __IPHONE_9_2: u32 = 90200;
pub const __IPHONE_9_3: u32 = 90300;
pub const __IPHONE_10_0: u32 = 100000;
pub const __IPHONE_10_1: u32 = 100100;
pub const __IPHONE_10_2: u32 = 100200;
pub const __IPHONE_10_3: u32 = 100300;
pub const __IPHONE_11_0: u32 = 110000;
pub const __IPHONE_11_1: u32 = 110100;
pub const __IPHONE_11_2: u32 = 110200;
pub const __IPHONE_11_3: u32 = 110300;
pub const __IPHONE_11_4: u32 = 110400;
pub const __IPHONE_12_0: u32 = 120000;
pub const __IPHONE_12_1: u32 = 120100;
pub const __IPHONE_12_2: u32 = 120200;
pub const __IPHONE_12_3: u32 = 120300;
pub const __IPHONE_12_4: u32 = 120400;
pub const __IPHONE_13_0: u32 = 130000;
pub const __IPHONE_13_1: u32 = 130100;
pub const __IPHONE_13_2: u32 = 130200;
pub const __IPHONE_13_3: u32 = 130300;
pub const __IPHONE_13_4: u32 = 130400;
pub const __IPHONE_13_5: u32 = 130500;
pub const __IPHONE_13_6: u32 = 130600;
pub const __IPHONE_13_7: u32 = 130700;
pub const __IPHONE_14_0: u32 = 140000;
pub const __IPHONE_14_1: u32 = 140100;
pub const __IPHONE_14_2: u32 = 140200;
pub const __IPHONE_14_3: u32 = 140300;
pub const __IPHONE_14_5: u32 = 140500;
pub const __IPHONE_14_4: u32 = 140400;
pub const __IPHONE_14_6: u32 = 140600;
pub const __IPHONE_14_7: u32 = 140700;
pub const __IPHONE_14_8: u32 = 140800;
pub const __IPHONE_15_0: u32 = 150000;
pub const __IPHONE_15_1: u32 = 150100;
pub const __IPHONE_15_2: u32 = 150200;
pub const __IPHONE_15_3: u32 = 150300;
pub const __IPHONE_15_4: u32 = 150400;
pub const __IPHONE_15_5: u32 = 150500;
pub const __IPHONE_15_6: u32 = 150600;
pub const __IPHONE_15_7: u32 = 150700;
pub const __IPHONE_15_8: u32 = 150800;
pub const __IPHONE_16_0: u32 = 160000;
pub const __IPHONE_16_1: u32 = 160100;
pub const __IPHONE_16_2: u32 = 160200;
pub const __IPHONE_16_3: u32 = 160300;
pub const __IPHONE_16_4: u32 = 160400;
pub const __IPHONE_16_5: u32 = 160500;
pub const __IPHONE_16_6: u32 = 160600;
pub const __IPHONE_16_7: u32 = 160700;
pub const __IPHONE_17_0: u32 = 170000;
pub const __IPHONE_17_1: u32 = 170100;
pub const __IPHONE_17_2: u32 = 170200;
pub const __IPHONE_17_3: u32 = 170300;
pub const __IPHONE_17_4: u32 = 170400;
pub const __WATCHOS_1_0: u32 = 10000;
pub const __WATCHOS_2_0: u32 = 20000;
pub const __WATCHOS_2_1: u32 = 20100;
pub const __WATCHOS_2_2: u32 = 20200;
pub const __WATCHOS_3_0: u32 = 30000;
pub const __WATCHOS_3_1: u32 = 30100;
pub const __WATCHOS_3_1_1: u32 = 30101;
pub const __WATCHOS_3_2: u32 = 30200;
pub const __WATCHOS_4_0: u32 = 40000;
pub const __WATCHOS_4_1: u32 = 40100;
pub const __WATCHOS_4_2: u32 = 40200;
pub const __WATCHOS_4_3: u32 = 40300;
pub const __WATCHOS_5_0: u32 = 50000;
pub const __WATCHOS_5_1: u32 = 50100;
pub const __WATCHOS_5_2: u32 = 50200;
pub const __WATCHOS_5_3: u32 = 50300;
pub const __WATCHOS_6_0: u32 = 60000;
pub const __WATCHOS_6_1: u32 = 60100;
pub const __WATCHOS_6_2: u32 = 60200;
pub const __WATCHOS_7_0: u32 = 70000;
pub const __WATCHOS_7_1: u32 = 70100;
pub const __WATCHOS_7_2: u32 = 70200;
pub const __WATCHOS_7_3: u32 = 70300;
pub const __WATCHOS_7_4: u32 = 70400;
pub const __WATCHOS_7_5: u32 = 70500;
pub const __WATCHOS_7_6: u32 = 70600;
pub const __WATCHOS_8_0: u32 = 80000;
pub const __WATCHOS_8_1: u32 = 80100;
pub const __WATCHOS_8_3: u32 = 80300;
pub const __WATCHOS_8_4: u32 = 80400;
pub const __WATCHOS_8_5: u32 = 80500;
pub const __WATCHOS_8_6: u32 = 80600;
pub const __WATCHOS_8_7: u32 = 80700;
pub const __WATCHOS_8_8: u32 = 80800;
pub const __WATCHOS_9_0: u32 = 90000;
pub const __WATCHOS_9_1: u32 = 90100;
pub const __WATCHOS_9_2: u32 = 90200;
pub const __WATCHOS_9_3: u32 = 90300;
pub const __WATCHOS_9_4: u32 = 90400;
pub const __WATCHOS_9_5: u32 = 90500;
pub const __WATCHOS_9_6: u32 = 90600;
pub const __WATCHOS_10_0: u32 = 100000;
pub const __WATCHOS_10_1: u32 = 100100;
pub const __WATCHOS_10_2: u32 = 100200;
pub const __WATCHOS_10_3: u32 = 100300;
pub const __WATCHOS_10_4: u32 = 100400;
pub const __TVOS_9_0: u32 = 90000;
pub const __TVOS_9_1: u32 = 90100;
pub const __TVOS_9_2: u32 = 90200;
pub const __TVOS_10_0: u32 = 100000;
pub const __TVOS_10_0_1: u32 = 100001;
pub const __TVOS_10_1: u32 = 100100;
pub const __TVOS_10_2: u32 = 100200;
pub const __TVOS_11_0: u32 = 110000;
pub const __TVOS_11_1: u32 = 110100;
pub const __TVOS_11_2: u32 = 110200;
pub const __TVOS_11_3: u32 = 110300;
pub const __TVOS_11_4: u32 = 110400;
pub const __TVOS_12_0: u32 = 120000;
pub const __TVOS_12_1: u32 = 120100;
pub const __TVOS_12_2: u32 = 120200;
pub const __TVOS_12_3: u32 = 120300;
pub const __TVOS_12_4: u32 = 120400;
pub const __TVOS_13_0: u32 = 130000;
pub const __TVOS_13_2: u32 = 130200;
pub const __TVOS_13_3: u32 = 130300;
pub const __TVOS_13_4: u32 = 130400;
pub const __TVOS_14_0: u32 = 140000;
pub const __TVOS_14_1: u32 = 140100;
pub const __TVOS_14_2: u32 = 140200;
pub const __TVOS_14_3: u32 = 140300;
pub const __TVOS_14_5: u32 = 140500;
pub const __TVOS_14_6: u32 = 140600;
pub const __TVOS_14_7: u32 = 140700;
pub const __TVOS_15_0: u32 = 150000;
pub const __TVOS_15_1: u32 = 150100;
pub const __TVOS_15_2: u32 = 150200;
pub const __TVOS_15_3: u32 = 150300;
pub const __TVOS_15_4: u32 = 150400;
pub const __TVOS_15_5: u32 = 150500;
pub const __TVOS_15_6: u32 = 150600;
pub const __TVOS_16_0: u32 = 160000;
pub const __TVOS_16_1: u32 = 160100;
pub const __TVOS_16_2: u32 = 160200;
pub const __TVOS_16_3: u32 = 160300;
pub const __TVOS_16_4: u32 = 160400;
pub const __TVOS_16_5: u32 = 160500;
pub const __TVOS_16_6: u32 = 160600;
pub const __TVOS_17_0: u32 = 170000;
pub const __TVOS_17_1: u32 = 170100;
pub const __TVOS_17_2: u32 = 170200;
pub const __TVOS_17_3: u32 = 170300;
pub const __TVOS_17_4: u32 = 170400;
pub const __BRIDGEOS_2_0: u32 = 20000;
pub const __BRIDGEOS_3_0: u32 = 30000;
pub const __BRIDGEOS_3_1: u32 = 30100;
pub const __BRIDGEOS_3_4: u32 = 30400;
pub const __BRIDGEOS_4_0: u32 = 40000;
pub const __BRIDGEOS_4_1: u32 = 40100;
pub const __BRIDGEOS_5_0: u32 = 50000;
pub const __BRIDGEOS_5_1: u32 = 50100;
pub const __BRIDGEOS_5_3: u32 = 50300;
pub const __BRIDGEOS_6_0: u32 = 60000;
pub const __BRIDGEOS_6_2: u32 = 60200;
pub const __BRIDGEOS_6_4: u32 = 60400;
pub const __BRIDGEOS_6_5: u32 = 60500;
pub const __BRIDGEOS_6_6: u32 = 60600;
pub const __BRIDGEOS_7_0: u32 = 70000;
pub const __BRIDGEOS_7_1: u32 = 70100;
pub const __BRIDGEOS_7_2: u32 = 70200;
pub const __BRIDGEOS_7_3: u32 = 70300;
pub const __BRIDGEOS_7_4: u32 = 70400;
pub const __BRIDGEOS_7_6: u32 = 70600;
pub const __BRIDGEOS_8_0: u32 = 80000;
pub const __BRIDGEOS_8_1: u32 = 80100;
pub const __BRIDGEOS_8_2: u32 = 80200;
pub const __BRIDGEOS_8_3: u32 = 80300;
pub const __BRIDGEOS_8_4: u32 = 80400;
pub const __DRIVERKIT_19_0: u32 = 190000;
pub const __DRIVERKIT_20_0: u32 = 200000;
pub const __DRIVERKIT_21_0: u32 = 210000;
pub const __DRIVERKIT_22_0: u32 = 220000;
pub const __DRIVERKIT_22_4: u32 = 220400;
pub const __DRIVERKIT_22_5: u32 = 220500;
pub const __DRIVERKIT_22_6: u32 = 220600;
pub const __DRIVERKIT_23_0: u32 = 230000;
pub const __DRIVERKIT_23_1: u32 = 230100;
pub const __DRIVERKIT_23_2: u32 = 230200;
pub const __DRIVERKIT_23_3: u32 = 230300;
pub const __DRIVERKIT_23_4: u32 = 230400;
pub const __VISIONOS_1_0: u32 = 10000;
pub const __VISIONOS_1_1: u32 = 10100;
pub const MAC_OS_X_VERSION_10_0: u32 = 1000;
pub const MAC_OS_X_VERSION_10_1: u32 = 1010;
pub const MAC_OS_X_VERSION_10_2: u32 = 1020;
pub const MAC_OS_X_VERSION_10_3: u32 = 1030;
pub const MAC_OS_X_VERSION_10_4: u32 = 1040;
pub const MAC_OS_X_VERSION_10_5: u32 = 1050;
pub const MAC_OS_X_VERSION_10_6: u32 = 1060;
pub const MAC_OS_X_VERSION_10_7: u32 = 1070;
pub const MAC_OS_X_VERSION_10_8: u32 = 1080;
pub const MAC_OS_X_VERSION_10_9: u32 = 1090;
pub const MAC_OS_X_VERSION_10_10: u32 = 101000;
pub const MAC_OS_X_VERSION_10_10_2: u32 = 101002;
pub const MAC_OS_X_VERSION_10_10_3: u32 = 101003;
pub const MAC_OS_X_VERSION_10_11: u32 = 101100;
pub const MAC_OS_X_VERSION_10_11_2: u32 = 101102;
pub const MAC_OS_X_VERSION_10_11_3: u32 = 101103;
pub const MAC_OS_X_VERSION_10_11_4: u32 = 101104;
pub const MAC_OS_X_VERSION_10_12: u32 = 101200;
pub const MAC_OS_X_VERSION_10_12_1: u32 = 101201;
pub const MAC_OS_X_VERSION_10_12_2: u32 = 101202;
pub const MAC_OS_X_VERSION_10_12_4: u32 = 101204;
pub const MAC_OS_X_VERSION_10_13: u32 = 101300;
pub const MAC_OS_X_VERSION_10_13_1: u32 = 101301;
pub const MAC_OS_X_VERSION_10_13_2: u32 = 101302;
pub const MAC_OS_X_VERSION_10_13_4: u32 = 101304;
pub const MAC_OS_X_VERSION_10_14: u32 = 101400;
pub const MAC_OS_X_VERSION_10_14_1: u32 = 101401;
pub const MAC_OS_X_VERSION_10_14_4: u32 = 101404;
pub const MAC_OS_X_VERSION_10_14_5: u32 = 101405;
pub const MAC_OS_X_VERSION_10_14_6: u32 = 101406;
pub const MAC_OS_X_VERSION_10_15: u32 = 101500;
pub const MAC_OS_X_VERSION_10_15_1: u32 = 101501;
pub const MAC_OS_X_VERSION_10_15_4: u32 = 101504;
pub const MAC_OS_X_VERSION_10_16: u32 = 101600;
pub const MAC_OS_VERSION_11_0: u32 = 110000;
pub const MAC_OS_VERSION_11_1: u32 = 110100;
pub const MAC_OS_VERSION_11_3: u32 = 110300;
pub const MAC_OS_VERSION_11_4: u32 = 110400;
pub const MAC_OS_VERSION_11_5: u32 = 110500;
pub const MAC_OS_VERSION_11_6: u32 = 110600;
pub const MAC_OS_VERSION_12_0: u32 = 120000;
pub const MAC_OS_VERSION_12_1: u32 = 120100;
pub const MAC_OS_VERSION_12_2: u32 = 120200;
pub const MAC_OS_VERSION_12_3: u32 = 120300;
pub const MAC_OS_VERSION_12_4: u32 = 120400;
pub const MAC_OS_VERSION_12_5: u32 = 120500;
pub const MAC_OS_VERSION_12_6: u32 = 120600;
pub const MAC_OS_VERSION_12_7: u32 = 120700;
pub const MAC_OS_VERSION_13_0: u32 = 130000;
pub const MAC_OS_VERSION_13_1: u32 = 130100;
pub const MAC_OS_VERSION_13_2: u32 = 130200;
pub const MAC_OS_VERSION_13_3: u32 = 130300;
pub const MAC_OS_VERSION_13_4: u32 = 130400;
pub const MAC_OS_VERSION_13_5: u32 = 130500;
pub const MAC_OS_VERSION_13_6: u32 = 130600;
pub const MAC_OS_VERSION_14_0: u32 = 140000;
pub const MAC_OS_VERSION_14_1: u32 = 140100;
pub const MAC_OS_VERSION_14_2: u32 = 140200;
pub const MAC_OS_VERSION_14_3: u32 = 140300;
pub const MAC_OS_VERSION_14_4: u32 = 140400;
pub const __MAC_OS_X_VERSION_MAX_ALLOWED: u32 = 140400;
pub const __ENABLE_LEGACY_MAC_AVAILABILITY: u32 = 1;
pub const __has_safe_buffers: u32 = 1;
pub const __DARWIN_ONLY_64_BIT_INO_T: u32 = 0;
pub const __DARWIN_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const __DARWIN_ONLY_VERS_1050: u32 = 0;
pub const __DARWIN_UNIX03: u32 = 1;
pub const __DARWIN_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_VERS_1050: u32 = 1;
pub const __DARWIN_NON_CANCELABLE: u32 = 0;
pub const __DARWIN_SUF_64_BIT_INO_T: &[u8; 9] = b"$INODE64\0";
pub const __DARWIN_SUF_1050: &[u8; 6] = b"$1050\0";
pub const __DARWIN_SUF_EXTSN: &[u8; 14] = b"$DARWIN_EXTSN\0";
pub const __DARWIN_C_ANSI: u32 = 4096;
pub const __DARWIN_C_FULL: u32 = 900000;
pub const __DARWIN_C_LEVEL: u32 = 900000;
pub const __STDC_WANT_LIB_EXT1__: u32 = 1;
pub const __DARWIN_NO_LONG_LONG: u32 = 0;
pub const _DARWIN_FEATURE_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const _DARWIN_FEATURE_UNIX_CONFORMANCE: u32 = 3;
pub const __has_ptrcheck: u32 = 0;
pub const __PTHREAD_SIZE__: u32 = 8176;
pub const __PTHREAD_ATTR_SIZE__: u32 = 56;
pub const __PTHREAD_MUTEXATTR_SIZE__: u32 = 8;
pub const __PTHREAD_MUTEX_SIZE__: u32 = 56;
pub const __PTHREAD_CONDATTR_SIZE__: u32 = 8;
pub const __PTHREAD_COND_SIZE__: u32 = 40;
pub const __PTHREAD_ONCE_SIZE__: u32 = 8;
pub const __PTHREAD_RWLOCK_SIZE__: u32 = 192;
pub const __PTHREAD_RWLOCKATTR_SIZE__: u32 = 16;
pub const __DARWIN_WCHAR_MIN: i32 = -2147483648;
pub const _FORTIFY_SOURCE: u32 = 2;
pub const __DARWIN_NSIG: u32 = 32;
pub const NSIG: u32 = 32;
pub const _I386_SIGNAL_H_: u32 = 1;
pub const SIGHUP: u32 = 1;
pub const SIGINT: u32 = 2;
pub const SIGQUIT: u32 = 3;
pub const SIGILL: u32 = 4;
pub const SIGTRAP: u32 = 5;
pub const SIGABRT: u32 = 6;
pub const SIGIOT: u32 = 6;
pub const SIGEMT: u32 = 7;
pub const SIGFPE: u32 = 8;
pub const SIGKILL: u32 = 9;
pub const SIGBUS: u32 = 10;
pub const SIGSEGV: u32 = 11;
pub const SIGSYS: u32 = 12;
pub const SIGPIPE: u32 = 13;
pub const SIGALRM: u32 = 14;
pub const SIGTERM: u32 = 15;
pub const SIGURG: u32 = 16;
pub const SIGSTOP: u32 = 17;
pub const SIGTSTP: u32 = 18;
pub const SIGCONT: u32 = 19;
pub const SIGCHLD: u32 = 20;
pub const SIGTTIN: u32 = 21;
pub const SIGTTOU: u32 = 22;
pub const SIGIO: u32 = 23;
pub const SIGXCPU: u32 = 24;
pub const SIGXFSZ: u32 = 25;
pub const SIGVTALRM: u32 = 26;
pub const SIGPROF: u32 = 27;
pub const SIGWINCH: u32 = 28;
pub const SIGINFO: u32 = 29;
pub const SIGUSR1: u32 = 30;
pub const SIGUSR2: u32 = 31;
pub const FP_PREC_24B: u32 = 0;
pub const FP_PREC_53B: u32 = 2;
pub const FP_PREC_64B: u32 = 3;
pub const FP_RND_NEAR: u32 = 0;
pub const FP_RND_DOWN: u32 = 1;
pub const FP_RND_UP: u32 = 2;
pub const FP_CHOP: u32 = 3;
pub const FP_STATE_BYTES: u32 = 512;
pub const _X86_INSTRUCTION_STATE_MAX_INSN_BYTES: u32 = 2380;
pub const _X86_INSTRUCTION_STATE_CACHELINE_SIZE: u32 = 64;
pub const __LASTBRANCH_MAX: u32 = 32;
pub const SIGEV_NONE: u32 = 0;
pub const SIGEV_SIGNAL: u32 = 1;
pub const SIGEV_THREAD: u32 = 3;
pub const ILL_NOOP: u32 = 0;
pub const ILL_ILLOPC: u32 = 1;
pub const ILL_ILLTRP: u32 = 2;
pub const ILL_PRVOPC: u32 = 3;
pub const ILL_ILLOPN: u32 = 4;
pub const ILL_ILLADR: u32 = 5;
pub const ILL_PRVREG: u32 = 6;
pub const ILL_COPROC: u32 = 7;
pub const ILL_BADSTK: u32 = 8;
pub const FPE_NOOP: u32 = 0;
pub const FPE_FLTDIV: u32 = 1;
pub const FPE_FLTOVF: u32 = 2;
pub const FPE_FLTUND: u32 = 3;
pub const FPE_FLTRES: u32 = 4;
pub const FPE_FLTINV: u32 = 5;
pub const FPE_FLTSUB: u32 = 6;
pub const FPE_INTDIV: u32 = 7;
pub const FPE_INTOVF: u32 = 8;
pub const SEGV_NOOP: u32 = 0;
pub const SEGV_MAPERR: u32 = 1;
pub const SEGV_ACCERR: u32 = 2;
pub const BUS_NOOP: u32 = 0;
pub const BUS_ADRALN: u32 = 1;
pub const BUS_ADRERR: u32 = 2;
pub const BUS_OBJERR: u32 = 3;
pub const TRAP_BRKPT: u32 = 1;
pub const TRAP_TRACE: u32 = 2;
pub const CLD_NOOP: u32 = 0;
pub const CLD_EXITED: u32 = 1;
pub const CLD_KILLED: u32 = 2;
pub const CLD_DUMPED: u32 = 3;
pub const CLD_TRAPPED: u32 = 4;
pub const CLD_STOPPED: u32 = 5;
pub const CLD_CONTINUED: u32 = 6;
pub const POLL_IN: u32 = 1;
pub const POLL_OUT: u32 = 2;
pub const POLL_MSG: u32 = 3;
pub const POLL_ERR: u32 = 4;
pub const POLL_PRI: u32 = 5;
pub const POLL_HUP: u32 = 6;
pub const SA_ONSTACK: u32 = 1;
pub const SA_RESTART: u32 = 2;
pub const SA_RESETHAND: u32 = 4;
pub const SA_NOCLDSTOP: u32 = 8;
pub const SA_NODEFER: u32 = 16;
pub const SA_NOCLDWAIT: u32 = 32;
pub const SA_SIGINFO: u32 = 64;
pub const SA_USERTRAMP: u32 = 256;
pub const SA_64REGSET: u32 = 512;
pub const SA_USERSPACE_MASK: u32 = 127;
pub const SIG_BLOCK: u32 = 1;
pub const SIG_UNBLOCK: u32 = 2;
pub const SIG_SETMASK: u32 = 3;
pub const SI_USER: u32 = 65537;
pub const SI_QUEUE: u32 = 65538;
pub const SI_TIMER: u32 = 65539;
pub const SI_ASYNCIO: u32 = 65540;
pub const SI_MESGQ: u32 = 65541;
pub const SS_ONSTACK: u32 = 1;
pub const SS_DISABLE: u32 = 4;
pub const MINSIGSTKSZ: u32 = 32768;
pub const SIGSTKSZ: u32 = 131072;
pub const SV_ONSTACK: u32 = 1;
pub const SV_INTERRUPT: u32 = 2;
pub const SV_RESETHAND: u32 = 4;
pub const SV_NODEFER: u32 = 16;
pub const SV_NOCLDSTOP: u32 = 8;
pub const SV_SIGINFO: u32 = 64;
pub const __WORDSIZE: u32 = 64;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const INT64_MAX: u64 = 9223372036854775807;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT64_MIN: i64 = -9223372036854775808;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const UINT64_MAX: i32 = -1;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST64_MIN: i64 = -9223372036854775808;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const INT_LEAST64_MAX: u64 = 9223372036854775807;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const UINT_LEAST64_MAX: i32 = -1;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i32 = -32768;
pub const INT_FAST32_MIN: i32 = -2147483648;
pub const INT_FAST64_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u32 = 32767;
pub const INT_FAST32_MAX: u32 = 2147483647;
pub const INT_FAST64_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: u32 = 65535;
pub const UINT_FAST32_MAX: u32 = 4294967295;
pub const UINT_FAST64_MAX: i32 = -1;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const UINTPTR_MAX: i32 = -1;
pub const SIZE_MAX: i32 = -1;
pub const RSIZE_MAX: i32 = -1;
pub const WINT_MIN: i32 = -2147483648;
pub const WINT_MAX: u32 = 2147483647;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const PRIO_PROCESS: u32 = 0;
pub const PRIO_PGRP: u32 = 1;
pub const PRIO_USER: u32 = 2;
pub const PRIO_DARWIN_THREAD: u32 = 3;
pub const PRIO_DARWIN_PROCESS: u32 = 4;
pub const PRIO_MIN: i32 = -20;
pub const PRIO_MAX: u32 = 20;
pub const PRIO_DARWIN_BG: u32 = 4096;
pub const PRIO_DARWIN_NONUI: u32 = 4097;
pub const RUSAGE_SELF: u32 = 0;
pub const RUSAGE_CHILDREN: i32 = -1;
pub const RUSAGE_INFO_V0: u32 = 0;
pub const RUSAGE_INFO_V1: u32 = 1;
pub const RUSAGE_INFO_V2: u32 = 2;
pub const RUSAGE_INFO_V3: u32 = 3;
pub const RUSAGE_INFO_V4: u32 = 4;
pub const RUSAGE_INFO_V5: u32 = 5;
pub const RUSAGE_INFO_V6: u32 = 6;
pub const RUSAGE_INFO_CURRENT: u32 = 6;
pub const RU_PROC_RUNS_RESLIDE: u32 = 1;
pub const RLIMIT_CPU: u32 = 0;
pub const RLIMIT_FSIZE: u32 = 1;
pub const RLIMIT_DATA: u32 = 2;
pub const RLIMIT_STACK: u32 = 3;
pub const RLIMIT_CORE: u32 = 4;
pub const RLIMIT_AS: u32 = 5;
pub const RLIMIT_RSS: u32 = 5;
pub const RLIMIT_MEMLOCK: u32 = 6;
pub const RLIMIT_NPROC: u32 = 7;
pub const RLIMIT_NOFILE: u32 = 8;
pub const RLIM_NLIMITS: u32 = 9;
pub const _RLIMIT_POSIX_FLAG: u32 = 4096;
pub const RLIMIT_WAKEUPS_MONITOR: u32 = 1;
pub const RLIMIT_CPU_USAGE_MONITOR: u32 = 2;
pub const RLIMIT_THREAD_CPULIMITS: u32 = 3;
pub const RLIMIT_FOOTPRINT_INTERVAL: u32 = 4;
pub const WAKEMON_ENABLE: u32 = 1;
pub const WAKEMON_DISABLE: u32 = 2;
pub const WAKEMON_GET_PARAMS: u32 = 4;
pub const WAKEMON_SET_DEFAULTS: u32 = 8;
pub const WAKEMON_MAKE_FATAL: u32 = 16;
pub const CPUMON_MAKE_FATAL: u32 = 4096;
pub const FOOTPRINT_INTERVAL_RESET: u32 = 1;
pub const IOPOL_TYPE_DISK: u32 = 0;
pub const IOPOL_TYPE_VFS_ATIME_UPDATES: u32 = 2;
pub const IOPOL_TYPE_VFS_MATERIALIZE_DATALESS_FILES: u32 = 3;
pub const IOPOL_TYPE_VFS_STATFS_NO_DATA_VOLUME: u32 = 4;
pub const IOPOL_TYPE_VFS_TRIGGER_RESOLVE: u32 = 5;
pub const IOPOL_TYPE_VFS_IGNORE_CONTENT_PROTECTION: u32 = 6;
pub const IOPOL_TYPE_VFS_IGNORE_PERMISSIONS: u32 = 7;
pub const IOPOL_TYPE_VFS_SKIP_MTIME_UPDATE: u32 = 8;
pub const IOPOL_TYPE_VFS_ALLOW_LOW_SPACE_WRITES: u32 = 9;
pub const IOPOL_TYPE_VFS_DISALLOW_RW_FOR_O_EVTONLY: u32 = 10;
pub const IOPOL_SCOPE_PROCESS: u32 = 0;
pub const IOPOL_SCOPE_THREAD: u32 = 1;
pub const IOPOL_SCOPE_DARWIN_BG: u32 = 2;
pub const IOPOL_DEFAULT: u32 = 0;
pub const IOPOL_IMPORTANT: u32 = 1;
pub const IOPOL_PASSIVE: u32 = 2;
pub const IOPOL_THROTTLE: u32 = 3;
pub const IOPOL_UTILITY: u32 = 4;
pub const IOPOL_STANDARD: u32 = 5;
pub const IOPOL_APPLICATION: u32 = 5;
pub const IOPOL_NORMAL: u32 = 1;
pub const IOPOL_ATIME_UPDATES_DEFAULT: u32 = 0;
pub const IOPOL_ATIME_UPDATES_OFF: u32 = 1;
pub const IOPOL_MATERIALIZE_DATALESS_FILES_DEFAULT: u32 = 0;
pub const IOPOL_MATERIALIZE_DATALESS_FILES_OFF: u32 = 1;
pub const IOPOL_MATERIALIZE_DATALESS_FILES_ON: u32 = 2;
pub const IOPOL_VFS_STATFS_NO_DATA_VOLUME_DEFAULT: u32 = 0;
pub const IOPOL_VFS_STATFS_FORCE_NO_DATA_VOLUME: u32 = 1;
pub const IOPOL_VFS_TRIGGER_RESOLVE_DEFAULT: u32 = 0;
pub const IOPOL_VFS_TRIGGER_RESOLVE_OFF: u32 = 1;
pub const IOPOL_VFS_CONTENT_PROTECTION_DEFAULT: u32 = 0;
pub const IOPOL_VFS_CONTENT_PROTECTION_IGNORE: u32 = 1;
pub const IOPOL_VFS_IGNORE_PERMISSIONS_OFF: u32 = 0;
pub const IOPOL_VFS_IGNORE_PERMISSIONS_ON: u32 = 1;
pub const IOPOL_VFS_SKIP_MTIME_UPDATE_OFF: u32 = 0;
pub const IOPOL_VFS_SKIP_MTIME_UPDATE_ON: u32 = 1;
pub const IOPOL_VFS_ALLOW_LOW_SPACE_WRITES_OFF: u32 = 0;
pub const IOPOL_VFS_ALLOW_LOW_SPACE_WRITES_ON: u32 = 1;
pub const IOPOL_VFS_DISALLOW_RW_FOR_O_EVTONLY_DEFAULT: u32 = 0;
pub const IOPOL_VFS_DISALLOW_RW_FOR_O_EVTONLY_ON: u32 = 1;
pub const IOPOL_VFS_NOCACHE_WRITE_FS_BLKSIZE_DEFAULT: u32 = 0;
pub const IOPOL_VFS_NOCACHE_WRITE_FS_BLKSIZE_ON: u32 = 1;
pub const WNOHANG: u32 = 1;
pub const WUNTRACED: u32 = 2;
pub const WCOREFLAG: u32 = 128;
pub const _WSTOPPED: u32 = 127;
pub const WEXITED: u32 = 4;
pub const WSTOPPED: u32 = 8;
pub const WCONTINUED: u32 = 16;
pub const WNOWAIT: u32 = 32;
pub const WAIT_ANY: i32 = -1;
pub const WAIT_MYPGRP: u32 = 0;
pub const _QUAD_HIGHWORD: u32 = 1;
pub const _QUAD_LOWWORD: u32 = 0;
pub const __DARWIN_LITTLE_ENDIAN: u32 = 1234;
pub const __DARWIN_BIG_ENDIAN: u32 = 4321;
pub const __DARWIN_PDP_ENDIAN: u32 = 3412;
pub const __DARWIN_BYTE_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const RAND_MAX: u32 = 2147483647;
pub const FP_NAN: u32 = 1;
pub const FP_INFINITE: u32 = 2;
pub const FP_ZERO: u32 = 3;
pub const FP_NORMAL: u32 = 4;
pub const FP_SUBNORMAL: u32 = 5;
pub const FP_SUPERNORMAL: u32 = 6;
pub const FP_ILOGB0: i32 = -2147483648;
pub const FP_ILOGBNAN: i32 = -2147483648;
pub const MATH_ERRNO: u32 = 1;
pub const MATH_ERREXCEPT: u32 = 2;
pub const M_E: f64 = 2.718281828459045;
pub const M_LOG2E: f64 = 1.4426950408889634;
pub const M_LOG10E: f64 = 0.4342944819032518;
pub const M_LN2: f64 = 0.6931471805599453;
pub const M_LN10: f64 = 2.302585092994046;
pub const M_PI: f64 = 3.141592653589793;
pub const M_PI_2: f64 = 1.5707963267948966;
pub const M_PI_4: f64 = 0.7853981633974483;
pub const M_1_PI: f64 = 0.3183098861837907;
pub const M_2_PI: f64 = 0.6366197723675814;
pub const M_2_SQRTPI: f64 = 1.1283791670955126;
pub const M_SQRT2: f64 = 1.4142135623730951;
pub const M_SQRT1_2: f64 = 0.7071067811865476;
pub const FP_SNAN: u32 = 1;
pub const FP_QNAN: u32 = 1;
pub const DOMAIN: u32 = 1;
pub const SING: u32 = 2;
pub const OVERFLOW: u32 = 3;
pub const UNDERFLOW: u32 = 4;
pub const TLOSS: u32 = 5;
pub const PLOSS: u32 = 6;
pub const mjMINVAL: f64 = 0.000000000000001;
pub const mjPI: f64 = 3.141592653589793;
pub const mjMAXVAL: f64 = 10000000000.0;
pub const mjMINMU: f64 = 0.00001;
pub const mjMINIMP: f64 = 0.0001;
pub const mjMAXIMP: f64 = 0.9999;
pub const mjMAXCONPAIR: u32 = 50;
pub const mjMAXTREEDEPTH: u32 = 50;
pub const mjNEQDATA: u32 = 11;
pub const mjNDYN: u32 = 10;
pub const mjNGAIN: u32 = 10;
pub const mjNBIAS: u32 = 10;
pub const mjNFLUID: u32 = 12;
pub const mjNREF: u32 = 2;
pub const mjNIMP: u32 = 5;
pub const mjNSOLVER: u32 = 200;
pub const mjNISLAND: u32 = 20;
pub const mjMAXTHREAD: u32 = 128;
pub const mjNGROUP: u32 = 6;
pub const mjMAXLIGHT: u32 = 100;
pub const mjMAXOVERLAY: u32 = 500;
pub const mjMAXLINE: u32 = 100;
pub const mjMAXLINEPNT: u32 = 1000;
pub const mjMAXPLANEGRID: u32 = 200;
pub const mjNAUX: u32 = 10;
pub const mjMAXTEXTURE: u32 = 1000;
pub const mjMAXMATERIAL: u32 = 1000;
pub const mjMAXUISECT: u32 = 10;
pub const mjMAXUIITEM: u32 = 200;
pub const mjMAXUITEXT: u32 = 300;
pub const mjMAXUINAME: u32 = 40;
pub const mjMAXUIMULTI: u32 = 35;
pub const mjMAXUIEDIT: u32 = 7;
pub const mjMAXUIRECT: u32 = 25;
pub const mjSEPCLOSED: u32 = 1000;
pub const mjPRESERVE: u32 = 2000;
pub const mjKEY_ESCAPE: u32 = 256;
pub const mjKEY_ENTER: u32 = 257;
pub const mjKEY_TAB: u32 = 258;
pub const mjKEY_BACKSPACE: u32 = 259;
pub const mjKEY_INSERT: u32 = 260;
pub const mjKEY_DELETE: u32 = 261;
pub const mjKEY_RIGHT: u32 = 262;
pub const mjKEY_LEFT: u32 = 263;
pub const mjKEY_DOWN: u32 = 264;
pub const mjKEY_UP: u32 = 265;
pub const mjKEY_PAGE_UP: u32 = 266;
pub const mjKEY_PAGE_DOWN: u32 = 267;
pub const mjKEY_HOME: u32 = 268;
pub const mjKEY_END: u32 = 269;
pub const mjKEY_F1: u32 = 290;
pub const mjKEY_F2: u32 = 291;
pub const mjKEY_F3: u32 = 292;
pub const mjKEY_F4: u32 = 293;
pub const mjKEY_F5: u32 = 294;
pub const mjKEY_F6: u32 = 295;
pub const mjKEY_F7: u32 = 296;
pub const mjKEY_F8: u32 = 297;
pub const mjKEY_F9: u32 = 298;
pub const mjKEY_F10: u32 = 299;
pub const mjKEY_F11: u32 = 300;
pub const mjKEY_F12: u32 = 301;
pub const mjKEY_NUMPAD_0: u32 = 320;
pub const mjKEY_NUMPAD_9: u32 = 329;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __uint64_t = ::std::os::raw::c_ulonglong;
pub type __darwin_intptr_t = ::std::os::raw::c_long;
pub type __darwin_natural_t = ::std::os::raw::c_uint;
pub type __darwin_ct_rune_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t {
    pub __mbstate8: [::std::os::raw::c_char; 128usize],
    pub _mbstateL: ::std::os::raw::c_longlong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __mbstate_t"][::std::mem::size_of::<__mbstate_t>() - 128usize];
    ["Alignment of __mbstate_t"][::std::mem::align_of::<__mbstate_t>() - 8usize];
    ["Offset of field: __mbstate_t::__mbstate8"]
        [::std::mem::offset_of!(__mbstate_t, __mbstate8) - 0usize];
    ["Offset of field: __mbstate_t::_mbstateL"]
        [::std::mem::offset_of!(__mbstate_t, _mbstateL) - 0usize];
};
impl Default for __mbstate_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type __darwin_mbstate_t = __mbstate_t;
pub type __darwin_ptrdiff_t = ::std::os::raw::c_long;
pub type __darwin_size_t = ::std::os::raw::c_ulong;
pub type __darwin_va_list = __builtin_va_list;
pub type __darwin_wchar_t = ::std::os::raw::c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type __darwin_wint_t = ::std::os::raw::c_int;
pub type __darwin_clock_t = ::std::os::raw::c_ulong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_ssize_t = ::std::os::raw::c_long;
pub type __darwin_time_t = ::std::os::raw::c_long;
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_fsblkcnt_t = ::std::os::raw::c_uint;
pub type __darwin_fsfilcnt_t = ::std::os::raw::c_uint;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_id_t = __uint32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __darwin_ino64_t;
pub type __darwin_mach_port_name_t = __darwin_natural_t;
pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_sigset_t = __uint32_t;
pub type __darwin_suseconds_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type __darwin_useconds_t = __uint32_t;
pub type __darwin_uuid_t = [::std::os::raw::c_uchar; 16usize];
pub type __darwin_uuid_string_t = [::std::os::raw::c_char; 37usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_pthread_handler_rec {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __next: *mut __darwin_pthread_handler_rec,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_pthread_handler_rec"]
        [::std::mem::size_of::<__darwin_pthread_handler_rec>() - 24usize];
    ["Alignment of __darwin_pthread_handler_rec"]
        [::std::mem::align_of::<__darwin_pthread_handler_rec>() - 8usize];
    ["Offset of field: __darwin_pthread_handler_rec::__routine"]
        [::std::mem::offset_of!(__darwin_pthread_handler_rec, __routine) - 0usize];
    ["Offset of field: __darwin_pthread_handler_rec::__arg"]
        [::std::mem::offset_of!(__darwin_pthread_handler_rec, __arg) - 8usize];
    ["Offset of field: __darwin_pthread_handler_rec::__next"]
        [::std::mem::offset_of!(__darwin_pthread_handler_rec, __next) - 16usize];
};
impl Default for __darwin_pthread_handler_rec {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_attr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_attr_t"][::std::mem::size_of::<_opaque_pthread_attr_t>() - 64usize];
    ["Alignment of _opaque_pthread_attr_t"]
        [::std::mem::align_of::<_opaque_pthread_attr_t>() - 8usize];
    ["Offset of field: _opaque_pthread_attr_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_attr_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_attr_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_attr_t, __opaque) - 8usize];
};
impl Default for _opaque_pthread_attr_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_cond_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 40usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_cond_t"][::std::mem::size_of::<_opaque_pthread_cond_t>() - 48usize];
    ["Alignment of _opaque_pthread_cond_t"]
        [::std::mem::align_of::<_opaque_pthread_cond_t>() - 8usize];
    ["Offset of field: _opaque_pthread_cond_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_cond_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_cond_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_cond_t, __opaque) - 8usize];
};
impl Default for _opaque_pthread_cond_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _opaque_pthread_condattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_condattr_t"]
        [::std::mem::size_of::<_opaque_pthread_condattr_t>() - 16usize];
    ["Alignment of _opaque_pthread_condattr_t"]
        [::std::mem::align_of::<_opaque_pthread_condattr_t>() - 8usize];
    ["Offset of field: _opaque_pthread_condattr_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_condattr_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_condattr_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_condattr_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutex_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_mutex_t"][::std::mem::size_of::<_opaque_pthread_mutex_t>() - 64usize];
    ["Alignment of _opaque_pthread_mutex_t"]
        [::std::mem::align_of::<_opaque_pthread_mutex_t>() - 8usize];
    ["Offset of field: _opaque_pthread_mutex_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_mutex_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_mutex_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_mutex_t, __opaque) - 8usize];
};
impl Default for _opaque_pthread_mutex_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _opaque_pthread_mutexattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_mutexattr_t"]
        [::std::mem::size_of::<_opaque_pthread_mutexattr_t>() - 16usize];
    ["Alignment of _opaque_pthread_mutexattr_t"]
        [::std::mem::align_of::<_opaque_pthread_mutexattr_t>() - 8usize];
    ["Offset of field: _opaque_pthread_mutexattr_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_mutexattr_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_mutexattr_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_mutexattr_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _opaque_pthread_once_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_once_t"][::std::mem::size_of::<_opaque_pthread_once_t>() - 16usize];
    ["Alignment of _opaque_pthread_once_t"]
        [::std::mem::align_of::<_opaque_pthread_once_t>() - 8usize];
    ["Offset of field: _opaque_pthread_once_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_once_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_once_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_once_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlock_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 192usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_rwlock_t"]
        [::std::mem::size_of::<_opaque_pthread_rwlock_t>() - 200usize];
    ["Alignment of _opaque_pthread_rwlock_t"]
        [::std::mem::align_of::<_opaque_pthread_rwlock_t>() - 8usize];
    ["Offset of field: _opaque_pthread_rwlock_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_rwlock_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_rwlock_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_rwlock_t, __opaque) - 8usize];
};
impl Default for _opaque_pthread_rwlock_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _opaque_pthread_rwlockattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_rwlockattr_t"]
        [::std::mem::size_of::<_opaque_pthread_rwlockattr_t>() - 24usize];
    ["Alignment of _opaque_pthread_rwlockattr_t"]
        [::std::mem::align_of::<_opaque_pthread_rwlockattr_t>() - 8usize];
    ["Offset of field: _opaque_pthread_rwlockattr_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_rwlockattr_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_rwlockattr_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_rwlockattr_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_t {
    pub __sig: ::std::os::raw::c_long,
    pub __cleanup_stack: *mut __darwin_pthread_handler_rec,
    pub __opaque: [::std::os::raw::c_char; 8176usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_t"][::std::mem::size_of::<_opaque_pthread_t>() - 8192usize];
    ["Alignment of _opaque_pthread_t"][::std::mem::align_of::<_opaque_pthread_t>() - 8usize];
    ["Offset of field: _opaque_pthread_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_t::__cleanup_stack"]
        [::std::mem::offset_of!(_opaque_pthread_t, __cleanup_stack) - 8usize];
    ["Offset of field: _opaque_pthread_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_t, __opaque) - 16usize];
};
impl Default for _opaque_pthread_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type __darwin_pthread_attr_t = _opaque_pthread_attr_t;
pub type __darwin_pthread_cond_t = _opaque_pthread_cond_t;
pub type __darwin_pthread_condattr_t = _opaque_pthread_condattr_t;
pub type __darwin_pthread_key_t = ::std::os::raw::c_ulong;
pub type __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
pub type __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t;
pub type __darwin_pthread_once_t = _opaque_pthread_once_t;
pub type __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t;
pub type __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t;
pub type __darwin_pthread_t = *mut _opaque_pthread_t;
pub type __darwin_nl_item = ::std::os::raw::c_int;
pub type __darwin_wctrans_t = ::std::os::raw::c_int;
pub type __darwin_wctype_t = __uint32_t;
pub const idtype_t_P_ALL: idtype_t = 0;
pub const idtype_t_P_PID: idtype_t = 1;
pub const idtype_t_P_PGID: idtype_t = 2;
pub type idtype_t = ::std::os::raw::c_uint;
pub type pid_t = __darwin_pid_t;
pub type id_t = __darwin_id_t;
pub type sig_atomic_t = ::std::os::raw::c_int;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulonglong;
pub type register_t = i64;
pub type user_addr_t = u_int64_t;
pub type user_size_t = u_int64_t;
pub type user_ssize_t = i64;
pub type user_long_t = i64;
pub type user_ulong_t = u_int64_t;
pub type user_time_t = i64;
pub type user_off_t = i64;
pub type syscall_arg_t = u_int64_t;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __darwin_i386_thread_state {
    pub __eax: ::std::os::raw::c_uint,
    pub __ebx: ::std::os::raw::c_uint,
    pub __ecx: ::std::os::raw::c_uint,
    pub __edx: ::std::os::raw::c_uint,
    pub __edi: ::std::os::raw::c_uint,
    pub __esi: ::std::os::raw::c_uint,
    pub __ebp: ::std::os::raw::c_uint,
    pub __esp: ::std::os::raw::c_uint,
    pub __ss: ::std::os::raw::c_uint,
    pub __eflags: ::std::os::raw::c_uint,
    pub __eip: ::std::os::raw::c_uint,
    pub __cs: ::std::os::raw::c_uint,
    pub __ds: ::std::os::raw::c_uint,
    pub __es: ::std::os::raw::c_uint,
    pub __fs: ::std::os::raw::c_uint,
    pub __gs: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_i386_thread_state"]
        [::std::mem::size_of::<__darwin_i386_thread_state>() - 64usize];
    ["Alignment of __darwin_i386_thread_state"]
        [::std::mem::align_of::<__darwin_i386_thread_state>() - 4usize];
    ["Offset of field: __darwin_i386_thread_state::__eax"]
        [::std::mem::offset_of!(__darwin_i386_thread_state, __eax) - 0usize];
    ["Offset of field: __darwin_i386_thread_state::__ebx"]
        [::std::mem::offset_of!(__darwin_i386_thread_state, __ebx) - 4usize];
    ["Offset of field: __darwin_i386_thread_state::__ecx"]
        [::std::mem::offset_of!(__darwin_i386_thread_state, __ecx) - 8usize];
    ["Offset of field: __darwin_i386_thread_state::__edx"]
        [::std::mem::offset_of!(__darwin_i386_thread_state, __edx) - 12usize];
    ["Offset of field: __darwin_i386_thread_state::__edi"]
        [::std::mem::offset_of!(__darwin_i386_thread_state, __edi) - 16usize];
    ["Offset of field: __darwin_i386_thread_state::__esi"]
        [::std::mem::offset_of!(__darwin_i386_thread_state, __esi) - 20usize];
    ["Offset of field: __darwin_i386_thread_state::__ebp"]
        [::std::mem::offset_of!(__darwin_i386_thread_state, __ebp) - 24usize];
    ["Offset of field: __darwin_i386_thread_state::__esp"]
        [::std::mem::offset_of!(__darwin_i386_thread_state, __esp) - 28usize];
    ["Offset of field: __darwin_i386_thread_state::__ss"]
        [::std::mem::offset_of!(__darwin_i386_thread_state, __ss) - 32usize];
    ["Offset of field: __darwin_i386_thread_state::__eflags"]
        [::std::mem::offset_of!(__darwin_i386_thread_state, __eflags) - 36usize];
    ["Offset of field: __darwin_i386_thread_state::__eip"]
        [::std::mem::offset_of!(__darwin_i386_thread_state, __eip) - 40usize];
    ["Offset of field: __darwin_i386_thread_state::__cs"]
        [::std::mem::offset_of!(__darwin_i386_thread_state, __cs) - 44usize];
    ["Offset of field: __darwin_i386_thread_state::__ds"]
        [::std::mem::offset_of!(__darwin_i386_thread_state, __ds) - 48usize];
    ["Offset of field: __darwin_i386_thread_state::__es"]
        [::std::mem::offset_of!(__darwin_i386_thread_state, __es) - 52usize];
    ["Offset of field: __darwin_i386_thread_state::__fs"]
        [::std::mem::offset_of!(__darwin_i386_thread_state, __fs) - 56usize];
    ["Offset of field: __darwin_i386_thread_state::__gs"]
        [::std::mem::offset_of!(__darwin_i386_thread_state, __gs) - 60usize];
};
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Default, Copy, Clone)]
pub struct __darwin_fp_control {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_fp_control"][::std::mem::size_of::<__darwin_fp_control>() - 2usize];
    ["Alignment of __darwin_fp_control"][::std::mem::align_of::<__darwin_fp_control>() - 2usize];
};
impl __darwin_fp_control {
    #[inline]
    pub fn __invalid(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___invalid(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn __invalid_raw(this: *const Self) -> ::std::os::raw::c_ushort {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set___invalid_raw(this: *mut Self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn __denorm(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___denorm(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn __denorm_raw(this: *const Self) -> ::std::os::raw::c_ushort {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set___denorm_raw(this: *mut Self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn __zdiv(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___zdiv(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn __zdiv_raw(this: *const Self) -> ::std::os::raw::c_ushort {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set___zdiv_raw(this: *mut Self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn __ovrfl(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___ovrfl(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn __ovrfl_raw(this: *const Self) -> ::std::os::raw::c_ushort {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set___ovrfl_raw(this: *mut Self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn __undfl(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___undfl(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn __undfl_raw(this: *const Self) -> ::std::os::raw::c_ushort {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set___undfl_raw(this: *mut Self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn __precis(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___precis(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn __precis_raw(this: *const Self) -> ::std::os::raw::c_ushort {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                5usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set___precis_raw(this: *mut Self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                5usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn __pc(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set___pc(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn __pc_raw(this: *const Self) -> ::std::os::raw::c_ushort {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                8usize,
                2u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set___pc_raw(this: *mut Self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                8usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn __rc(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set___rc(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn __rc_raw(this: *const Self) -> ::std::os::raw::c_ushort {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                10usize,
                2u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set___rc_raw(this: *mut Self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                10usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        __invalid: ::std::os::raw::c_ushort,
        __denorm: ::std::os::raw::c_ushort,
        __zdiv: ::std::os::raw::c_ushort,
        __ovrfl: ::std::os::raw::c_ushort,
        __undfl: ::std::os::raw::c_ushort,
        __precis: ::std::os::raw::c_ushort,
        __pc: ::std::os::raw::c_ushort,
        __rc: ::std::os::raw::c_ushort,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let __invalid: u16 = unsafe { ::std::mem::transmute(__invalid) };
            __invalid as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let __denorm: u16 = unsafe { ::std::mem::transmute(__denorm) };
            __denorm as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let __zdiv: u16 = unsafe { ::std::mem::transmute(__zdiv) };
            __zdiv as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let __ovrfl: u16 = unsafe { ::std::mem::transmute(__ovrfl) };
            __ovrfl as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let __undfl: u16 = unsafe { ::std::mem::transmute(__undfl) };
            __undfl as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let __precis: u16 = unsafe { ::std::mem::transmute(__precis) };
            __precis as u64
        });
        __bindgen_bitfield_unit.set(8usize, 2u8, {
            let __pc: u16 = unsafe { ::std::mem::transmute(__pc) };
            __pc as u64
        });
        __bindgen_bitfield_unit.set(10usize, 2u8, {
            let __rc: u16 = unsafe { ::std::mem::transmute(__rc) };
            __rc as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type __darwin_fp_control_t = __darwin_fp_control;
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Default, Copy, Clone)]
pub struct __darwin_fp_status {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_fp_status"][::std::mem::size_of::<__darwin_fp_status>() - 2usize];
    ["Alignment of __darwin_fp_status"][::std::mem::align_of::<__darwin_fp_status>() - 2usize];
};
impl __darwin_fp_status {
    #[inline]
    pub fn __invalid(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___invalid(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn __invalid_raw(this: *const Self) -> ::std::os::raw::c_ushort {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set___invalid_raw(this: *mut Self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn __denorm(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___denorm(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn __denorm_raw(this: *const Self) -> ::std::os::raw::c_ushort {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set___denorm_raw(this: *mut Self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn __zdiv(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___zdiv(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn __zdiv_raw(this: *const Self) -> ::std::os::raw::c_ushort {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set___zdiv_raw(this: *mut Self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn __ovrfl(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___ovrfl(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn __ovrfl_raw(this: *const Self) -> ::std::os::raw::c_ushort {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set___ovrfl_raw(this: *mut Self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn __undfl(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___undfl(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn __undfl_raw(this: *const Self) -> ::std::os::raw::c_ushort {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set___undfl_raw(this: *mut Self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn __precis(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___precis(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn __precis_raw(this: *const Self) -> ::std::os::raw::c_ushort {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                5usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set___precis_raw(this: *mut Self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                5usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn __stkflt(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___stkflt(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn __stkflt_raw(this: *const Self) -> ::std::os::raw::c_ushort {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                6usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set___stkflt_raw(this: *mut Self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                6usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn __errsumm(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___errsumm(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn __errsumm_raw(this: *const Self) -> ::std::os::raw::c_ushort {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                7usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set___errsumm_raw(this: *mut Self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                7usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn __c0(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___c0(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn __c0_raw(this: *const Self) -> ::std::os::raw::c_ushort {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                8usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set___c0_raw(this: *mut Self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                8usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn __c1(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___c1(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn __c1_raw(this: *const Self) -> ::std::os::raw::c_ushort {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                9usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set___c1_raw(this: *mut Self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                9usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn __c2(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___c2(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn __c2_raw(this: *const Self) -> ::std::os::raw::c_ushort {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                10usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set___c2_raw(this: *mut Self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                10usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn __tos(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 3u8) as u16) }
    }
    #[inline]
    pub fn set___tos(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn __tos_raw(this: *const Self) -> ::std::os::raw::c_ushort {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                11usize,
                3u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set___tos_raw(this: *mut Self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                11usize,
                3u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn __c3(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___c3(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn __c3_raw(this: *const Self) -> ::std::os::raw::c_ushort {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                14usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set___c3_raw(this: *mut Self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                14usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn __busy(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___busy(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn __busy_raw(this: *const Self) -> ::std::os::raw::c_ushort {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                15usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set___busy_raw(this: *mut Self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                15usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        __invalid: ::std::os::raw::c_ushort,
        __denorm: ::std::os::raw::c_ushort,
        __zdiv: ::std::os::raw::c_ushort,
        __ovrfl: ::std::os::raw::c_ushort,
        __undfl: ::std::os::raw::c_ushort,
        __precis: ::std::os::raw::c_ushort,
        __stkflt: ::std::os::raw::c_ushort,
        __errsumm: ::std::os::raw::c_ushort,
        __c0: ::std::os::raw::c_ushort,
        __c1: ::std::os::raw::c_ushort,
        __c2: ::std::os::raw::c_ushort,
        __tos: ::std::os::raw::c_ushort,
        __c3: ::std::os::raw::c_ushort,
        __busy: ::std::os::raw::c_ushort,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let __invalid: u16 = unsafe { ::std::mem::transmute(__invalid) };
            __invalid as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let __denorm: u16 = unsafe { ::std::mem::transmute(__denorm) };
            __denorm as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let __zdiv: u16 = unsafe { ::std::mem::transmute(__zdiv) };
            __zdiv as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let __ovrfl: u16 = unsafe { ::std::mem::transmute(__ovrfl) };
            __ovrfl as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let __undfl: u16 = unsafe { ::std::mem::transmute(__undfl) };
            __undfl as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let __precis: u16 = unsafe { ::std::mem::transmute(__precis) };
            __precis as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let __stkflt: u16 = unsafe { ::std::mem::transmute(__stkflt) };
            __stkflt as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let __errsumm: u16 = unsafe { ::std::mem::transmute(__errsumm) };
            __errsumm as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let __c0: u16 = unsafe { ::std::mem::transmute(__c0) };
            __c0 as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let __c1: u16 = unsafe { ::std::mem::transmute(__c1) };
            __c1 as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let __c2: u16 = unsafe { ::std::mem::transmute(__c2) };
            __c2 as u64
        });
        __bindgen_bitfield_unit.set(11usize, 3u8, {
            let __tos: u16 = unsafe { ::std::mem::transmute(__tos) };
            __tos as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let __c3: u16 = unsafe { ::std::mem::transmute(__c3) };
            __c3 as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let __busy: u16 = unsafe { ::std::mem::transmute(__busy) };
            __busy as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type __darwin_fp_status_t = __darwin_fp_status;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __darwin_mmst_reg {
    pub __mmst_reg: [::std::os::raw::c_char; 10usize],
    pub __mmst_rsrv: [::std::os::raw::c_char; 6usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_mmst_reg"][::std::mem::size_of::<__darwin_mmst_reg>() - 16usize];
    ["Alignment of __darwin_mmst_reg"][::std::mem::align_of::<__darwin_mmst_reg>() - 1usize];
    ["Offset of field: __darwin_mmst_reg::__mmst_reg"]
        [::std::mem::offset_of!(__darwin_mmst_reg, __mmst_reg) - 0usize];
    ["Offset of field: __darwin_mmst_reg::__mmst_rsrv"]
        [::std::mem::offset_of!(__darwin_mmst_reg, __mmst_rsrv) - 10usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __darwin_xmm_reg {
    pub __xmm_reg: [::std::os::raw::c_char; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_xmm_reg"][::std::mem::size_of::<__darwin_xmm_reg>() - 16usize];
    ["Alignment of __darwin_xmm_reg"][::std::mem::align_of::<__darwin_xmm_reg>() - 1usize];
    ["Offset of field: __darwin_xmm_reg::__xmm_reg"]
        [::std::mem::offset_of!(__darwin_xmm_reg, __xmm_reg) - 0usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __darwin_ymm_reg {
    pub __ymm_reg: [::std::os::raw::c_char; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_ymm_reg"][::std::mem::size_of::<__darwin_ymm_reg>() - 32usize];
    ["Alignment of __darwin_ymm_reg"][::std::mem::align_of::<__darwin_ymm_reg>() - 1usize];
    ["Offset of field: __darwin_ymm_reg::__ymm_reg"]
        [::std::mem::offset_of!(__darwin_ymm_reg, __ymm_reg) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_zmm_reg {
    pub __zmm_reg: [::std::os::raw::c_char; 64usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_zmm_reg"][::std::mem::size_of::<__darwin_zmm_reg>() - 64usize];
    ["Alignment of __darwin_zmm_reg"][::std::mem::align_of::<__darwin_zmm_reg>() - 1usize];
    ["Offset of field: __darwin_zmm_reg::__zmm_reg"]
        [::std::mem::offset_of!(__darwin_zmm_reg, __zmm_reg) - 0usize];
};
impl Default for __darwin_zmm_reg {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __darwin_opmask_reg {
    pub __opmask_reg: [::std::os::raw::c_char; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_opmask_reg"][::std::mem::size_of::<__darwin_opmask_reg>() - 8usize];
    ["Alignment of __darwin_opmask_reg"][::std::mem::align_of::<__darwin_opmask_reg>() - 1usize];
    ["Offset of field: __darwin_opmask_reg::__opmask_reg"]
        [::std::mem::offset_of!(__darwin_opmask_reg, __opmask_reg) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_i386_float_state {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 224usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_i386_float_state"]
        [::std::mem::size_of::<__darwin_i386_float_state>() - 524usize];
    ["Alignment of __darwin_i386_float_state"]
        [::std::mem::align_of::<__darwin_i386_float_state>() - 4usize];
    ["Offset of field: __darwin_i386_float_state::__fpu_reserved"]
        [::std::mem::offset_of!(__darwin_i386_float_state, __fpu_reserved) - 0usize];
    ["Offset of field: __darwin_i386_float_state::__fpu_fcw"]
        [::std::mem::offset_of!(__darwin_i386_float_state, __fpu_fcw) - 8usize];
    ["Offset of field: __darwin_i386_float_state::__fpu_fsw"]
        [::std::mem::offset_of!(__darwin_i386_float_state, __fpu_fsw) - 10usize];
    ["Offset of field: __darwin_i386_float_state::__fpu_ftw"]
        [::std::mem::offset_of!(__darwin_i386_float_state, __fpu_ftw) - 12usize];
    ["Offset of field: __darwin_i386_float_state::__fpu_rsrv1"]
        [::std::mem::offset_of!(__darwin_i386_float_state, __fpu_rsrv1) - 13usize];
    ["Offset of field: __darwin_i386_float_state::__fpu_fop"]
        [::std::mem::offset_of!(__darwin_i386_float_state, __fpu_fop) - 14usize];
    ["Offset of field: __darwin_i386_float_state::__fpu_ip"]
        [::std::mem::offset_of!(__darwin_i386_float_state, __fpu_ip) - 16usize];
    ["Offset of field: __darwin_i386_float_state::__fpu_cs"]
        [::std::mem::offset_of!(__darwin_i386_float_state, __fpu_cs) - 20usize];
    ["Offset of field: __darwin_i386_float_state::__fpu_rsrv2"]
        [::std::mem::offset_of!(__darwin_i386_float_state, __fpu_rsrv2) - 22usize];
    ["Offset of field: __darwin_i386_float_state::__fpu_dp"]
        [::std::mem::offset_of!(__darwin_i386_float_state, __fpu_dp) - 24usize];
    ["Offset of field: __darwin_i386_float_state::__fpu_ds"]
        [::std::mem::offset_of!(__darwin_i386_float_state, __fpu_ds) - 28usize];
    ["Offset of field: __darwin_i386_float_state::__fpu_rsrv3"]
        [::std::mem::offset_of!(__darwin_i386_float_state, __fpu_rsrv3) - 30usize];
    ["Offset of field: __darwin_i386_float_state::__fpu_mxcsr"]
        [::std::mem::offset_of!(__darwin_i386_float_state, __fpu_mxcsr) - 32usize];
    ["Offset of field: __darwin_i386_float_state::__fpu_mxcsrmask"]
        [::std::mem::offset_of!(__darwin_i386_float_state, __fpu_mxcsrmask) - 36usize];
    ["Offset of field: __darwin_i386_float_state::__fpu_stmm0"]
        [::std::mem::offset_of!(__darwin_i386_float_state, __fpu_stmm0) - 40usize];
    ["Offset of field: __darwin_i386_float_state::__fpu_stmm1"]
        [::std::mem::offset_of!(__darwin_i386_float_state, __fpu_stmm1) - 56usize];
    ["Offset of field: __darwin_i386_float_state::__fpu_stmm2"]
        [::std::mem::offset_of!(__darwin_i386_float_state, __fpu_stmm2) - 72usize];
    ["Offset of field: __darwin_i386_float_state::__fpu_stmm3"]
        [::std::mem::offset_of!(__darwin_i386_float_state, __fpu_stmm3) - 88usize];
    ["Offset of field: __darwin_i386_float_state::__fpu_stmm4"]
        [::std::mem::offset_of!(__darwin_i386_float_state, __fpu_stmm4) - 104usize];
    ["Offset of field: __darwin_i386_float_state::__fpu_stmm5"]
        [::std::mem::offset_of!(__darwin_i386_float_state, __fpu_stmm5) - 120usize];
    ["Offset of field: __darwin_i386_float_state::__fpu_stmm6"]
        [::std::mem::offset_of!(__darwin_i386_float_state, __fpu_stmm6) - 136usize];
    ["Offset of field: __darwin_i386_float_state::__fpu_stmm7"]
        [::std::mem::offset_of!(__darwin_i386_float_state, __fpu_stmm7) - 152usize];
    ["Offset of field: __darwin_i386_float_state::__fpu_xmm0"]
        [::std::mem::offset_of!(__darwin_i386_float_state, __fpu_xmm0) - 168usize];
    ["Offset of field: __darwin_i386_float_state::__fpu_xmm1"]
        [::std::mem::offset_of!(__darwin_i386_float_state, __fpu_xmm1) - 184usize];
    ["Offset of field: __darwin_i386_float_state::__fpu_xmm2"]
        [::std::mem::offset_of!(__darwin_i386_float_state, __fpu_xmm2) - 200usize];
    ["Offset of field: __darwin_i386_float_state::__fpu_xmm3"]
        [::std::mem::offset_of!(__darwin_i386_float_state, __fpu_xmm3) - 216usize];
    ["Offset of field: __darwin_i386_float_state::__fpu_xmm4"]
        [::std::mem::offset_of!(__darwin_i386_float_state, __fpu_xmm4) - 232usize];
    ["Offset of field: __darwin_i386_float_state::__fpu_xmm5"]
        [::std::mem::offset_of!(__darwin_i386_float_state, __fpu_xmm5) - 248usize];
    ["Offset of field: __darwin_i386_float_state::__fpu_xmm6"]
        [::std::mem::offset_of!(__darwin_i386_float_state, __fpu_xmm6) - 264usize];
    ["Offset of field: __darwin_i386_float_state::__fpu_xmm7"]
        [::std::mem::offset_of!(__darwin_i386_float_state, __fpu_xmm7) - 280usize];
    ["Offset of field: __darwin_i386_float_state::__fpu_rsrv4"]
        [::std::mem::offset_of!(__darwin_i386_float_state, __fpu_rsrv4) - 296usize];
    ["Offset of field: __darwin_i386_float_state::__fpu_reserved1"]
        [::std::mem::offset_of!(__darwin_i386_float_state, __fpu_reserved1) - 520usize];
};
impl Default for __darwin_i386_float_state {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_i386_avx_state {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 224usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
    pub __avx_reserved1: [::std::os::raw::c_char; 64usize],
    pub __fpu_ymmh0: __darwin_xmm_reg,
    pub __fpu_ymmh1: __darwin_xmm_reg,
    pub __fpu_ymmh2: __darwin_xmm_reg,
    pub __fpu_ymmh3: __darwin_xmm_reg,
    pub __fpu_ymmh4: __darwin_xmm_reg,
    pub __fpu_ymmh5: __darwin_xmm_reg,
    pub __fpu_ymmh6: __darwin_xmm_reg,
    pub __fpu_ymmh7: __darwin_xmm_reg,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_i386_avx_state"]
        [::std::mem::size_of::<__darwin_i386_avx_state>() - 716usize];
    ["Alignment of __darwin_i386_avx_state"]
        [::std::mem::align_of::<__darwin_i386_avx_state>() - 4usize];
    ["Offset of field: __darwin_i386_avx_state::__fpu_reserved"]
        [::std::mem::offset_of!(__darwin_i386_avx_state, __fpu_reserved) - 0usize];
    ["Offset of field: __darwin_i386_avx_state::__fpu_fcw"]
        [::std::mem::offset_of!(__darwin_i386_avx_state, __fpu_fcw) - 8usize];
    ["Offset of field: __darwin_i386_avx_state::__fpu_fsw"]
        [::std::mem::offset_of!(__darwin_i386_avx_state, __fpu_fsw) - 10usize];
    ["Offset of field: __darwin_i386_avx_state::__fpu_ftw"]
        [::std::mem::offset_of!(__darwin_i386_avx_state, __fpu_ftw) - 12usize];
    ["Offset of field: __darwin_i386_avx_state::__fpu_rsrv1"]
        [::std::mem::offset_of!(__darwin_i386_avx_state, __fpu_rsrv1) - 13usize];
    ["Offset of field: __darwin_i386_avx_state::__fpu_fop"]
        [::std::mem::offset_of!(__darwin_i386_avx_state, __fpu_fop) - 14usize];
    ["Offset of field: __darwin_i386_avx_state::__fpu_ip"]
        [::std::mem::offset_of!(__darwin_i386_avx_state, __fpu_ip) - 16usize];
    ["Offset of field: __darwin_i386_avx_state::__fpu_cs"]
        [::std::mem::offset_of!(__darwin_i386_avx_state, __fpu_cs) - 20usize];
    ["Offset of field: __darwin_i386_avx_state::__fpu_rsrv2"]
        [::std::mem::offset_of!(__darwin_i386_avx_state, __fpu_rsrv2) - 22usize];
    ["Offset of field: __darwin_i386_avx_state::__fpu_dp"]
        [::std::mem::offset_of!(__darwin_i386_avx_state, __fpu_dp) - 24usize];
    ["Offset of field: __darwin_i386_avx_state::__fpu_ds"]
        [::std::mem::offset_of!(__darwin_i386_avx_state, __fpu_ds) - 28usize];
    ["Offset of field: __darwin_i386_avx_state::__fpu_rsrv3"]
        [::std::mem::offset_of!(__darwin_i386_avx_state, __fpu_rsrv3) - 30usize];
    ["Offset of field: __darwin_i386_avx_state::__fpu_mxcsr"]
        [::std::mem::offset_of!(__darwin_i386_avx_state, __fpu_mxcsr) - 32usize];
    ["Offset of field: __darwin_i386_avx_state::__fpu_mxcsrmask"]
        [::std::mem::offset_of!(__darwin_i386_avx_state, __fpu_mxcsrmask) - 36usize];
    ["Offset of field: __darwin_i386_avx_state::__fpu_stmm0"]
        [::std::mem::offset_of!(__darwin_i386_avx_state, __fpu_stmm0) - 40usize];
    ["Offset of field: __darwin_i386_avx_state::__fpu_stmm1"]
        [::std::mem::offset_of!(__darwin_i386_avx_state, __fpu_stmm1) - 56usize];
    ["Offset of field: __darwin_i386_avx_state::__fpu_stmm2"]
        [::std::mem::offset_of!(__darwin_i386_avx_state, __fpu_stmm2) - 72usize];
    ["Offset of field: __darwin_i386_avx_state::__fpu_stmm3"]
        [::std::mem::offset_of!(__darwin_i386_avx_state, __fpu_stmm3) - 88usize];
    ["Offset of field: __darwin_i386_avx_state::__fpu_stmm4"]
        [::std::mem::offset_of!(__darwin_i386_avx_state, __fpu_stmm4) - 104usize];
    ["Offset of field: __darwin_i386_avx_state::__fpu_stmm5"]
        [::std::mem::offset_of!(__darwin_i386_avx_state, __fpu_stmm5) - 120usize];
    ["Offset of field: __darwin_i386_avx_state::__fpu_stmm6"]
        [::std::mem::offset_of!(__darwin_i386_avx_state, __fpu_stmm6) - 136usize];
    ["Offset of field: __darwin_i386_avx_state::__fpu_stmm7"]
        [::std::mem::offset_of!(__darwin_i386_avx_state, __fpu_stmm7) - 152usize];
    ["Offset of field: __darwin_i386_avx_state::__fpu_xmm0"]
        [::std::mem::offset_of!(__darwin_i386_avx_state, __fpu_xmm0) - 168usize];
    ["Offset of field: __darwin_i386_avx_state::__fpu_xmm1"]
        [::std::mem::offset_of!(__darwin_i386_avx_state, __fpu_xmm1) - 184usize];
    ["Offset of field: __darwin_i386_avx_state::__fpu_xmm2"]
        [::std::mem::offset_of!(__darwin_i386_avx_state, __fpu_xmm2) - 200usize];
    ["Offset of field: __darwin_i386_avx_state::__fpu_xmm3"]
        [::std::mem::offset_of!(__darwin_i386_avx_state, __fpu_xmm3) - 216usize];
    ["Offset of field: __darwin_i386_avx_state::__fpu_xmm4"]
        [::std::mem::offset_of!(__darwin_i386_avx_state, __fpu_xmm4) - 232usize];
    ["Offset of field: __darwin_i386_avx_state::__fpu_xmm5"]
        [::std::mem::offset_of!(__darwin_i386_avx_state, __fpu_xmm5) - 248usize];
    ["Offset of field: __darwin_i386_avx_state::__fpu_xmm6"]
        [::std::mem::offset_of!(__darwin_i386_avx_state, __fpu_xmm6) - 264usize];
    ["Offset of field: __darwin_i386_avx_state::__fpu_xmm7"]
        [::std::mem::offset_of!(__darwin_i386_avx_state, __fpu_xmm7) - 280usize];
    ["Offset of field: __darwin_i386_avx_state::__fpu_rsrv4"]
        [::std::mem::offset_of!(__darwin_i386_avx_state, __fpu_rsrv4) - 296usize];
    ["Offset of field: __darwin_i386_avx_state::__fpu_reserved1"]
        [::std::mem::offset_of!(__darwin_i386_avx_state, __fpu_reserved1) - 520usize];
    ["Offset of field: __darwin_i386_avx_state::__avx_reserved1"]
        [::std::mem::offset_of!(__darwin_i386_avx_state, __avx_reserved1) - 524usize];
    ["Offset of field: __darwin_i386_avx_state::__fpu_ymmh0"]
        [::std::mem::offset_of!(__darwin_i386_avx_state, __fpu_ymmh0) - 588usize];
    ["Offset of field: __darwin_i386_avx_state::__fpu_ymmh1"]
        [::std::mem::offset_of!(__darwin_i386_avx_state, __fpu_ymmh1) - 604usize];
    ["Offset of field: __darwin_i386_avx_state::__fpu_ymmh2"]
        [::std::mem::offset_of!(__darwin_i386_avx_state, __fpu_ymmh2) - 620usize];
    ["Offset of field: __darwin_i386_avx_state::__fpu_ymmh3"]
        [::std::mem::offset_of!(__darwin_i386_avx_state, __fpu_ymmh3) - 636usize];
    ["Offset of field: __darwin_i386_avx_state::__fpu_ymmh4"]
        [::std::mem::offset_of!(__darwin_i386_avx_state, __fpu_ymmh4) - 652usize];
    ["Offset of field: __darwin_i386_avx_state::__fpu_ymmh5"]
        [::std::mem::offset_of!(__darwin_i386_avx_state, __fpu_ymmh5) - 668usize];
    ["Offset of field: __darwin_i386_avx_state::__fpu_ymmh6"]
        [::std::mem::offset_of!(__darwin_i386_avx_state, __fpu_ymmh6) - 684usize];
    ["Offset of field: __darwin_i386_avx_state::__fpu_ymmh7"]
        [::std::mem::offset_of!(__darwin_i386_avx_state, __fpu_ymmh7) - 700usize];
};
impl Default for __darwin_i386_avx_state {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_i386_avx512_state {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 224usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
    pub __avx_reserved1: [::std::os::raw::c_char; 64usize],
    pub __fpu_ymmh0: __darwin_xmm_reg,
    pub __fpu_ymmh1: __darwin_xmm_reg,
    pub __fpu_ymmh2: __darwin_xmm_reg,
    pub __fpu_ymmh3: __darwin_xmm_reg,
    pub __fpu_ymmh4: __darwin_xmm_reg,
    pub __fpu_ymmh5: __darwin_xmm_reg,
    pub __fpu_ymmh6: __darwin_xmm_reg,
    pub __fpu_ymmh7: __darwin_xmm_reg,
    pub __fpu_k0: __darwin_opmask_reg,
    pub __fpu_k1: __darwin_opmask_reg,
    pub __fpu_k2: __darwin_opmask_reg,
    pub __fpu_k3: __darwin_opmask_reg,
    pub __fpu_k4: __darwin_opmask_reg,
    pub __fpu_k5: __darwin_opmask_reg,
    pub __fpu_k6: __darwin_opmask_reg,
    pub __fpu_k7: __darwin_opmask_reg,
    pub __fpu_zmmh0: __darwin_ymm_reg,
    pub __fpu_zmmh1: __darwin_ymm_reg,
    pub __fpu_zmmh2: __darwin_ymm_reg,
    pub __fpu_zmmh3: __darwin_ymm_reg,
    pub __fpu_zmmh4: __darwin_ymm_reg,
    pub __fpu_zmmh5: __darwin_ymm_reg,
    pub __fpu_zmmh6: __darwin_ymm_reg,
    pub __fpu_zmmh7: __darwin_ymm_reg,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_i386_avx512_state"]
        [::std::mem::size_of::<__darwin_i386_avx512_state>() - 1036usize];
    ["Alignment of __darwin_i386_avx512_state"]
        [::std::mem::align_of::<__darwin_i386_avx512_state>() - 4usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_reserved"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_reserved) - 0usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_fcw"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_fcw) - 8usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_fsw"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_fsw) - 10usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_ftw"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_ftw) - 12usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_rsrv1"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_rsrv1) - 13usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_fop"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_fop) - 14usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_ip"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_ip) - 16usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_cs"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_cs) - 20usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_rsrv2"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_rsrv2) - 22usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_dp"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_dp) - 24usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_ds"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_ds) - 28usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_rsrv3"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_rsrv3) - 30usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_mxcsr"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_mxcsr) - 32usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_mxcsrmask"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_mxcsrmask) - 36usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_stmm0"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_stmm0) - 40usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_stmm1"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_stmm1) - 56usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_stmm2"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_stmm2) - 72usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_stmm3"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_stmm3) - 88usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_stmm4"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_stmm4) - 104usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_stmm5"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_stmm5) - 120usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_stmm6"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_stmm6) - 136usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_stmm7"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_stmm7) - 152usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_xmm0"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_xmm0) - 168usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_xmm1"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_xmm1) - 184usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_xmm2"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_xmm2) - 200usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_xmm3"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_xmm3) - 216usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_xmm4"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_xmm4) - 232usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_xmm5"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_xmm5) - 248usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_xmm6"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_xmm6) - 264usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_xmm7"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_xmm7) - 280usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_rsrv4"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_rsrv4) - 296usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_reserved1"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_reserved1) - 520usize];
    ["Offset of field: __darwin_i386_avx512_state::__avx_reserved1"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __avx_reserved1) - 524usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_ymmh0"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_ymmh0) - 588usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_ymmh1"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_ymmh1) - 604usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_ymmh2"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_ymmh2) - 620usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_ymmh3"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_ymmh3) - 636usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_ymmh4"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_ymmh4) - 652usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_ymmh5"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_ymmh5) - 668usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_ymmh6"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_ymmh6) - 684usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_ymmh7"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_ymmh7) - 700usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_k0"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_k0) - 716usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_k1"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_k1) - 724usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_k2"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_k2) - 732usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_k3"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_k3) - 740usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_k4"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_k4) - 748usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_k5"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_k5) - 756usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_k6"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_k6) - 764usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_k7"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_k7) - 772usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_zmmh0"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_zmmh0) - 780usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_zmmh1"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_zmmh1) - 812usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_zmmh2"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_zmmh2) - 844usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_zmmh3"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_zmmh3) - 876usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_zmmh4"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_zmmh4) - 908usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_zmmh5"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_zmmh5) - 940usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_zmmh6"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_zmmh6) - 972usize];
    ["Offset of field: __darwin_i386_avx512_state::__fpu_zmmh7"]
        [::std::mem::offset_of!(__darwin_i386_avx512_state, __fpu_zmmh7) - 1004usize];
};
impl Default for __darwin_i386_avx512_state {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __darwin_i386_exception_state {
    pub __trapno: __uint16_t,
    pub __cpu: __uint16_t,
    pub __err: __uint32_t,
    pub __faultvaddr: __uint32_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_i386_exception_state"]
        [::std::mem::size_of::<__darwin_i386_exception_state>() - 12usize];
    ["Alignment of __darwin_i386_exception_state"]
        [::std::mem::align_of::<__darwin_i386_exception_state>() - 4usize];
    ["Offset of field: __darwin_i386_exception_state::__trapno"]
        [::std::mem::offset_of!(__darwin_i386_exception_state, __trapno) - 0usize];
    ["Offset of field: __darwin_i386_exception_state::__cpu"]
        [::std::mem::offset_of!(__darwin_i386_exception_state, __cpu) - 2usize];
    ["Offset of field: __darwin_i386_exception_state::__err"]
        [::std::mem::offset_of!(__darwin_i386_exception_state, __err) - 4usize];
    ["Offset of field: __darwin_i386_exception_state::__faultvaddr"]
        [::std::mem::offset_of!(__darwin_i386_exception_state, __faultvaddr) - 8usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __darwin_x86_debug_state32 {
    pub __dr0: ::std::os::raw::c_uint,
    pub __dr1: ::std::os::raw::c_uint,
    pub __dr2: ::std::os::raw::c_uint,
    pub __dr3: ::std::os::raw::c_uint,
    pub __dr4: ::std::os::raw::c_uint,
    pub __dr5: ::std::os::raw::c_uint,
    pub __dr6: ::std::os::raw::c_uint,
    pub __dr7: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_x86_debug_state32"]
        [::std::mem::size_of::<__darwin_x86_debug_state32>() - 32usize];
    ["Alignment of __darwin_x86_debug_state32"]
        [::std::mem::align_of::<__darwin_x86_debug_state32>() - 4usize];
    ["Offset of field: __darwin_x86_debug_state32::__dr0"]
        [::std::mem::offset_of!(__darwin_x86_debug_state32, __dr0) - 0usize];
    ["Offset of field: __darwin_x86_debug_state32::__dr1"]
        [::std::mem::offset_of!(__darwin_x86_debug_state32, __dr1) - 4usize];
    ["Offset of field: __darwin_x86_debug_state32::__dr2"]
        [::std::mem::offset_of!(__darwin_x86_debug_state32, __dr2) - 8usize];
    ["Offset of field: __darwin_x86_debug_state32::__dr3"]
        [::std::mem::offset_of!(__darwin_x86_debug_state32, __dr3) - 12usize];
    ["Offset of field: __darwin_x86_debug_state32::__dr4"]
        [::std::mem::offset_of!(__darwin_x86_debug_state32, __dr4) - 16usize];
    ["Offset of field: __darwin_x86_debug_state32::__dr5"]
        [::std::mem::offset_of!(__darwin_x86_debug_state32, __dr5) - 20usize];
    ["Offset of field: __darwin_x86_debug_state32::__dr6"]
        [::std::mem::offset_of!(__darwin_x86_debug_state32, __dr6) - 24usize];
    ["Offset of field: __darwin_x86_debug_state32::__dr7"]
        [::std::mem::offset_of!(__darwin_x86_debug_state32, __dr7) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __x86_instruction_state {
    pub __insn_stream_valid_bytes: ::std::os::raw::c_int,
    pub __insn_offset: ::std::os::raw::c_int,
    pub __out_of_synch: ::std::os::raw::c_int,
    pub __insn_bytes: [__uint8_t; 2380usize],
    pub __insn_cacheline: [__uint8_t; 64usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __x86_instruction_state"]
        [::std::mem::size_of::<__x86_instruction_state>() - 2456usize];
    ["Alignment of __x86_instruction_state"]
        [::std::mem::align_of::<__x86_instruction_state>() - 4usize];
    ["Offset of field: __x86_instruction_state::__insn_stream_valid_bytes"]
        [::std::mem::offset_of!(__x86_instruction_state, __insn_stream_valid_bytes) - 0usize];
    ["Offset of field: __x86_instruction_state::__insn_offset"]
        [::std::mem::offset_of!(__x86_instruction_state, __insn_offset) - 4usize];
    ["Offset of field: __x86_instruction_state::__out_of_synch"]
        [::std::mem::offset_of!(__x86_instruction_state, __out_of_synch) - 8usize];
    ["Offset of field: __x86_instruction_state::__insn_bytes"]
        [::std::mem::offset_of!(__x86_instruction_state, __insn_bytes) - 12usize];
    ["Offset of field: __x86_instruction_state::__insn_cacheline"]
        [::std::mem::offset_of!(__x86_instruction_state, __insn_cacheline) - 2392usize];
};
impl Default for __x86_instruction_state {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __last_branch_record {
    pub __from_ip: __uint64_t,
    pub __to_ip: __uint64_t,
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub __bindgen_padding_0: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __last_branch_record"][::std::mem::size_of::<__last_branch_record>() - 24usize];
    ["Alignment of __last_branch_record"][::std::mem::align_of::<__last_branch_record>() - 8usize];
    ["Offset of field: __last_branch_record::__from_ip"]
        [::std::mem::offset_of!(__last_branch_record, __from_ip) - 0usize];
    ["Offset of field: __last_branch_record::__to_ip"]
        [::std::mem::offset_of!(__last_branch_record, __to_ip) - 8usize];
};
impl __last_branch_record {
    #[inline]
    pub fn __mispredict(&self) -> __uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set___mispredict(&mut self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn __mispredict_raw(this: *const Self) -> __uint32_t {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set___mispredict_raw(this: *mut Self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn __tsx_abort(&self) -> __uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set___tsx_abort(&mut self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn __tsx_abort_raw(this: *const Self) -> __uint32_t {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set___tsx_abort_raw(this: *mut Self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn __in_tsx(&self) -> __uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set___in_tsx(&mut self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn __in_tsx_raw(this: *const Self) -> __uint32_t {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set___in_tsx_raw(this: *mut Self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn __cycle_count(&self) -> __uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set___cycle_count(&mut self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn __cycle_count_raw(this: *const Self) -> __uint32_t {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                16u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set___cycle_count_raw(this: *mut Self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                16u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn __reserved(&self) -> __uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(19usize, 13u8) as u32) }
    }
    #[inline]
    pub fn set___reserved(&mut self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(19usize, 13u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn __reserved_raw(this: *const Self) -> __uint32_t {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                19usize,
                13u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set___reserved_raw(this: *mut Self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                19usize,
                13u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        __mispredict: __uint32_t,
        __tsx_abort: __uint32_t,
        __in_tsx: __uint32_t,
        __cycle_count: __uint32_t,
        __reserved: __uint32_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let __mispredict: u32 = unsafe { ::std::mem::transmute(__mispredict) };
            __mispredict as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let __tsx_abort: u32 = unsafe { ::std::mem::transmute(__tsx_abort) };
            __tsx_abort as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let __in_tsx: u32 = unsafe { ::std::mem::transmute(__in_tsx) };
            __in_tsx as u64
        });
        __bindgen_bitfield_unit.set(3usize, 16u8, {
            let __cycle_count: u32 = unsafe { ::std::mem::transmute(__cycle_count) };
            __cycle_count as u64
        });
        __bindgen_bitfield_unit.set(19usize, 13u8, {
            let __reserved: u32 = unsafe { ::std::mem::transmute(__reserved) };
            __reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __last_branch_state {
    pub __lbr_count: ::std::os::raw::c_int,
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub __lbrs: [__last_branch_record; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __last_branch_state"][::std::mem::size_of::<__last_branch_state>() - 776usize];
    ["Alignment of __last_branch_state"][::std::mem::align_of::<__last_branch_state>() - 8usize];
    ["Offset of field: __last_branch_state::__lbr_count"]
        [::std::mem::offset_of!(__last_branch_state, __lbr_count) - 0usize];
    ["Offset of field: __last_branch_state::__lbrs"]
        [::std::mem::offset_of!(__last_branch_state, __lbrs) - 8usize];
};
impl __last_branch_state {
    #[inline]
    pub fn __lbr_supported_tsx(&self) -> __uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set___lbr_supported_tsx(&mut self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn __lbr_supported_tsx_raw(this: *const Self) -> __uint32_t {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set___lbr_supported_tsx_raw(this: *mut Self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn __lbr_supported_cycle_count(&self) -> __uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set___lbr_supported_cycle_count(&mut self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn __lbr_supported_cycle_count_raw(this: *const Self) -> __uint32_t {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set___lbr_supported_cycle_count_raw(this: *mut Self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn __reserved(&self) -> __uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 30u8) as u32) }
    }
    #[inline]
    pub fn set___reserved(&mut self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 30u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn __reserved_raw(this: *const Self) -> __uint32_t {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                30u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set___reserved_raw(this: *mut Self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                30u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        __lbr_supported_tsx: __uint32_t,
        __lbr_supported_cycle_count: __uint32_t,
        __reserved: __uint32_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let __lbr_supported_tsx: u32 = unsafe { ::std::mem::transmute(__lbr_supported_tsx) };
            __lbr_supported_tsx as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let __lbr_supported_cycle_count: u32 =
                unsafe { ::std::mem::transmute(__lbr_supported_cycle_count) };
            __lbr_supported_cycle_count as u64
        });
        __bindgen_bitfield_unit.set(2usize, 30u8, {
            let __reserved: u32 = unsafe { ::std::mem::transmute(__reserved) };
            __reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __x86_pagein_state {
    pub __pagein_error: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __x86_pagein_state"][::std::mem::size_of::<__x86_pagein_state>() - 4usize];
    ["Alignment of __x86_pagein_state"][::std::mem::align_of::<__x86_pagein_state>() - 4usize];
    ["Offset of field: __x86_pagein_state::__pagein_error"]
        [::std::mem::offset_of!(__x86_pagein_state, __pagein_error) - 0usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __darwin_x86_thread_state64 {
    pub __rax: __uint64_t,
    pub __rbx: __uint64_t,
    pub __rcx: __uint64_t,
    pub __rdx: __uint64_t,
    pub __rdi: __uint64_t,
    pub __rsi: __uint64_t,
    pub __rbp: __uint64_t,
    pub __rsp: __uint64_t,
    pub __r8: __uint64_t,
    pub __r9: __uint64_t,
    pub __r10: __uint64_t,
    pub __r11: __uint64_t,
    pub __r12: __uint64_t,
    pub __r13: __uint64_t,
    pub __r14: __uint64_t,
    pub __r15: __uint64_t,
    pub __rip: __uint64_t,
    pub __rflags: __uint64_t,
    pub __cs: __uint64_t,
    pub __fs: __uint64_t,
    pub __gs: __uint64_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_x86_thread_state64"]
        [::std::mem::size_of::<__darwin_x86_thread_state64>() - 168usize];
    ["Alignment of __darwin_x86_thread_state64"]
        [::std::mem::align_of::<__darwin_x86_thread_state64>() - 8usize];
    ["Offset of field: __darwin_x86_thread_state64::__rax"]
        [::std::mem::offset_of!(__darwin_x86_thread_state64, __rax) - 0usize];
    ["Offset of field: __darwin_x86_thread_state64::__rbx"]
        [::std::mem::offset_of!(__darwin_x86_thread_state64, __rbx) - 8usize];
    ["Offset of field: __darwin_x86_thread_state64::__rcx"]
        [::std::mem::offset_of!(__darwin_x86_thread_state64, __rcx) - 16usize];
    ["Offset of field: __darwin_x86_thread_state64::__rdx"]
        [::std::mem::offset_of!(__darwin_x86_thread_state64, __rdx) - 24usize];
    ["Offset of field: __darwin_x86_thread_state64::__rdi"]
        [::std::mem::offset_of!(__darwin_x86_thread_state64, __rdi) - 32usize];
    ["Offset of field: __darwin_x86_thread_state64::__rsi"]
        [::std::mem::offset_of!(__darwin_x86_thread_state64, __rsi) - 40usize];
    ["Offset of field: __darwin_x86_thread_state64::__rbp"]
        [::std::mem::offset_of!(__darwin_x86_thread_state64, __rbp) - 48usize];
    ["Offset of field: __darwin_x86_thread_state64::__rsp"]
        [::std::mem::offset_of!(__darwin_x86_thread_state64, __rsp) - 56usize];
    ["Offset of field: __darwin_x86_thread_state64::__r8"]
        [::std::mem::offset_of!(__darwin_x86_thread_state64, __r8) - 64usize];
    ["Offset of field: __darwin_x86_thread_state64::__r9"]
        [::std::mem::offset_of!(__darwin_x86_thread_state64, __r9) - 72usize];
    ["Offset of field: __darwin_x86_thread_state64::__r10"]
        [::std::mem::offset_of!(__darwin_x86_thread_state64, __r10) - 80usize];
    ["Offset of field: __darwin_x86_thread_state64::__r11"]
        [::std::mem::offset_of!(__darwin_x86_thread_state64, __r11) - 88usize];
    ["Offset of field: __darwin_x86_thread_state64::__r12"]
        [::std::mem::offset_of!(__darwin_x86_thread_state64, __r12) - 96usize];
    ["Offset of field: __darwin_x86_thread_state64::__r13"]
        [::std::mem::offset_of!(__darwin_x86_thread_state64, __r13) - 104usize];
    ["Offset of field: __darwin_x86_thread_state64::__r14"]
        [::std::mem::offset_of!(__darwin_x86_thread_state64, __r14) - 112usize];
    ["Offset of field: __darwin_x86_thread_state64::__r15"]
        [::std::mem::offset_of!(__darwin_x86_thread_state64, __r15) - 120usize];
    ["Offset of field: __darwin_x86_thread_state64::__rip"]
        [::std::mem::offset_of!(__darwin_x86_thread_state64, __rip) - 128usize];
    ["Offset of field: __darwin_x86_thread_state64::__rflags"]
        [::std::mem::offset_of!(__darwin_x86_thread_state64, __rflags) - 136usize];
    ["Offset of field: __darwin_x86_thread_state64::__cs"]
        [::std::mem::offset_of!(__darwin_x86_thread_state64, __cs) - 144usize];
    ["Offset of field: __darwin_x86_thread_state64::__fs"]
        [::std::mem::offset_of!(__darwin_x86_thread_state64, __fs) - 152usize];
    ["Offset of field: __darwin_x86_thread_state64::__gs"]
        [::std::mem::offset_of!(__darwin_x86_thread_state64, __gs) - 160usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __darwin_x86_thread_full_state64 {
    pub __ss64: __darwin_x86_thread_state64,
    pub __ds: __uint64_t,
    pub __es: __uint64_t,
    pub __ss: __uint64_t,
    pub __gsbase: __uint64_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_x86_thread_full_state64"]
        [::std::mem::size_of::<__darwin_x86_thread_full_state64>() - 200usize];
    ["Alignment of __darwin_x86_thread_full_state64"]
        [::std::mem::align_of::<__darwin_x86_thread_full_state64>() - 8usize];
    ["Offset of field: __darwin_x86_thread_full_state64::__ss64"]
        [::std::mem::offset_of!(__darwin_x86_thread_full_state64, __ss64) - 0usize];
    ["Offset of field: __darwin_x86_thread_full_state64::__ds"]
        [::std::mem::offset_of!(__darwin_x86_thread_full_state64, __ds) - 168usize];
    ["Offset of field: __darwin_x86_thread_full_state64::__es"]
        [::std::mem::offset_of!(__darwin_x86_thread_full_state64, __es) - 176usize];
    ["Offset of field: __darwin_x86_thread_full_state64::__ss"]
        [::std::mem::offset_of!(__darwin_x86_thread_full_state64, __ss) - 184usize];
    ["Offset of field: __darwin_x86_thread_full_state64::__gsbase"]
        [::std::mem::offset_of!(__darwin_x86_thread_full_state64, __gsbase) - 192usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_x86_float_state64 {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_xmm8: __darwin_xmm_reg,
    pub __fpu_xmm9: __darwin_xmm_reg,
    pub __fpu_xmm10: __darwin_xmm_reg,
    pub __fpu_xmm11: __darwin_xmm_reg,
    pub __fpu_xmm12: __darwin_xmm_reg,
    pub __fpu_xmm13: __darwin_xmm_reg,
    pub __fpu_xmm14: __darwin_xmm_reg,
    pub __fpu_xmm15: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 96usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_x86_float_state64"]
        [::std::mem::size_of::<__darwin_x86_float_state64>() - 524usize];
    ["Alignment of __darwin_x86_float_state64"]
        [::std::mem::align_of::<__darwin_x86_float_state64>() - 4usize];
    ["Offset of field: __darwin_x86_float_state64::__fpu_reserved"]
        [::std::mem::offset_of!(__darwin_x86_float_state64, __fpu_reserved) - 0usize];
    ["Offset of field: __darwin_x86_float_state64::__fpu_fcw"]
        [::std::mem::offset_of!(__darwin_x86_float_state64, __fpu_fcw) - 8usize];
    ["Offset of field: __darwin_x86_float_state64::__fpu_fsw"]
        [::std::mem::offset_of!(__darwin_x86_float_state64, __fpu_fsw) - 10usize];
    ["Offset of field: __darwin_x86_float_state64::__fpu_ftw"]
        [::std::mem::offset_of!(__darwin_x86_float_state64, __fpu_ftw) - 12usize];
    ["Offset of field: __darwin_x86_float_state64::__fpu_rsrv1"]
        [::std::mem::offset_of!(__darwin_x86_float_state64, __fpu_rsrv1) - 13usize];
    ["Offset of field: __darwin_x86_float_state64::__fpu_fop"]
        [::std::mem::offset_of!(__darwin_x86_float_state64, __fpu_fop) - 14usize];
    ["Offset of field: __darwin_x86_float_state64::__fpu_ip"]
        [::std::mem::offset_of!(__darwin_x86_float_state64, __fpu_ip) - 16usize];
    ["Offset of field: __darwin_x86_float_state64::__fpu_cs"]
        [::std::mem::offset_of!(__darwin_x86_float_state64, __fpu_cs) - 20usize];
    ["Offset of field: __darwin_x86_float_state64::__fpu_rsrv2"]
        [::std::mem::offset_of!(__darwin_x86_float_state64, __fpu_rsrv2) - 22usize];
    ["Offset of field: __darwin_x86_float_state64::__fpu_dp"]
        [::std::mem::offset_of!(__darwin_x86_float_state64, __fpu_dp) - 24usize];
    ["Offset of field: __darwin_x86_float_state64::__fpu_ds"]
        [::std::mem::offset_of!(__darwin_x86_float_state64, __fpu_ds) - 28usize];
    ["Offset of field: __darwin_x86_float_state64::__fpu_rsrv3"]
        [::std::mem::offset_of!(__darwin_x86_float_state64, __fpu_rsrv3) - 30usize];
    ["Offset of field: __darwin_x86_float_state64::__fpu_mxcsr"]
        [::std::mem::offset_of!(__darwin_x86_float_state64, __fpu_mxcsr) - 32usize];
    ["Offset of field: __darwin_x86_float_state64::__fpu_mxcsrmask"]
        [::std::mem::offset_of!(__darwin_x86_float_state64, __fpu_mxcsrmask) - 36usize];
    ["Offset of field: __darwin_x86_float_state64::__fpu_stmm0"]
        [::std::mem::offset_of!(__darwin_x86_float_state64, __fpu_stmm0) - 40usize];
    ["Offset of field: __darwin_x86_float_state64::__fpu_stmm1"]
        [::std::mem::offset_of!(__darwin_x86_float_state64, __fpu_stmm1) - 56usize];
    ["Offset of field: __darwin_x86_float_state64::__fpu_stmm2"]
        [::std::mem::offset_of!(__darwin_x86_float_state64, __fpu_stmm2) - 72usize];
    ["Offset of field: __darwin_x86_float_state64::__fpu_stmm3"]
        [::std::mem::offset_of!(__darwin_x86_float_state64, __fpu_stmm3) - 88usize];
    ["Offset of field: __darwin_x86_float_state64::__fpu_stmm4"]
        [::std::mem::offset_of!(__darwin_x86_float_state64, __fpu_stmm4) - 104usize];
    ["Offset of field: __darwin_x86_float_state64::__fpu_stmm5"]
        [::std::mem::offset_of!(__darwin_x86_float_state64, __fpu_stmm5) - 120usize];
    ["Offset of field: __darwin_x86_float_state64::__fpu_stmm6"]
        [::std::mem::offset_of!(__darwin_x86_float_state64, __fpu_stmm6) - 136usize];
    ["Offset of field: __darwin_x86_float_state64::__fpu_stmm7"]
        [::std::mem::offset_of!(__darwin_x86_float_state64, __fpu_stmm7) - 152usize];
    ["Offset of field: __darwin_x86_float_state64::__fpu_xmm0"]
        [::std::mem::offset_of!(__darwin_x86_float_state64, __fpu_xmm0) - 168usize];
    ["Offset of field: __darwin_x86_float_state64::__fpu_xmm1"]
        [::std::mem::offset_of!(__darwin_x86_float_state64, __fpu_xmm1) - 184usize];
    ["Offset of field: __darwin_x86_float_state64::__fpu_xmm2"]
        [::std::mem::offset_of!(__darwin_x86_float_state64, __fpu_xmm2) - 200usize];
    ["Offset of field: __darwin_x86_float_state64::__fpu_xmm3"]
        [::std::mem::offset_of!(__darwin_x86_float_state64, __fpu_xmm3) - 216usize];
    ["Offset of field: __darwin_x86_float_state64::__fpu_xmm4"]
        [::std::mem::offset_of!(__darwin_x86_float_state64, __fpu_xmm4) - 232usize];
    ["Offset of field: __darwin_x86_float_state64::__fpu_xmm5"]
        [::std::mem::offset_of!(__darwin_x86_float_state64, __fpu_xmm5) - 248usize];
    ["Offset of field: __darwin_x86_float_state64::__fpu_xmm6"]
        [::std::mem::offset_of!(__darwin_x86_float_state64, __fpu_xmm6) - 264usize];
    ["Offset of field: __darwin_x86_float_state64::__fpu_xmm7"]
        [::std::mem::offset_of!(__darwin_x86_float_state64, __fpu_xmm7) - 280usize];
    ["Offset of field: __darwin_x86_float_state64::__fpu_xmm8"]
        [::std::mem::offset_of!(__darwin_x86_float_state64, __fpu_xmm8) - 296usize];
    ["Offset of field: __darwin_x86_float_state64::__fpu_xmm9"]
        [::std::mem::offset_of!(__darwin_x86_float_state64, __fpu_xmm9) - 312usize];
    ["Offset of field: __darwin_x86_float_state64::__fpu_xmm10"]
        [::std::mem::offset_of!(__darwin_x86_float_state64, __fpu_xmm10) - 328usize];
    ["Offset of field: __darwin_x86_float_state64::__fpu_xmm11"]
        [::std::mem::offset_of!(__darwin_x86_float_state64, __fpu_xmm11) - 344usize];
    ["Offset of field: __darwin_x86_float_state64::__fpu_xmm12"]
        [::std::mem::offset_of!(__darwin_x86_float_state64, __fpu_xmm12) - 360usize];
    ["Offset of field: __darwin_x86_float_state64::__fpu_xmm13"]
        [::std::mem::offset_of!(__darwin_x86_float_state64, __fpu_xmm13) - 376usize];
    ["Offset of field: __darwin_x86_float_state64::__fpu_xmm14"]
        [::std::mem::offset_of!(__darwin_x86_float_state64, __fpu_xmm14) - 392usize];
    ["Offset of field: __darwin_x86_float_state64::__fpu_xmm15"]
        [::std::mem::offset_of!(__darwin_x86_float_state64, __fpu_xmm15) - 408usize];
    ["Offset of field: __darwin_x86_float_state64::__fpu_rsrv4"]
        [::std::mem::offset_of!(__darwin_x86_float_state64, __fpu_rsrv4) - 424usize];
    ["Offset of field: __darwin_x86_float_state64::__fpu_reserved1"]
        [::std::mem::offset_of!(__darwin_x86_float_state64, __fpu_reserved1) - 520usize];
};
impl Default for __darwin_x86_float_state64 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_x86_avx_state64 {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_xmm8: __darwin_xmm_reg,
    pub __fpu_xmm9: __darwin_xmm_reg,
    pub __fpu_xmm10: __darwin_xmm_reg,
    pub __fpu_xmm11: __darwin_xmm_reg,
    pub __fpu_xmm12: __darwin_xmm_reg,
    pub __fpu_xmm13: __darwin_xmm_reg,
    pub __fpu_xmm14: __darwin_xmm_reg,
    pub __fpu_xmm15: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 96usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
    pub __avx_reserved1: [::std::os::raw::c_char; 64usize],
    pub __fpu_ymmh0: __darwin_xmm_reg,
    pub __fpu_ymmh1: __darwin_xmm_reg,
    pub __fpu_ymmh2: __darwin_xmm_reg,
    pub __fpu_ymmh3: __darwin_xmm_reg,
    pub __fpu_ymmh4: __darwin_xmm_reg,
    pub __fpu_ymmh5: __darwin_xmm_reg,
    pub __fpu_ymmh6: __darwin_xmm_reg,
    pub __fpu_ymmh7: __darwin_xmm_reg,
    pub __fpu_ymmh8: __darwin_xmm_reg,
    pub __fpu_ymmh9: __darwin_xmm_reg,
    pub __fpu_ymmh10: __darwin_xmm_reg,
    pub __fpu_ymmh11: __darwin_xmm_reg,
    pub __fpu_ymmh12: __darwin_xmm_reg,
    pub __fpu_ymmh13: __darwin_xmm_reg,
    pub __fpu_ymmh14: __darwin_xmm_reg,
    pub __fpu_ymmh15: __darwin_xmm_reg,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_x86_avx_state64"]
        [::std::mem::size_of::<__darwin_x86_avx_state64>() - 844usize];
    ["Alignment of __darwin_x86_avx_state64"]
        [::std::mem::align_of::<__darwin_x86_avx_state64>() - 4usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_reserved"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_reserved) - 0usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_fcw"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_fcw) - 8usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_fsw"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_fsw) - 10usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_ftw"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_ftw) - 12usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_rsrv1"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_rsrv1) - 13usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_fop"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_fop) - 14usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_ip"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_ip) - 16usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_cs"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_cs) - 20usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_rsrv2"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_rsrv2) - 22usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_dp"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_dp) - 24usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_ds"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_ds) - 28usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_rsrv3"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_rsrv3) - 30usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_mxcsr"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_mxcsr) - 32usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_mxcsrmask"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_mxcsrmask) - 36usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_stmm0"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_stmm0) - 40usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_stmm1"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_stmm1) - 56usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_stmm2"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_stmm2) - 72usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_stmm3"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_stmm3) - 88usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_stmm4"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_stmm4) - 104usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_stmm5"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_stmm5) - 120usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_stmm6"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_stmm6) - 136usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_stmm7"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_stmm7) - 152usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_xmm0"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_xmm0) - 168usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_xmm1"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_xmm1) - 184usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_xmm2"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_xmm2) - 200usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_xmm3"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_xmm3) - 216usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_xmm4"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_xmm4) - 232usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_xmm5"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_xmm5) - 248usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_xmm6"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_xmm6) - 264usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_xmm7"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_xmm7) - 280usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_xmm8"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_xmm8) - 296usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_xmm9"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_xmm9) - 312usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_xmm10"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_xmm10) - 328usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_xmm11"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_xmm11) - 344usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_xmm12"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_xmm12) - 360usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_xmm13"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_xmm13) - 376usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_xmm14"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_xmm14) - 392usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_xmm15"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_xmm15) - 408usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_rsrv4"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_rsrv4) - 424usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_reserved1"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_reserved1) - 520usize];
    ["Offset of field: __darwin_x86_avx_state64::__avx_reserved1"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __avx_reserved1) - 524usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_ymmh0"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_ymmh0) - 588usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_ymmh1"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_ymmh1) - 604usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_ymmh2"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_ymmh2) - 620usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_ymmh3"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_ymmh3) - 636usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_ymmh4"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_ymmh4) - 652usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_ymmh5"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_ymmh5) - 668usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_ymmh6"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_ymmh6) - 684usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_ymmh7"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_ymmh7) - 700usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_ymmh8"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_ymmh8) - 716usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_ymmh9"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_ymmh9) - 732usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_ymmh10"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_ymmh10) - 748usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_ymmh11"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_ymmh11) - 764usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_ymmh12"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_ymmh12) - 780usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_ymmh13"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_ymmh13) - 796usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_ymmh14"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_ymmh14) - 812usize];
    ["Offset of field: __darwin_x86_avx_state64::__fpu_ymmh15"]
        [::std::mem::offset_of!(__darwin_x86_avx_state64, __fpu_ymmh15) - 828usize];
};
impl Default for __darwin_x86_avx_state64 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_x86_avx512_state64 {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_xmm8: __darwin_xmm_reg,
    pub __fpu_xmm9: __darwin_xmm_reg,
    pub __fpu_xmm10: __darwin_xmm_reg,
    pub __fpu_xmm11: __darwin_xmm_reg,
    pub __fpu_xmm12: __darwin_xmm_reg,
    pub __fpu_xmm13: __darwin_xmm_reg,
    pub __fpu_xmm14: __darwin_xmm_reg,
    pub __fpu_xmm15: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 96usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
    pub __avx_reserved1: [::std::os::raw::c_char; 64usize],
    pub __fpu_ymmh0: __darwin_xmm_reg,
    pub __fpu_ymmh1: __darwin_xmm_reg,
    pub __fpu_ymmh2: __darwin_xmm_reg,
    pub __fpu_ymmh3: __darwin_xmm_reg,
    pub __fpu_ymmh4: __darwin_xmm_reg,
    pub __fpu_ymmh5: __darwin_xmm_reg,
    pub __fpu_ymmh6: __darwin_xmm_reg,
    pub __fpu_ymmh7: __darwin_xmm_reg,
    pub __fpu_ymmh8: __darwin_xmm_reg,
    pub __fpu_ymmh9: __darwin_xmm_reg,
    pub __fpu_ymmh10: __darwin_xmm_reg,
    pub __fpu_ymmh11: __darwin_xmm_reg,
    pub __fpu_ymmh12: __darwin_xmm_reg,
    pub __fpu_ymmh13: __darwin_xmm_reg,
    pub __fpu_ymmh14: __darwin_xmm_reg,
    pub __fpu_ymmh15: __darwin_xmm_reg,
    pub __fpu_k0: __darwin_opmask_reg,
    pub __fpu_k1: __darwin_opmask_reg,
    pub __fpu_k2: __darwin_opmask_reg,
    pub __fpu_k3: __darwin_opmask_reg,
    pub __fpu_k4: __darwin_opmask_reg,
    pub __fpu_k5: __darwin_opmask_reg,
    pub __fpu_k6: __darwin_opmask_reg,
    pub __fpu_k7: __darwin_opmask_reg,
    pub __fpu_zmmh0: __darwin_ymm_reg,
    pub __fpu_zmmh1: __darwin_ymm_reg,
    pub __fpu_zmmh2: __darwin_ymm_reg,
    pub __fpu_zmmh3: __darwin_ymm_reg,
    pub __fpu_zmmh4: __darwin_ymm_reg,
    pub __fpu_zmmh5: __darwin_ymm_reg,
    pub __fpu_zmmh6: __darwin_ymm_reg,
    pub __fpu_zmmh7: __darwin_ymm_reg,
    pub __fpu_zmmh8: __darwin_ymm_reg,
    pub __fpu_zmmh9: __darwin_ymm_reg,
    pub __fpu_zmmh10: __darwin_ymm_reg,
    pub __fpu_zmmh11: __darwin_ymm_reg,
    pub __fpu_zmmh12: __darwin_ymm_reg,
    pub __fpu_zmmh13: __darwin_ymm_reg,
    pub __fpu_zmmh14: __darwin_ymm_reg,
    pub __fpu_zmmh15: __darwin_ymm_reg,
    pub __fpu_zmm16: __darwin_zmm_reg,
    pub __fpu_zmm17: __darwin_zmm_reg,
    pub __fpu_zmm18: __darwin_zmm_reg,
    pub __fpu_zmm19: __darwin_zmm_reg,
    pub __fpu_zmm20: __darwin_zmm_reg,
    pub __fpu_zmm21: __darwin_zmm_reg,
    pub __fpu_zmm22: __darwin_zmm_reg,
    pub __fpu_zmm23: __darwin_zmm_reg,
    pub __fpu_zmm24: __darwin_zmm_reg,
    pub __fpu_zmm25: __darwin_zmm_reg,
    pub __fpu_zmm26: __darwin_zmm_reg,
    pub __fpu_zmm27: __darwin_zmm_reg,
    pub __fpu_zmm28: __darwin_zmm_reg,
    pub __fpu_zmm29: __darwin_zmm_reg,
    pub __fpu_zmm30: __darwin_zmm_reg,
    pub __fpu_zmm31: __darwin_zmm_reg,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_x86_avx512_state64"]
        [::std::mem::size_of::<__darwin_x86_avx512_state64>() - 2444usize];
    ["Alignment of __darwin_x86_avx512_state64"]
        [::std::mem::align_of::<__darwin_x86_avx512_state64>() - 4usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_reserved"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_reserved) - 0usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_fcw"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_fcw) - 8usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_fsw"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_fsw) - 10usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_ftw"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_ftw) - 12usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_rsrv1"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_rsrv1) - 13usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_fop"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_fop) - 14usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_ip"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_ip) - 16usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_cs"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_cs) - 20usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_rsrv2"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_rsrv2) - 22usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_dp"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_dp) - 24usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_ds"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_ds) - 28usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_rsrv3"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_rsrv3) - 30usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_mxcsr"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_mxcsr) - 32usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_mxcsrmask"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_mxcsrmask) - 36usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_stmm0"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_stmm0) - 40usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_stmm1"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_stmm1) - 56usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_stmm2"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_stmm2) - 72usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_stmm3"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_stmm3) - 88usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_stmm4"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_stmm4) - 104usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_stmm5"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_stmm5) - 120usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_stmm6"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_stmm6) - 136usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_stmm7"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_stmm7) - 152usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_xmm0"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_xmm0) - 168usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_xmm1"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_xmm1) - 184usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_xmm2"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_xmm2) - 200usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_xmm3"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_xmm3) - 216usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_xmm4"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_xmm4) - 232usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_xmm5"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_xmm5) - 248usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_xmm6"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_xmm6) - 264usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_xmm7"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_xmm7) - 280usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_xmm8"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_xmm8) - 296usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_xmm9"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_xmm9) - 312usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_xmm10"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_xmm10) - 328usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_xmm11"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_xmm11) - 344usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_xmm12"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_xmm12) - 360usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_xmm13"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_xmm13) - 376usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_xmm14"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_xmm14) - 392usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_xmm15"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_xmm15) - 408usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_rsrv4"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_rsrv4) - 424usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_reserved1"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_reserved1) - 520usize];
    ["Offset of field: __darwin_x86_avx512_state64::__avx_reserved1"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __avx_reserved1) - 524usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_ymmh0"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_ymmh0) - 588usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_ymmh1"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_ymmh1) - 604usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_ymmh2"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_ymmh2) - 620usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_ymmh3"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_ymmh3) - 636usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_ymmh4"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_ymmh4) - 652usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_ymmh5"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_ymmh5) - 668usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_ymmh6"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_ymmh6) - 684usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_ymmh7"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_ymmh7) - 700usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_ymmh8"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_ymmh8) - 716usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_ymmh9"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_ymmh9) - 732usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_ymmh10"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_ymmh10) - 748usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_ymmh11"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_ymmh11) - 764usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_ymmh12"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_ymmh12) - 780usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_ymmh13"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_ymmh13) - 796usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_ymmh14"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_ymmh14) - 812usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_ymmh15"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_ymmh15) - 828usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_k0"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_k0) - 844usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_k1"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_k1) - 852usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_k2"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_k2) - 860usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_k3"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_k3) - 868usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_k4"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_k4) - 876usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_k5"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_k5) - 884usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_k6"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_k6) - 892usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_k7"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_k7) - 900usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_zmmh0"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_zmmh0) - 908usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_zmmh1"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_zmmh1) - 940usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_zmmh2"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_zmmh2) - 972usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_zmmh3"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_zmmh3) - 1004usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_zmmh4"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_zmmh4) - 1036usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_zmmh5"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_zmmh5) - 1068usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_zmmh6"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_zmmh6) - 1100usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_zmmh7"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_zmmh7) - 1132usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_zmmh8"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_zmmh8) - 1164usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_zmmh9"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_zmmh9) - 1196usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_zmmh10"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_zmmh10) - 1228usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_zmmh11"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_zmmh11) - 1260usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_zmmh12"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_zmmh12) - 1292usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_zmmh13"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_zmmh13) - 1324usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_zmmh14"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_zmmh14) - 1356usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_zmmh15"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_zmmh15) - 1388usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_zmm16"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_zmm16) - 1420usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_zmm17"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_zmm17) - 1484usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_zmm18"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_zmm18) - 1548usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_zmm19"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_zmm19) - 1612usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_zmm20"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_zmm20) - 1676usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_zmm21"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_zmm21) - 1740usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_zmm22"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_zmm22) - 1804usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_zmm23"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_zmm23) - 1868usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_zmm24"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_zmm24) - 1932usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_zmm25"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_zmm25) - 1996usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_zmm26"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_zmm26) - 2060usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_zmm27"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_zmm27) - 2124usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_zmm28"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_zmm28) - 2188usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_zmm29"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_zmm29) - 2252usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_zmm30"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_zmm30) - 2316usize];
    ["Offset of field: __darwin_x86_avx512_state64::__fpu_zmm31"]
        [::std::mem::offset_of!(__darwin_x86_avx512_state64, __fpu_zmm31) - 2380usize];
};
impl Default for __darwin_x86_avx512_state64 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __darwin_x86_exception_state64 {
    pub __trapno: __uint16_t,
    pub __cpu: __uint16_t,
    pub __err: __uint32_t,
    pub __faultvaddr: __uint64_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_x86_exception_state64"]
        [::std::mem::size_of::<__darwin_x86_exception_state64>() - 16usize];
    ["Alignment of __darwin_x86_exception_state64"]
        [::std::mem::align_of::<__darwin_x86_exception_state64>() - 8usize];
    ["Offset of field: __darwin_x86_exception_state64::__trapno"]
        [::std::mem::offset_of!(__darwin_x86_exception_state64, __trapno) - 0usize];
    ["Offset of field: __darwin_x86_exception_state64::__cpu"]
        [::std::mem::offset_of!(__darwin_x86_exception_state64, __cpu) - 2usize];
    ["Offset of field: __darwin_x86_exception_state64::__err"]
        [::std::mem::offset_of!(__darwin_x86_exception_state64, __err) - 4usize];
    ["Offset of field: __darwin_x86_exception_state64::__faultvaddr"]
        [::std::mem::offset_of!(__darwin_x86_exception_state64, __faultvaddr) - 8usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __darwin_x86_debug_state64 {
    pub __dr0: __uint64_t,
    pub __dr1: __uint64_t,
    pub __dr2: __uint64_t,
    pub __dr3: __uint64_t,
    pub __dr4: __uint64_t,
    pub __dr5: __uint64_t,
    pub __dr6: __uint64_t,
    pub __dr7: __uint64_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_x86_debug_state64"]
        [::std::mem::size_of::<__darwin_x86_debug_state64>() - 64usize];
    ["Alignment of __darwin_x86_debug_state64"]
        [::std::mem::align_of::<__darwin_x86_debug_state64>() - 8usize];
    ["Offset of field: __darwin_x86_debug_state64::__dr0"]
        [::std::mem::offset_of!(__darwin_x86_debug_state64, __dr0) - 0usize];
    ["Offset of field: __darwin_x86_debug_state64::__dr1"]
        [::std::mem::offset_of!(__darwin_x86_debug_state64, __dr1) - 8usize];
    ["Offset of field: __darwin_x86_debug_state64::__dr2"]
        [::std::mem::offset_of!(__darwin_x86_debug_state64, __dr2) - 16usize];
    ["Offset of field: __darwin_x86_debug_state64::__dr3"]
        [::std::mem::offset_of!(__darwin_x86_debug_state64, __dr3) - 24usize];
    ["Offset of field: __darwin_x86_debug_state64::__dr4"]
        [::std::mem::offset_of!(__darwin_x86_debug_state64, __dr4) - 32usize];
    ["Offset of field: __darwin_x86_debug_state64::__dr5"]
        [::std::mem::offset_of!(__darwin_x86_debug_state64, __dr5) - 40usize];
    ["Offset of field: __darwin_x86_debug_state64::__dr6"]
        [::std::mem::offset_of!(__darwin_x86_debug_state64, __dr6) - 48usize];
    ["Offset of field: __darwin_x86_debug_state64::__dr7"]
        [::std::mem::offset_of!(__darwin_x86_debug_state64, __dr7) - 56usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __darwin_x86_cpmu_state64 {
    pub __ctrs: [__uint64_t; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_x86_cpmu_state64"]
        [::std::mem::size_of::<__darwin_x86_cpmu_state64>() - 128usize];
    ["Alignment of __darwin_x86_cpmu_state64"]
        [::std::mem::align_of::<__darwin_x86_cpmu_state64>() - 8usize];
    ["Offset of field: __darwin_x86_cpmu_state64::__ctrs"]
        [::std::mem::offset_of!(__darwin_x86_cpmu_state64, __ctrs) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext32 {
    pub __es: __darwin_i386_exception_state,
    pub __ss: __darwin_i386_thread_state,
    pub __fs: __darwin_i386_float_state,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_mcontext32"][::std::mem::size_of::<__darwin_mcontext32>() - 600usize];
    ["Alignment of __darwin_mcontext32"][::std::mem::align_of::<__darwin_mcontext32>() - 4usize];
    ["Offset of field: __darwin_mcontext32::__es"]
        [::std::mem::offset_of!(__darwin_mcontext32, __es) - 0usize];
    ["Offset of field: __darwin_mcontext32::__ss"]
        [::std::mem::offset_of!(__darwin_mcontext32, __ss) - 12usize];
    ["Offset of field: __darwin_mcontext32::__fs"]
        [::std::mem::offset_of!(__darwin_mcontext32, __fs) - 76usize];
};
impl Default for __darwin_mcontext32 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext_avx32 {
    pub __es: __darwin_i386_exception_state,
    pub __ss: __darwin_i386_thread_state,
    pub __fs: __darwin_i386_avx_state,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_mcontext_avx32"]
        [::std::mem::size_of::<__darwin_mcontext_avx32>() - 792usize];
    ["Alignment of __darwin_mcontext_avx32"]
        [::std::mem::align_of::<__darwin_mcontext_avx32>() - 4usize];
    ["Offset of field: __darwin_mcontext_avx32::__es"]
        [::std::mem::offset_of!(__darwin_mcontext_avx32, __es) - 0usize];
    ["Offset of field: __darwin_mcontext_avx32::__ss"]
        [::std::mem::offset_of!(__darwin_mcontext_avx32, __ss) - 12usize];
    ["Offset of field: __darwin_mcontext_avx32::__fs"]
        [::std::mem::offset_of!(__darwin_mcontext_avx32, __fs) - 76usize];
};
impl Default for __darwin_mcontext_avx32 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext_avx512_32 {
    pub __es: __darwin_i386_exception_state,
    pub __ss: __darwin_i386_thread_state,
    pub __fs: __darwin_i386_avx512_state,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_mcontext_avx512_32"]
        [::std::mem::size_of::<__darwin_mcontext_avx512_32>() - 1112usize];
    ["Alignment of __darwin_mcontext_avx512_32"]
        [::std::mem::align_of::<__darwin_mcontext_avx512_32>() - 4usize];
    ["Offset of field: __darwin_mcontext_avx512_32::__es"]
        [::std::mem::offset_of!(__darwin_mcontext_avx512_32, __es) - 0usize];
    ["Offset of field: __darwin_mcontext_avx512_32::__ss"]
        [::std::mem::offset_of!(__darwin_mcontext_avx512_32, __ss) - 12usize];
    ["Offset of field: __darwin_mcontext_avx512_32::__fs"]
        [::std::mem::offset_of!(__darwin_mcontext_avx512_32, __fs) - 76usize];
};
impl Default for __darwin_mcontext_avx512_32 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext64 {
    pub __es: __darwin_x86_exception_state64,
    pub __ss: __darwin_x86_thread_state64,
    pub __fs: __darwin_x86_float_state64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_mcontext64"][::std::mem::size_of::<__darwin_mcontext64>() - 712usize];
    ["Alignment of __darwin_mcontext64"][::std::mem::align_of::<__darwin_mcontext64>() - 8usize];
    ["Offset of field: __darwin_mcontext64::__es"]
        [::std::mem::offset_of!(__darwin_mcontext64, __es) - 0usize];
    ["Offset of field: __darwin_mcontext64::__ss"]
        [::std::mem::offset_of!(__darwin_mcontext64, __ss) - 16usize];
    ["Offset of field: __darwin_mcontext64::__fs"]
        [::std::mem::offset_of!(__darwin_mcontext64, __fs) - 184usize];
};
impl Default for __darwin_mcontext64 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext64_full {
    pub __es: __darwin_x86_exception_state64,
    pub __ss: __darwin_x86_thread_full_state64,
    pub __fs: __darwin_x86_float_state64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_mcontext64_full"]
        [::std::mem::size_of::<__darwin_mcontext64_full>() - 744usize];
    ["Alignment of __darwin_mcontext64_full"]
        [::std::mem::align_of::<__darwin_mcontext64_full>() - 8usize];
    ["Offset of field: __darwin_mcontext64_full::__es"]
        [::std::mem::offset_of!(__darwin_mcontext64_full, __es) - 0usize];
    ["Offset of field: __darwin_mcontext64_full::__ss"]
        [::std::mem::offset_of!(__darwin_mcontext64_full, __ss) - 16usize];
    ["Offset of field: __darwin_mcontext64_full::__fs"]
        [::std::mem::offset_of!(__darwin_mcontext64_full, __fs) - 216usize];
};
impl Default for __darwin_mcontext64_full {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext_avx64 {
    pub __es: __darwin_x86_exception_state64,
    pub __ss: __darwin_x86_thread_state64,
    pub __fs: __darwin_x86_avx_state64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_mcontext_avx64"]
        [::std::mem::size_of::<__darwin_mcontext_avx64>() - 1032usize];
    ["Alignment of __darwin_mcontext_avx64"]
        [::std::mem::align_of::<__darwin_mcontext_avx64>() - 8usize];
    ["Offset of field: __darwin_mcontext_avx64::__es"]
        [::std::mem::offset_of!(__darwin_mcontext_avx64, __es) - 0usize];
    ["Offset of field: __darwin_mcontext_avx64::__ss"]
        [::std::mem::offset_of!(__darwin_mcontext_avx64, __ss) - 16usize];
    ["Offset of field: __darwin_mcontext_avx64::__fs"]
        [::std::mem::offset_of!(__darwin_mcontext_avx64, __fs) - 184usize];
};
impl Default for __darwin_mcontext_avx64 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext_avx64_full {
    pub __es: __darwin_x86_exception_state64,
    pub __ss: __darwin_x86_thread_full_state64,
    pub __fs: __darwin_x86_avx_state64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_mcontext_avx64_full"]
        [::std::mem::size_of::<__darwin_mcontext_avx64_full>() - 1064usize];
    ["Alignment of __darwin_mcontext_avx64_full"]
        [::std::mem::align_of::<__darwin_mcontext_avx64_full>() - 8usize];
    ["Offset of field: __darwin_mcontext_avx64_full::__es"]
        [::std::mem::offset_of!(__darwin_mcontext_avx64_full, __es) - 0usize];
    ["Offset of field: __darwin_mcontext_avx64_full::__ss"]
        [::std::mem::offset_of!(__darwin_mcontext_avx64_full, __ss) - 16usize];
    ["Offset of field: __darwin_mcontext_avx64_full::__fs"]
        [::std::mem::offset_of!(__darwin_mcontext_avx64_full, __fs) - 216usize];
};
impl Default for __darwin_mcontext_avx64_full {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext_avx512_64 {
    pub __es: __darwin_x86_exception_state64,
    pub __ss: __darwin_x86_thread_state64,
    pub __fs: __darwin_x86_avx512_state64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_mcontext_avx512_64"]
        [::std::mem::size_of::<__darwin_mcontext_avx512_64>() - 2632usize];
    ["Alignment of __darwin_mcontext_avx512_64"]
        [::std::mem::align_of::<__darwin_mcontext_avx512_64>() - 8usize];
    ["Offset of field: __darwin_mcontext_avx512_64::__es"]
        [::std::mem::offset_of!(__darwin_mcontext_avx512_64, __es) - 0usize];
    ["Offset of field: __darwin_mcontext_avx512_64::__ss"]
        [::std::mem::offset_of!(__darwin_mcontext_avx512_64, __ss) - 16usize];
    ["Offset of field: __darwin_mcontext_avx512_64::__fs"]
        [::std::mem::offset_of!(__darwin_mcontext_avx512_64, __fs) - 184usize];
};
impl Default for __darwin_mcontext_avx512_64 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext_avx512_64_full {
    pub __es: __darwin_x86_exception_state64,
    pub __ss: __darwin_x86_thread_full_state64,
    pub __fs: __darwin_x86_avx512_state64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_mcontext_avx512_64_full"]
        [::std::mem::size_of::<__darwin_mcontext_avx512_64_full>() - 2664usize];
    ["Alignment of __darwin_mcontext_avx512_64_full"]
        [::std::mem::align_of::<__darwin_mcontext_avx512_64_full>() - 8usize];
    ["Offset of field: __darwin_mcontext_avx512_64_full::__es"]
        [::std::mem::offset_of!(__darwin_mcontext_avx512_64_full, __es) - 0usize];
    ["Offset of field: __darwin_mcontext_avx512_64_full::__ss"]
        [::std::mem::offset_of!(__darwin_mcontext_avx512_64_full, __ss) - 16usize];
    ["Offset of field: __darwin_mcontext_avx512_64_full::__fs"]
        [::std::mem::offset_of!(__darwin_mcontext_avx512_64_full, __fs) - 216usize];
};
impl Default for __darwin_mcontext_avx512_64_full {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mcontext_t = *mut __darwin_mcontext64;
pub type pthread_attr_t = __darwin_pthread_attr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_sigaltstack {
    pub ss_sp: *mut ::std::os::raw::c_void,
    pub ss_size: __darwin_size_t,
    pub ss_flags: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_sigaltstack"][::std::mem::size_of::<__darwin_sigaltstack>() - 24usize];
    ["Alignment of __darwin_sigaltstack"][::std::mem::align_of::<__darwin_sigaltstack>() - 8usize];
    ["Offset of field: __darwin_sigaltstack::ss_sp"]
        [::std::mem::offset_of!(__darwin_sigaltstack, ss_sp) - 0usize];
    ["Offset of field: __darwin_sigaltstack::ss_size"]
        [::std::mem::offset_of!(__darwin_sigaltstack, ss_size) - 8usize];
    ["Offset of field: __darwin_sigaltstack::ss_flags"]
        [::std::mem::offset_of!(__darwin_sigaltstack, ss_flags) - 16usize];
};
impl Default for __darwin_sigaltstack {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type stack_t = __darwin_sigaltstack;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_ucontext {
    pub uc_onstack: ::std::os::raw::c_int,
    pub uc_sigmask: __darwin_sigset_t,
    pub uc_stack: __darwin_sigaltstack,
    pub uc_link: *mut __darwin_ucontext,
    pub uc_mcsize: __darwin_size_t,
    pub uc_mcontext: *mut __darwin_mcontext64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_ucontext"][::std::mem::size_of::<__darwin_ucontext>() - 56usize];
    ["Alignment of __darwin_ucontext"][::std::mem::align_of::<__darwin_ucontext>() - 8usize];
    ["Offset of field: __darwin_ucontext::uc_onstack"]
        [::std::mem::offset_of!(__darwin_ucontext, uc_onstack) - 0usize];
    ["Offset of field: __darwin_ucontext::uc_sigmask"]
        [::std::mem::offset_of!(__darwin_ucontext, uc_sigmask) - 4usize];
    ["Offset of field: __darwin_ucontext::uc_stack"]
        [::std::mem::offset_of!(__darwin_ucontext, uc_stack) - 8usize];
    ["Offset of field: __darwin_ucontext::uc_link"]
        [::std::mem::offset_of!(__darwin_ucontext, uc_link) - 32usize];
    ["Offset of field: __darwin_ucontext::uc_mcsize"]
        [::std::mem::offset_of!(__darwin_ucontext, uc_mcsize) - 40usize];
    ["Offset of field: __darwin_ucontext::uc_mcontext"]
        [::std::mem::offset_of!(__darwin_ucontext, uc_mcontext) - 48usize];
};
impl Default for __darwin_ucontext {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type ucontext_t = __darwin_ucontext;
pub type sigset_t = __darwin_sigset_t;
pub type uid_t = __darwin_uid_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub union sigval {
    pub sival_int: ::std::os::raw::c_int,
    pub sival_ptr: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sigval"][::std::mem::size_of::<sigval>() - 8usize];
    ["Alignment of sigval"][::std::mem::align_of::<sigval>() - 8usize];
    ["Offset of field: sigval::sival_int"][::std::mem::offset_of!(sigval, sival_int) - 0usize];
    ["Offset of field: sigval::sival_ptr"][::std::mem::offset_of!(sigval, sival_ptr) - 0usize];
};
impl Default for sigval {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigevent {
    pub sigev_notify: ::std::os::raw::c_int,
    pub sigev_signo: ::std::os::raw::c_int,
    pub sigev_value: sigval,
    pub sigev_notify_function: ::std::option::Option<unsafe extern "C" fn(arg1: sigval)>,
    pub sigev_notify_attributes: *mut pthread_attr_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sigevent"][::std::mem::size_of::<sigevent>() - 32usize];
    ["Alignment of sigevent"][::std::mem::align_of::<sigevent>() - 8usize];
    ["Offset of field: sigevent::sigev_notify"]
        [::std::mem::offset_of!(sigevent, sigev_notify) - 0usize];
    ["Offset of field: sigevent::sigev_signo"]
        [::std::mem::offset_of!(sigevent, sigev_signo) - 4usize];
    ["Offset of field: sigevent::sigev_value"]
        [::std::mem::offset_of!(sigevent, sigev_value) - 8usize];
    ["Offset of field: sigevent::sigev_notify_function"]
        [::std::mem::offset_of!(sigevent, sigev_notify_function) - 16usize];
    ["Offset of field: sigevent::sigev_notify_attributes"]
        [::std::mem::offset_of!(sigevent, sigev_notify_attributes) - 24usize];
};
impl Default for sigevent {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __siginfo {
    pub si_signo: ::std::os::raw::c_int,
    pub si_errno: ::std::os::raw::c_int,
    pub si_code: ::std::os::raw::c_int,
    pub si_pid: pid_t,
    pub si_uid: uid_t,
    pub si_status: ::std::os::raw::c_int,
    pub si_addr: *mut ::std::os::raw::c_void,
    pub si_value: sigval,
    pub si_band: ::std::os::raw::c_long,
    pub __pad: [::std::os::raw::c_ulong; 7usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __siginfo"][::std::mem::size_of::<__siginfo>() - 104usize];
    ["Alignment of __siginfo"][::std::mem::align_of::<__siginfo>() - 8usize];
    ["Offset of field: __siginfo::si_signo"][::std::mem::offset_of!(__siginfo, si_signo) - 0usize];
    ["Offset of field: __siginfo::si_errno"][::std::mem::offset_of!(__siginfo, si_errno) - 4usize];
    ["Offset of field: __siginfo::si_code"][::std::mem::offset_of!(__siginfo, si_code) - 8usize];
    ["Offset of field: __siginfo::si_pid"][::std::mem::offset_of!(__siginfo, si_pid) - 12usize];
    ["Offset of field: __siginfo::si_uid"][::std::mem::offset_of!(__siginfo, si_uid) - 16usize];
    ["Offset of field: __siginfo::si_status"]
        [::std::mem::offset_of!(__siginfo, si_status) - 20usize];
    ["Offset of field: __siginfo::si_addr"][::std::mem::offset_of!(__siginfo, si_addr) - 24usize];
    ["Offset of field: __siginfo::si_value"][::std::mem::offset_of!(__siginfo, si_value) - 32usize];
    ["Offset of field: __siginfo::si_band"][::std::mem::offset_of!(__siginfo, si_band) - 40usize];
    ["Offset of field: __siginfo::__pad"][::std::mem::offset_of!(__siginfo, __pad) - 48usize];
};
impl Default for __siginfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type siginfo_t = __siginfo;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __sigaction_u {
    pub __sa_handler: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    pub __sa_sigaction: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: *mut __siginfo,
            arg3: *mut ::std::os::raw::c_void,
        ),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __sigaction_u"][::std::mem::size_of::<__sigaction_u>() - 8usize];
    ["Alignment of __sigaction_u"][::std::mem::align_of::<__sigaction_u>() - 8usize];
    ["Offset of field: __sigaction_u::__sa_handler"]
        [::std::mem::offset_of!(__sigaction_u, __sa_handler) - 0usize];
    ["Offset of field: __sigaction_u::__sa_sigaction"]
        [::std::mem::offset_of!(__sigaction_u, __sa_sigaction) - 0usize];
};
impl Default for __sigaction_u {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __sigaction {
    pub __sigaction_u: __sigaction_u,
    pub sa_tramp: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: ::std::os::raw::c_int,
            arg3: ::std::os::raw::c_int,
            arg4: *mut siginfo_t,
            arg5: *mut ::std::os::raw::c_void,
        ),
    >,
    pub sa_mask: sigset_t,
    pub sa_flags: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __sigaction"][::std::mem::size_of::<__sigaction>() - 24usize];
    ["Alignment of __sigaction"][::std::mem::align_of::<__sigaction>() - 8usize];
    ["Offset of field: __sigaction::__sigaction_u"]
        [::std::mem::offset_of!(__sigaction, __sigaction_u) - 0usize];
    ["Offset of field: __sigaction::sa_tramp"]
        [::std::mem::offset_of!(__sigaction, sa_tramp) - 8usize];
    ["Offset of field: __sigaction::sa_mask"]
        [::std::mem::offset_of!(__sigaction, sa_mask) - 16usize];
    ["Offset of field: __sigaction::sa_flags"]
        [::std::mem::offset_of!(__sigaction, sa_flags) - 20usize];
};
impl Default for __sigaction {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigaction {
    pub __sigaction_u: __sigaction_u,
    pub sa_mask: sigset_t,
    pub sa_flags: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sigaction"][::std::mem::size_of::<sigaction>() - 16usize];
    ["Alignment of sigaction"][::std::mem::align_of::<sigaction>() - 8usize];
    ["Offset of field: sigaction::__sigaction_u"]
        [::std::mem::offset_of!(sigaction, __sigaction_u) - 0usize];
    ["Offset of field: sigaction::sa_mask"][::std::mem::offset_of!(sigaction, sa_mask) - 8usize];
    ["Offset of field: sigaction::sa_flags"][::std::mem::offset_of!(sigaction, sa_flags) - 12usize];
};
impl Default for sigaction {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type sig_t = ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct sigvec {
    pub sv_handler: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    pub sv_mask: ::std::os::raw::c_int,
    pub sv_flags: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sigvec"][::std::mem::size_of::<sigvec>() - 16usize];
    ["Alignment of sigvec"][::std::mem::align_of::<sigvec>() - 8usize];
    ["Offset of field: sigvec::sv_handler"][::std::mem::offset_of!(sigvec, sv_handler) - 0usize];
    ["Offset of field: sigvec::sv_mask"][::std::mem::offset_of!(sigvec, sv_mask) - 8usize];
    ["Offset of field: sigvec::sv_flags"][::std::mem::offset_of!(sigvec, sv_flags) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigstack {
    pub ss_sp: *mut ::std::os::raw::c_char,
    pub ss_onstack: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sigstack"][::std::mem::size_of::<sigstack>() - 16usize];
    ["Alignment of sigstack"][::std::mem::align_of::<sigstack>() - 8usize];
    ["Offset of field: sigstack::ss_sp"][::std::mem::offset_of!(sigstack, ss_sp) - 0usize];
    ["Offset of field: sigstack::ss_onstack"]
        [::std::mem::offset_of!(sigstack, ss_onstack) - 8usize];
};
impl Default for sigstack {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
unsafe extern "C" {
    pub fn signal(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
        ),
    >;
}
pub type int_least8_t = i8;
pub type int_least16_t = i16;
pub type int_least32_t = i32;
pub type int_least64_t = i64;
pub type uint_least8_t = u8;
pub type uint_least16_t = u16;
pub type uint_least32_t = u32;
pub type uint_least64_t = u64;
pub type int_fast8_t = i8;
pub type int_fast16_t = i16;
pub type int_fast32_t = i32;
pub type int_fast64_t = i64;
pub type uint_fast8_t = u8;
pub type uint_fast16_t = u16;
pub type uint_fast32_t = u32;
pub type uint_fast64_t = u64;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __darwin_time_t,
    pub tv_usec: __darwin_suseconds_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timeval"][::std::mem::size_of::<timeval>() - 16usize];
    ["Alignment of timeval"][::std::mem::align_of::<timeval>() - 8usize];
    ["Offset of field: timeval::tv_sec"][::std::mem::offset_of!(timeval, tv_sec) - 0usize];
    ["Offset of field: timeval::tv_usec"][::std::mem::offset_of!(timeval, tv_usec) - 8usize];
};
pub type rlim_t = __uint64_t;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rusage {
    pub ru_utime: timeval,
    pub ru_stime: timeval,
    pub ru_maxrss: ::std::os::raw::c_long,
    pub ru_ixrss: ::std::os::raw::c_long,
    pub ru_idrss: ::std::os::raw::c_long,
    pub ru_isrss: ::std::os::raw::c_long,
    pub ru_minflt: ::std::os::raw::c_long,
    pub ru_majflt: ::std::os::raw::c_long,
    pub ru_nswap: ::std::os::raw::c_long,
    pub ru_inblock: ::std::os::raw::c_long,
    pub ru_oublock: ::std::os::raw::c_long,
    pub ru_msgsnd: ::std::os::raw::c_long,
    pub ru_msgrcv: ::std::os::raw::c_long,
    pub ru_nsignals: ::std::os::raw::c_long,
    pub ru_nvcsw: ::std::os::raw::c_long,
    pub ru_nivcsw: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rusage"][::std::mem::size_of::<rusage>() - 144usize];
    ["Alignment of rusage"][::std::mem::align_of::<rusage>() - 8usize];
    ["Offset of field: rusage::ru_utime"][::std::mem::offset_of!(rusage, ru_utime) - 0usize];
    ["Offset of field: rusage::ru_stime"][::std::mem::offset_of!(rusage, ru_stime) - 16usize];
    ["Offset of field: rusage::ru_maxrss"][::std::mem::offset_of!(rusage, ru_maxrss) - 32usize];
    ["Offset of field: rusage::ru_ixrss"][::std::mem::offset_of!(rusage, ru_ixrss) - 40usize];
    ["Offset of field: rusage::ru_idrss"][::std::mem::offset_of!(rusage, ru_idrss) - 48usize];
    ["Offset of field: rusage::ru_isrss"][::std::mem::offset_of!(rusage, ru_isrss) - 56usize];
    ["Offset of field: rusage::ru_minflt"][::std::mem::offset_of!(rusage, ru_minflt) - 64usize];
    ["Offset of field: rusage::ru_majflt"][::std::mem::offset_of!(rusage, ru_majflt) - 72usize];
    ["Offset of field: rusage::ru_nswap"][::std::mem::offset_of!(rusage, ru_nswap) - 80usize];
    ["Offset of field: rusage::ru_inblock"][::std::mem::offset_of!(rusage, ru_inblock) - 88usize];
    ["Offset of field: rusage::ru_oublock"][::std::mem::offset_of!(rusage, ru_oublock) - 96usize];
    ["Offset of field: rusage::ru_msgsnd"][::std::mem::offset_of!(rusage, ru_msgsnd) - 104usize];
    ["Offset of field: rusage::ru_msgrcv"][::std::mem::offset_of!(rusage, ru_msgrcv) - 112usize];
    ["Offset of field: rusage::ru_nsignals"]
        [::std::mem::offset_of!(rusage, ru_nsignals) - 120usize];
    ["Offset of field: rusage::ru_nvcsw"][::std::mem::offset_of!(rusage, ru_nvcsw) - 128usize];
    ["Offset of field: rusage::ru_nivcsw"][::std::mem::offset_of!(rusage, ru_nivcsw) - 136usize];
};
pub type rusage_info_t = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rusage_info_v0 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rusage_info_v0"][::std::mem::size_of::<rusage_info_v0>() - 96usize];
    ["Alignment of rusage_info_v0"][::std::mem::align_of::<rusage_info_v0>() - 8usize];
    ["Offset of field: rusage_info_v0::ri_uuid"]
        [::std::mem::offset_of!(rusage_info_v0, ri_uuid) - 0usize];
    ["Offset of field: rusage_info_v0::ri_user_time"]
        [::std::mem::offset_of!(rusage_info_v0, ri_user_time) - 16usize];
    ["Offset of field: rusage_info_v0::ri_system_time"]
        [::std::mem::offset_of!(rusage_info_v0, ri_system_time) - 24usize];
    ["Offset of field: rusage_info_v0::ri_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v0, ri_pkg_idle_wkups) - 32usize];
    ["Offset of field: rusage_info_v0::ri_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v0, ri_interrupt_wkups) - 40usize];
    ["Offset of field: rusage_info_v0::ri_pageins"]
        [::std::mem::offset_of!(rusage_info_v0, ri_pageins) - 48usize];
    ["Offset of field: rusage_info_v0::ri_wired_size"]
        [::std::mem::offset_of!(rusage_info_v0, ri_wired_size) - 56usize];
    ["Offset of field: rusage_info_v0::ri_resident_size"]
        [::std::mem::offset_of!(rusage_info_v0, ri_resident_size) - 64usize];
    ["Offset of field: rusage_info_v0::ri_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v0, ri_phys_footprint) - 72usize];
    ["Offset of field: rusage_info_v0::ri_proc_start_abstime"]
        [::std::mem::offset_of!(rusage_info_v0, ri_proc_start_abstime) - 80usize];
    ["Offset of field: rusage_info_v0::ri_proc_exit_abstime"]
        [::std::mem::offset_of!(rusage_info_v0, ri_proc_exit_abstime) - 88usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rusage_info_v1 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rusage_info_v1"][::std::mem::size_of::<rusage_info_v1>() - 144usize];
    ["Alignment of rusage_info_v1"][::std::mem::align_of::<rusage_info_v1>() - 8usize];
    ["Offset of field: rusage_info_v1::ri_uuid"]
        [::std::mem::offset_of!(rusage_info_v1, ri_uuid) - 0usize];
    ["Offset of field: rusage_info_v1::ri_user_time"]
        [::std::mem::offset_of!(rusage_info_v1, ri_user_time) - 16usize];
    ["Offset of field: rusage_info_v1::ri_system_time"]
        [::std::mem::offset_of!(rusage_info_v1, ri_system_time) - 24usize];
    ["Offset of field: rusage_info_v1::ri_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v1, ri_pkg_idle_wkups) - 32usize];
    ["Offset of field: rusage_info_v1::ri_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v1, ri_interrupt_wkups) - 40usize];
    ["Offset of field: rusage_info_v1::ri_pageins"]
        [::std::mem::offset_of!(rusage_info_v1, ri_pageins) - 48usize];
    ["Offset of field: rusage_info_v1::ri_wired_size"]
        [::std::mem::offset_of!(rusage_info_v1, ri_wired_size) - 56usize];
    ["Offset of field: rusage_info_v1::ri_resident_size"]
        [::std::mem::offset_of!(rusage_info_v1, ri_resident_size) - 64usize];
    ["Offset of field: rusage_info_v1::ri_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v1, ri_phys_footprint) - 72usize];
    ["Offset of field: rusage_info_v1::ri_proc_start_abstime"]
        [::std::mem::offset_of!(rusage_info_v1, ri_proc_start_abstime) - 80usize];
    ["Offset of field: rusage_info_v1::ri_proc_exit_abstime"]
        [::std::mem::offset_of!(rusage_info_v1, ri_proc_exit_abstime) - 88usize];
    ["Offset of field: rusage_info_v1::ri_child_user_time"]
        [::std::mem::offset_of!(rusage_info_v1, ri_child_user_time) - 96usize];
    ["Offset of field: rusage_info_v1::ri_child_system_time"]
        [::std::mem::offset_of!(rusage_info_v1, ri_child_system_time) - 104usize];
    ["Offset of field: rusage_info_v1::ri_child_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v1, ri_child_pkg_idle_wkups) - 112usize];
    ["Offset of field: rusage_info_v1::ri_child_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v1, ri_child_interrupt_wkups) - 120usize];
    ["Offset of field: rusage_info_v1::ri_child_pageins"]
        [::std::mem::offset_of!(rusage_info_v1, ri_child_pageins) - 128usize];
    ["Offset of field: rusage_info_v1::ri_child_elapsed_abstime"]
        [::std::mem::offset_of!(rusage_info_v1, ri_child_elapsed_abstime) - 136usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rusage_info_v2 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rusage_info_v2"][::std::mem::size_of::<rusage_info_v2>() - 160usize];
    ["Alignment of rusage_info_v2"][::std::mem::align_of::<rusage_info_v2>() - 8usize];
    ["Offset of field: rusage_info_v2::ri_uuid"]
        [::std::mem::offset_of!(rusage_info_v2, ri_uuid) - 0usize];
    ["Offset of field: rusage_info_v2::ri_user_time"]
        [::std::mem::offset_of!(rusage_info_v2, ri_user_time) - 16usize];
    ["Offset of field: rusage_info_v2::ri_system_time"]
        [::std::mem::offset_of!(rusage_info_v2, ri_system_time) - 24usize];
    ["Offset of field: rusage_info_v2::ri_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v2, ri_pkg_idle_wkups) - 32usize];
    ["Offset of field: rusage_info_v2::ri_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v2, ri_interrupt_wkups) - 40usize];
    ["Offset of field: rusage_info_v2::ri_pageins"]
        [::std::mem::offset_of!(rusage_info_v2, ri_pageins) - 48usize];
    ["Offset of field: rusage_info_v2::ri_wired_size"]
        [::std::mem::offset_of!(rusage_info_v2, ri_wired_size) - 56usize];
    ["Offset of field: rusage_info_v2::ri_resident_size"]
        [::std::mem::offset_of!(rusage_info_v2, ri_resident_size) - 64usize];
    ["Offset of field: rusage_info_v2::ri_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v2, ri_phys_footprint) - 72usize];
    ["Offset of field: rusage_info_v2::ri_proc_start_abstime"]
        [::std::mem::offset_of!(rusage_info_v2, ri_proc_start_abstime) - 80usize];
    ["Offset of field: rusage_info_v2::ri_proc_exit_abstime"]
        [::std::mem::offset_of!(rusage_info_v2, ri_proc_exit_abstime) - 88usize];
    ["Offset of field: rusage_info_v2::ri_child_user_time"]
        [::std::mem::offset_of!(rusage_info_v2, ri_child_user_time) - 96usize];
    ["Offset of field: rusage_info_v2::ri_child_system_time"]
        [::std::mem::offset_of!(rusage_info_v2, ri_child_system_time) - 104usize];
    ["Offset of field: rusage_info_v2::ri_child_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v2, ri_child_pkg_idle_wkups) - 112usize];
    ["Offset of field: rusage_info_v2::ri_child_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v2, ri_child_interrupt_wkups) - 120usize];
    ["Offset of field: rusage_info_v2::ri_child_pageins"]
        [::std::mem::offset_of!(rusage_info_v2, ri_child_pageins) - 128usize];
    ["Offset of field: rusage_info_v2::ri_child_elapsed_abstime"]
        [::std::mem::offset_of!(rusage_info_v2, ri_child_elapsed_abstime) - 136usize];
    ["Offset of field: rusage_info_v2::ri_diskio_bytesread"]
        [::std::mem::offset_of!(rusage_info_v2, ri_diskio_bytesread) - 144usize];
    ["Offset of field: rusage_info_v2::ri_diskio_byteswritten"]
        [::std::mem::offset_of!(rusage_info_v2, ri_diskio_byteswritten) - 152usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rusage_info_v3 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
    pub ri_cpu_time_qos_default: u64,
    pub ri_cpu_time_qos_maintenance: u64,
    pub ri_cpu_time_qos_background: u64,
    pub ri_cpu_time_qos_utility: u64,
    pub ri_cpu_time_qos_legacy: u64,
    pub ri_cpu_time_qos_user_initiated: u64,
    pub ri_cpu_time_qos_user_interactive: u64,
    pub ri_billed_system_time: u64,
    pub ri_serviced_system_time: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rusage_info_v3"][::std::mem::size_of::<rusage_info_v3>() - 232usize];
    ["Alignment of rusage_info_v3"][::std::mem::align_of::<rusage_info_v3>() - 8usize];
    ["Offset of field: rusage_info_v3::ri_uuid"]
        [::std::mem::offset_of!(rusage_info_v3, ri_uuid) - 0usize];
    ["Offset of field: rusage_info_v3::ri_user_time"]
        [::std::mem::offset_of!(rusage_info_v3, ri_user_time) - 16usize];
    ["Offset of field: rusage_info_v3::ri_system_time"]
        [::std::mem::offset_of!(rusage_info_v3, ri_system_time) - 24usize];
    ["Offset of field: rusage_info_v3::ri_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v3, ri_pkg_idle_wkups) - 32usize];
    ["Offset of field: rusage_info_v3::ri_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v3, ri_interrupt_wkups) - 40usize];
    ["Offset of field: rusage_info_v3::ri_pageins"]
        [::std::mem::offset_of!(rusage_info_v3, ri_pageins) - 48usize];
    ["Offset of field: rusage_info_v3::ri_wired_size"]
        [::std::mem::offset_of!(rusage_info_v3, ri_wired_size) - 56usize];
    ["Offset of field: rusage_info_v3::ri_resident_size"]
        [::std::mem::offset_of!(rusage_info_v3, ri_resident_size) - 64usize];
    ["Offset of field: rusage_info_v3::ri_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v3, ri_phys_footprint) - 72usize];
    ["Offset of field: rusage_info_v3::ri_proc_start_abstime"]
        [::std::mem::offset_of!(rusage_info_v3, ri_proc_start_abstime) - 80usize];
    ["Offset of field: rusage_info_v3::ri_proc_exit_abstime"]
        [::std::mem::offset_of!(rusage_info_v3, ri_proc_exit_abstime) - 88usize];
    ["Offset of field: rusage_info_v3::ri_child_user_time"]
        [::std::mem::offset_of!(rusage_info_v3, ri_child_user_time) - 96usize];
    ["Offset of field: rusage_info_v3::ri_child_system_time"]
        [::std::mem::offset_of!(rusage_info_v3, ri_child_system_time) - 104usize];
    ["Offset of field: rusage_info_v3::ri_child_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v3, ri_child_pkg_idle_wkups) - 112usize];
    ["Offset of field: rusage_info_v3::ri_child_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v3, ri_child_interrupt_wkups) - 120usize];
    ["Offset of field: rusage_info_v3::ri_child_pageins"]
        [::std::mem::offset_of!(rusage_info_v3, ri_child_pageins) - 128usize];
    ["Offset of field: rusage_info_v3::ri_child_elapsed_abstime"]
        [::std::mem::offset_of!(rusage_info_v3, ri_child_elapsed_abstime) - 136usize];
    ["Offset of field: rusage_info_v3::ri_diskio_bytesread"]
        [::std::mem::offset_of!(rusage_info_v3, ri_diskio_bytesread) - 144usize];
    ["Offset of field: rusage_info_v3::ri_diskio_byteswritten"]
        [::std::mem::offset_of!(rusage_info_v3, ri_diskio_byteswritten) - 152usize];
    ["Offset of field: rusage_info_v3::ri_cpu_time_qos_default"]
        [::std::mem::offset_of!(rusage_info_v3, ri_cpu_time_qos_default) - 160usize];
    ["Offset of field: rusage_info_v3::ri_cpu_time_qos_maintenance"]
        [::std::mem::offset_of!(rusage_info_v3, ri_cpu_time_qos_maintenance) - 168usize];
    ["Offset of field: rusage_info_v3::ri_cpu_time_qos_background"]
        [::std::mem::offset_of!(rusage_info_v3, ri_cpu_time_qos_background) - 176usize];
    ["Offset of field: rusage_info_v3::ri_cpu_time_qos_utility"]
        [::std::mem::offset_of!(rusage_info_v3, ri_cpu_time_qos_utility) - 184usize];
    ["Offset of field: rusage_info_v3::ri_cpu_time_qos_legacy"]
        [::std::mem::offset_of!(rusage_info_v3, ri_cpu_time_qos_legacy) - 192usize];
    ["Offset of field: rusage_info_v3::ri_cpu_time_qos_user_initiated"]
        [::std::mem::offset_of!(rusage_info_v3, ri_cpu_time_qos_user_initiated) - 200usize];
    ["Offset of field: rusage_info_v3::ri_cpu_time_qos_user_interactive"]
        [::std::mem::offset_of!(rusage_info_v3, ri_cpu_time_qos_user_interactive) - 208usize];
    ["Offset of field: rusage_info_v3::ri_billed_system_time"]
        [::std::mem::offset_of!(rusage_info_v3, ri_billed_system_time) - 216usize];
    ["Offset of field: rusage_info_v3::ri_serviced_system_time"]
        [::std::mem::offset_of!(rusage_info_v3, ri_serviced_system_time) - 224usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rusage_info_v4 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
    pub ri_cpu_time_qos_default: u64,
    pub ri_cpu_time_qos_maintenance: u64,
    pub ri_cpu_time_qos_background: u64,
    pub ri_cpu_time_qos_utility: u64,
    pub ri_cpu_time_qos_legacy: u64,
    pub ri_cpu_time_qos_user_initiated: u64,
    pub ri_cpu_time_qos_user_interactive: u64,
    pub ri_billed_system_time: u64,
    pub ri_serviced_system_time: u64,
    pub ri_logical_writes: u64,
    pub ri_lifetime_max_phys_footprint: u64,
    pub ri_instructions: u64,
    pub ri_cycles: u64,
    pub ri_billed_energy: u64,
    pub ri_serviced_energy: u64,
    pub ri_interval_max_phys_footprint: u64,
    pub ri_runnable_time: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rusage_info_v4"][::std::mem::size_of::<rusage_info_v4>() - 296usize];
    ["Alignment of rusage_info_v4"][::std::mem::align_of::<rusage_info_v4>() - 8usize];
    ["Offset of field: rusage_info_v4::ri_uuid"]
        [::std::mem::offset_of!(rusage_info_v4, ri_uuid) - 0usize];
    ["Offset of field: rusage_info_v4::ri_user_time"]
        [::std::mem::offset_of!(rusage_info_v4, ri_user_time) - 16usize];
    ["Offset of field: rusage_info_v4::ri_system_time"]
        [::std::mem::offset_of!(rusage_info_v4, ri_system_time) - 24usize];
    ["Offset of field: rusage_info_v4::ri_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v4, ri_pkg_idle_wkups) - 32usize];
    ["Offset of field: rusage_info_v4::ri_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v4, ri_interrupt_wkups) - 40usize];
    ["Offset of field: rusage_info_v4::ri_pageins"]
        [::std::mem::offset_of!(rusage_info_v4, ri_pageins) - 48usize];
    ["Offset of field: rusage_info_v4::ri_wired_size"]
        [::std::mem::offset_of!(rusage_info_v4, ri_wired_size) - 56usize];
    ["Offset of field: rusage_info_v4::ri_resident_size"]
        [::std::mem::offset_of!(rusage_info_v4, ri_resident_size) - 64usize];
    ["Offset of field: rusage_info_v4::ri_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v4, ri_phys_footprint) - 72usize];
    ["Offset of field: rusage_info_v4::ri_proc_start_abstime"]
        [::std::mem::offset_of!(rusage_info_v4, ri_proc_start_abstime) - 80usize];
    ["Offset of field: rusage_info_v4::ri_proc_exit_abstime"]
        [::std::mem::offset_of!(rusage_info_v4, ri_proc_exit_abstime) - 88usize];
    ["Offset of field: rusage_info_v4::ri_child_user_time"]
        [::std::mem::offset_of!(rusage_info_v4, ri_child_user_time) - 96usize];
    ["Offset of field: rusage_info_v4::ri_child_system_time"]
        [::std::mem::offset_of!(rusage_info_v4, ri_child_system_time) - 104usize];
    ["Offset of field: rusage_info_v4::ri_child_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v4, ri_child_pkg_idle_wkups) - 112usize];
    ["Offset of field: rusage_info_v4::ri_child_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v4, ri_child_interrupt_wkups) - 120usize];
    ["Offset of field: rusage_info_v4::ri_child_pageins"]
        [::std::mem::offset_of!(rusage_info_v4, ri_child_pageins) - 128usize];
    ["Offset of field: rusage_info_v4::ri_child_elapsed_abstime"]
        [::std::mem::offset_of!(rusage_info_v4, ri_child_elapsed_abstime) - 136usize];
    ["Offset of field: rusage_info_v4::ri_diskio_bytesread"]
        [::std::mem::offset_of!(rusage_info_v4, ri_diskio_bytesread) - 144usize];
    ["Offset of field: rusage_info_v4::ri_diskio_byteswritten"]
        [::std::mem::offset_of!(rusage_info_v4, ri_diskio_byteswritten) - 152usize];
    ["Offset of field: rusage_info_v4::ri_cpu_time_qos_default"]
        [::std::mem::offset_of!(rusage_info_v4, ri_cpu_time_qos_default) - 160usize];
    ["Offset of field: rusage_info_v4::ri_cpu_time_qos_maintenance"]
        [::std::mem::offset_of!(rusage_info_v4, ri_cpu_time_qos_maintenance) - 168usize];
    ["Offset of field: rusage_info_v4::ri_cpu_time_qos_background"]
        [::std::mem::offset_of!(rusage_info_v4, ri_cpu_time_qos_background) - 176usize];
    ["Offset of field: rusage_info_v4::ri_cpu_time_qos_utility"]
        [::std::mem::offset_of!(rusage_info_v4, ri_cpu_time_qos_utility) - 184usize];
    ["Offset of field: rusage_info_v4::ri_cpu_time_qos_legacy"]
        [::std::mem::offset_of!(rusage_info_v4, ri_cpu_time_qos_legacy) - 192usize];
    ["Offset of field: rusage_info_v4::ri_cpu_time_qos_user_initiated"]
        [::std::mem::offset_of!(rusage_info_v4, ri_cpu_time_qos_user_initiated) - 200usize];
    ["Offset of field: rusage_info_v4::ri_cpu_time_qos_user_interactive"]
        [::std::mem::offset_of!(rusage_info_v4, ri_cpu_time_qos_user_interactive) - 208usize];
    ["Offset of field: rusage_info_v4::ri_billed_system_time"]
        [::std::mem::offset_of!(rusage_info_v4, ri_billed_system_time) - 216usize];
    ["Offset of field: rusage_info_v4::ri_serviced_system_time"]
        [::std::mem::offset_of!(rusage_info_v4, ri_serviced_system_time) - 224usize];
    ["Offset of field: rusage_info_v4::ri_logical_writes"]
        [::std::mem::offset_of!(rusage_info_v4, ri_logical_writes) - 232usize];
    ["Offset of field: rusage_info_v4::ri_lifetime_max_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v4, ri_lifetime_max_phys_footprint) - 240usize];
    ["Offset of field: rusage_info_v4::ri_instructions"]
        [::std::mem::offset_of!(rusage_info_v4, ri_instructions) - 248usize];
    ["Offset of field: rusage_info_v4::ri_cycles"]
        [::std::mem::offset_of!(rusage_info_v4, ri_cycles) - 256usize];
    ["Offset of field: rusage_info_v4::ri_billed_energy"]
        [::std::mem::offset_of!(rusage_info_v4, ri_billed_energy) - 264usize];
    ["Offset of field: rusage_info_v4::ri_serviced_energy"]
        [::std::mem::offset_of!(rusage_info_v4, ri_serviced_energy) - 272usize];
    ["Offset of field: rusage_info_v4::ri_interval_max_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v4, ri_interval_max_phys_footprint) - 280usize];
    ["Offset of field: rusage_info_v4::ri_runnable_time"]
        [::std::mem::offset_of!(rusage_info_v4, ri_runnable_time) - 288usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rusage_info_v5 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
    pub ri_cpu_time_qos_default: u64,
    pub ri_cpu_time_qos_maintenance: u64,
    pub ri_cpu_time_qos_background: u64,
    pub ri_cpu_time_qos_utility: u64,
    pub ri_cpu_time_qos_legacy: u64,
    pub ri_cpu_time_qos_user_initiated: u64,
    pub ri_cpu_time_qos_user_interactive: u64,
    pub ri_billed_system_time: u64,
    pub ri_serviced_system_time: u64,
    pub ri_logical_writes: u64,
    pub ri_lifetime_max_phys_footprint: u64,
    pub ri_instructions: u64,
    pub ri_cycles: u64,
    pub ri_billed_energy: u64,
    pub ri_serviced_energy: u64,
    pub ri_interval_max_phys_footprint: u64,
    pub ri_runnable_time: u64,
    pub ri_flags: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rusage_info_v5"][::std::mem::size_of::<rusage_info_v5>() - 304usize];
    ["Alignment of rusage_info_v5"][::std::mem::align_of::<rusage_info_v5>() - 8usize];
    ["Offset of field: rusage_info_v5::ri_uuid"]
        [::std::mem::offset_of!(rusage_info_v5, ri_uuid) - 0usize];
    ["Offset of field: rusage_info_v5::ri_user_time"]
        [::std::mem::offset_of!(rusage_info_v5, ri_user_time) - 16usize];
    ["Offset of field: rusage_info_v5::ri_system_time"]
        [::std::mem::offset_of!(rusage_info_v5, ri_system_time) - 24usize];
    ["Offset of field: rusage_info_v5::ri_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v5, ri_pkg_idle_wkups) - 32usize];
    ["Offset of field: rusage_info_v5::ri_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v5, ri_interrupt_wkups) - 40usize];
    ["Offset of field: rusage_info_v5::ri_pageins"]
        [::std::mem::offset_of!(rusage_info_v5, ri_pageins) - 48usize];
    ["Offset of field: rusage_info_v5::ri_wired_size"]
        [::std::mem::offset_of!(rusage_info_v5, ri_wired_size) - 56usize];
    ["Offset of field: rusage_info_v5::ri_resident_size"]
        [::std::mem::offset_of!(rusage_info_v5, ri_resident_size) - 64usize];
    ["Offset of field: rusage_info_v5::ri_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v5, ri_phys_footprint) - 72usize];
    ["Offset of field: rusage_info_v5::ri_proc_start_abstime"]
        [::std::mem::offset_of!(rusage_info_v5, ri_proc_start_abstime) - 80usize];
    ["Offset of field: rusage_info_v5::ri_proc_exit_abstime"]
        [::std::mem::offset_of!(rusage_info_v5, ri_proc_exit_abstime) - 88usize];
    ["Offset of field: rusage_info_v5::ri_child_user_time"]
        [::std::mem::offset_of!(rusage_info_v5, ri_child_user_time) - 96usize];
    ["Offset of field: rusage_info_v5::ri_child_system_time"]
        [::std::mem::offset_of!(rusage_info_v5, ri_child_system_time) - 104usize];
    ["Offset of field: rusage_info_v5::ri_child_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v5, ri_child_pkg_idle_wkups) - 112usize];
    ["Offset of field: rusage_info_v5::ri_child_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v5, ri_child_interrupt_wkups) - 120usize];
    ["Offset of field: rusage_info_v5::ri_child_pageins"]
        [::std::mem::offset_of!(rusage_info_v5, ri_child_pageins) - 128usize];
    ["Offset of field: rusage_info_v5::ri_child_elapsed_abstime"]
        [::std::mem::offset_of!(rusage_info_v5, ri_child_elapsed_abstime) - 136usize];
    ["Offset of field: rusage_info_v5::ri_diskio_bytesread"]
        [::std::mem::offset_of!(rusage_info_v5, ri_diskio_bytesread) - 144usize];
    ["Offset of field: rusage_info_v5::ri_diskio_byteswritten"]
        [::std::mem::offset_of!(rusage_info_v5, ri_diskio_byteswritten) - 152usize];
    ["Offset of field: rusage_info_v5::ri_cpu_time_qos_default"]
        [::std::mem::offset_of!(rusage_info_v5, ri_cpu_time_qos_default) - 160usize];
    ["Offset of field: rusage_info_v5::ri_cpu_time_qos_maintenance"]
        [::std::mem::offset_of!(rusage_info_v5, ri_cpu_time_qos_maintenance) - 168usize];
    ["Offset of field: rusage_info_v5::ri_cpu_time_qos_background"]
        [::std::mem::offset_of!(rusage_info_v5, ri_cpu_time_qos_background) - 176usize];
    ["Offset of field: rusage_info_v5::ri_cpu_time_qos_utility"]
        [::std::mem::offset_of!(rusage_info_v5, ri_cpu_time_qos_utility) - 184usize];
    ["Offset of field: rusage_info_v5::ri_cpu_time_qos_legacy"]
        [::std::mem::offset_of!(rusage_info_v5, ri_cpu_time_qos_legacy) - 192usize];
    ["Offset of field: rusage_info_v5::ri_cpu_time_qos_user_initiated"]
        [::std::mem::offset_of!(rusage_info_v5, ri_cpu_time_qos_user_initiated) - 200usize];
    ["Offset of field: rusage_info_v5::ri_cpu_time_qos_user_interactive"]
        [::std::mem::offset_of!(rusage_info_v5, ri_cpu_time_qos_user_interactive) - 208usize];
    ["Offset of field: rusage_info_v5::ri_billed_system_time"]
        [::std::mem::offset_of!(rusage_info_v5, ri_billed_system_time) - 216usize];
    ["Offset of field: rusage_info_v5::ri_serviced_system_time"]
        [::std::mem::offset_of!(rusage_info_v5, ri_serviced_system_time) - 224usize];
    ["Offset of field: rusage_info_v5::ri_logical_writes"]
        [::std::mem::offset_of!(rusage_info_v5, ri_logical_writes) - 232usize];
    ["Offset of field: rusage_info_v5::ri_lifetime_max_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v5, ri_lifetime_max_phys_footprint) - 240usize];
    ["Offset of field: rusage_info_v5::ri_instructions"]
        [::std::mem::offset_of!(rusage_info_v5, ri_instructions) - 248usize];
    ["Offset of field: rusage_info_v5::ri_cycles"]
        [::std::mem::offset_of!(rusage_info_v5, ri_cycles) - 256usize];
    ["Offset of field: rusage_info_v5::ri_billed_energy"]
        [::std::mem::offset_of!(rusage_info_v5, ri_billed_energy) - 264usize];
    ["Offset of field: rusage_info_v5::ri_serviced_energy"]
        [::std::mem::offset_of!(rusage_info_v5, ri_serviced_energy) - 272usize];
    ["Offset of field: rusage_info_v5::ri_interval_max_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v5, ri_interval_max_phys_footprint) - 280usize];
    ["Offset of field: rusage_info_v5::ri_runnable_time"]
        [::std::mem::offset_of!(rusage_info_v5, ri_runnable_time) - 288usize];
    ["Offset of field: rusage_info_v5::ri_flags"]
        [::std::mem::offset_of!(rusage_info_v5, ri_flags) - 296usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rusage_info_v6 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
    pub ri_cpu_time_qos_default: u64,
    pub ri_cpu_time_qos_maintenance: u64,
    pub ri_cpu_time_qos_background: u64,
    pub ri_cpu_time_qos_utility: u64,
    pub ri_cpu_time_qos_legacy: u64,
    pub ri_cpu_time_qos_user_initiated: u64,
    pub ri_cpu_time_qos_user_interactive: u64,
    pub ri_billed_system_time: u64,
    pub ri_serviced_system_time: u64,
    pub ri_logical_writes: u64,
    pub ri_lifetime_max_phys_footprint: u64,
    pub ri_instructions: u64,
    pub ri_cycles: u64,
    pub ri_billed_energy: u64,
    pub ri_serviced_energy: u64,
    pub ri_interval_max_phys_footprint: u64,
    pub ri_runnable_time: u64,
    pub ri_flags: u64,
    pub ri_user_ptime: u64,
    pub ri_system_ptime: u64,
    pub ri_pinstructions: u64,
    pub ri_pcycles: u64,
    pub ri_energy_nj: u64,
    pub ri_penergy_nj: u64,
    pub ri_secure_time_in_system: u64,
    pub ri_secure_ptime_in_system: u64,
    pub ri_reserved: [u64; 12usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rusage_info_v6"][::std::mem::size_of::<rusage_info_v6>() - 464usize];
    ["Alignment of rusage_info_v6"][::std::mem::align_of::<rusage_info_v6>() - 8usize];
    ["Offset of field: rusage_info_v6::ri_uuid"]
        [::std::mem::offset_of!(rusage_info_v6, ri_uuid) - 0usize];
    ["Offset of field: rusage_info_v6::ri_user_time"]
        [::std::mem::offset_of!(rusage_info_v6, ri_user_time) - 16usize];
    ["Offset of field: rusage_info_v6::ri_system_time"]
        [::std::mem::offset_of!(rusage_info_v6, ri_system_time) - 24usize];
    ["Offset of field: rusage_info_v6::ri_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v6, ri_pkg_idle_wkups) - 32usize];
    ["Offset of field: rusage_info_v6::ri_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v6, ri_interrupt_wkups) - 40usize];
    ["Offset of field: rusage_info_v6::ri_pageins"]
        [::std::mem::offset_of!(rusage_info_v6, ri_pageins) - 48usize];
    ["Offset of field: rusage_info_v6::ri_wired_size"]
        [::std::mem::offset_of!(rusage_info_v6, ri_wired_size) - 56usize];
    ["Offset of field: rusage_info_v6::ri_resident_size"]
        [::std::mem::offset_of!(rusage_info_v6, ri_resident_size) - 64usize];
    ["Offset of field: rusage_info_v6::ri_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v6, ri_phys_footprint) - 72usize];
    ["Offset of field: rusage_info_v6::ri_proc_start_abstime"]
        [::std::mem::offset_of!(rusage_info_v6, ri_proc_start_abstime) - 80usize];
    ["Offset of field: rusage_info_v6::ri_proc_exit_abstime"]
        [::std::mem::offset_of!(rusage_info_v6, ri_proc_exit_abstime) - 88usize];
    ["Offset of field: rusage_info_v6::ri_child_user_time"]
        [::std::mem::offset_of!(rusage_info_v6, ri_child_user_time) - 96usize];
    ["Offset of field: rusage_info_v6::ri_child_system_time"]
        [::std::mem::offset_of!(rusage_info_v6, ri_child_system_time) - 104usize];
    ["Offset of field: rusage_info_v6::ri_child_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v6, ri_child_pkg_idle_wkups) - 112usize];
    ["Offset of field: rusage_info_v6::ri_child_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v6, ri_child_interrupt_wkups) - 120usize];
    ["Offset of field: rusage_info_v6::ri_child_pageins"]
        [::std::mem::offset_of!(rusage_info_v6, ri_child_pageins) - 128usize];
    ["Offset of field: rusage_info_v6::ri_child_elapsed_abstime"]
        [::std::mem::offset_of!(rusage_info_v6, ri_child_elapsed_abstime) - 136usize];
    ["Offset of field: rusage_info_v6::ri_diskio_bytesread"]
        [::std::mem::offset_of!(rusage_info_v6, ri_diskio_bytesread) - 144usize];
    ["Offset of field: rusage_info_v6::ri_diskio_byteswritten"]
        [::std::mem::offset_of!(rusage_info_v6, ri_diskio_byteswritten) - 152usize];
    ["Offset of field: rusage_info_v6::ri_cpu_time_qos_default"]
        [::std::mem::offset_of!(rusage_info_v6, ri_cpu_time_qos_default) - 160usize];
    ["Offset of field: rusage_info_v6::ri_cpu_time_qos_maintenance"]
        [::std::mem::offset_of!(rusage_info_v6, ri_cpu_time_qos_maintenance) - 168usize];
    ["Offset of field: rusage_info_v6::ri_cpu_time_qos_background"]
        [::std::mem::offset_of!(rusage_info_v6, ri_cpu_time_qos_background) - 176usize];
    ["Offset of field: rusage_info_v6::ri_cpu_time_qos_utility"]
        [::std::mem::offset_of!(rusage_info_v6, ri_cpu_time_qos_utility) - 184usize];
    ["Offset of field: rusage_info_v6::ri_cpu_time_qos_legacy"]
        [::std::mem::offset_of!(rusage_info_v6, ri_cpu_time_qos_legacy) - 192usize];
    ["Offset of field: rusage_info_v6::ri_cpu_time_qos_user_initiated"]
        [::std::mem::offset_of!(rusage_info_v6, ri_cpu_time_qos_user_initiated) - 200usize];
    ["Offset of field: rusage_info_v6::ri_cpu_time_qos_user_interactive"]
        [::std::mem::offset_of!(rusage_info_v6, ri_cpu_time_qos_user_interactive) - 208usize];
    ["Offset of field: rusage_info_v6::ri_billed_system_time"]
        [::std::mem::offset_of!(rusage_info_v6, ri_billed_system_time) - 216usize];
    ["Offset of field: rusage_info_v6::ri_serviced_system_time"]
        [::std::mem::offset_of!(rusage_info_v6, ri_serviced_system_time) - 224usize];
    ["Offset of field: rusage_info_v6::ri_logical_writes"]
        [::std::mem::offset_of!(rusage_info_v6, ri_logical_writes) - 232usize];
    ["Offset of field: rusage_info_v6::ri_lifetime_max_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v6, ri_lifetime_max_phys_footprint) - 240usize];
    ["Offset of field: rusage_info_v6::ri_instructions"]
        [::std::mem::offset_of!(rusage_info_v6, ri_instructions) - 248usize];
    ["Offset of field: rusage_info_v6::ri_cycles"]
        [::std::mem::offset_of!(rusage_info_v6, ri_cycles) - 256usize];
    ["Offset of field: rusage_info_v6::ri_billed_energy"]
        [::std::mem::offset_of!(rusage_info_v6, ri_billed_energy) - 264usize];
    ["Offset of field: rusage_info_v6::ri_serviced_energy"]
        [::std::mem::offset_of!(rusage_info_v6, ri_serviced_energy) - 272usize];
    ["Offset of field: rusage_info_v6::ri_interval_max_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v6, ri_interval_max_phys_footprint) - 280usize];
    ["Offset of field: rusage_info_v6::ri_runnable_time"]
        [::std::mem::offset_of!(rusage_info_v6, ri_runnable_time) - 288usize];
    ["Offset of field: rusage_info_v6::ri_flags"]
        [::std::mem::offset_of!(rusage_info_v6, ri_flags) - 296usize];
    ["Offset of field: rusage_info_v6::ri_user_ptime"]
        [::std::mem::offset_of!(rusage_info_v6, ri_user_ptime) - 304usize];
    ["Offset of field: rusage_info_v6::ri_system_ptime"]
        [::std::mem::offset_of!(rusage_info_v6, ri_system_ptime) - 312usize];
    ["Offset of field: rusage_info_v6::ri_pinstructions"]
        [::std::mem::offset_of!(rusage_info_v6, ri_pinstructions) - 320usize];
    ["Offset of field: rusage_info_v6::ri_pcycles"]
        [::std::mem::offset_of!(rusage_info_v6, ri_pcycles) - 328usize];
    ["Offset of field: rusage_info_v6::ri_energy_nj"]
        [::std::mem::offset_of!(rusage_info_v6, ri_energy_nj) - 336usize];
    ["Offset of field: rusage_info_v6::ri_penergy_nj"]
        [::std::mem::offset_of!(rusage_info_v6, ri_penergy_nj) - 344usize];
    ["Offset of field: rusage_info_v6::ri_secure_time_in_system"]
        [::std::mem::offset_of!(rusage_info_v6, ri_secure_time_in_system) - 352usize];
    ["Offset of field: rusage_info_v6::ri_secure_ptime_in_system"]
        [::std::mem::offset_of!(rusage_info_v6, ri_secure_ptime_in_system) - 360usize];
    ["Offset of field: rusage_info_v6::ri_reserved"]
        [::std::mem::offset_of!(rusage_info_v6, ri_reserved) - 368usize];
};
pub type rusage_info_current = rusage_info_v6;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rlimit {
    pub rlim_cur: rlim_t,
    pub rlim_max: rlim_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rlimit"][::std::mem::size_of::<rlimit>() - 16usize];
    ["Alignment of rlimit"][::std::mem::align_of::<rlimit>() - 8usize];
    ["Offset of field: rlimit::rlim_cur"][::std::mem::offset_of!(rlimit, rlim_cur) - 0usize];
    ["Offset of field: rlimit::rlim_max"][::std::mem::offset_of!(rlimit, rlim_max) - 8usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct proc_rlimit_control_wakeupmon {
    pub wm_flags: u32,
    pub wm_rate: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of proc_rlimit_control_wakeupmon"]
        [::std::mem::size_of::<proc_rlimit_control_wakeupmon>() - 8usize];
    ["Alignment of proc_rlimit_control_wakeupmon"]
        [::std::mem::align_of::<proc_rlimit_control_wakeupmon>() - 4usize];
    ["Offset of field: proc_rlimit_control_wakeupmon::wm_flags"]
        [::std::mem::offset_of!(proc_rlimit_control_wakeupmon, wm_flags) - 0usize];
    ["Offset of field: proc_rlimit_control_wakeupmon::wm_rate"]
        [::std::mem::offset_of!(proc_rlimit_control_wakeupmon, wm_rate) - 4usize];
};
unsafe extern "C" {
    pub fn getpriority(arg1: ::std::os::raw::c_int, arg2: id_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getiopolicy_np(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getrlimit(arg1: ::std::os::raw::c_int, arg2: *mut rlimit) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getrusage(arg1: ::std::os::raw::c_int, arg2: *mut rusage) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setpriority(
        arg1: ::std::os::raw::c_int,
        arg2: id_t,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setiopolicy_np(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setrlimit(arg1: ::std::os::raw::c_int, arg2: *const rlimit) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union wait {
    pub w_status: ::std::os::raw::c_int,
    pub w_T: wait__bindgen_ty_1,
    pub w_S: wait__bindgen_ty_2,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct wait__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of wait__bindgen_ty_1"][::std::mem::size_of::<wait__bindgen_ty_1>() - 4usize];
    ["Alignment of wait__bindgen_ty_1"][::std::mem::align_of::<wait__bindgen_ty_1>() - 4usize];
};
impl wait__bindgen_ty_1 {
    #[inline]
    pub fn w_Termsig(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 7u8) as u32) }
    }
    #[inline]
    pub fn set_w_Termsig(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn w_Termsig_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                7u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_w_Termsig_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                7u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn w_Coredump(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_w_Coredump(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn w_Coredump_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                7usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_w_Coredump_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                7usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn w_Retcode(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_w_Retcode(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn w_Retcode_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                8usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_w_Retcode_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                8usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn w_Filler(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_w_Filler(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn w_Filler_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                16usize,
                16u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_w_Filler_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                16usize,
                16u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        w_Termsig: ::std::os::raw::c_uint,
        w_Coredump: ::std::os::raw::c_uint,
        w_Retcode: ::std::os::raw::c_uint,
        w_Filler: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 7u8, {
            let w_Termsig: u32 = unsafe { ::std::mem::transmute(w_Termsig) };
            w_Termsig as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let w_Coredump: u32 = unsafe { ::std::mem::transmute(w_Coredump) };
            w_Coredump as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let w_Retcode: u32 = unsafe { ::std::mem::transmute(w_Retcode) };
            w_Retcode as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let w_Filler: u32 = unsafe { ::std::mem::transmute(w_Filler) };
            w_Filler as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct wait__bindgen_ty_2 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of wait__bindgen_ty_2"][::std::mem::size_of::<wait__bindgen_ty_2>() - 4usize];
    ["Alignment of wait__bindgen_ty_2"][::std::mem::align_of::<wait__bindgen_ty_2>() - 4usize];
};
impl wait__bindgen_ty_2 {
    #[inline]
    pub fn w_Stopval(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_w_Stopval(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn w_Stopval_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_w_Stopval_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn w_Stopsig(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_w_Stopsig(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn w_Stopsig_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                8usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_w_Stopsig_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                8usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn w_Filler(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_w_Filler(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn w_Filler_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                16usize,
                16u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_w_Filler_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                16usize,
                16u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        w_Stopval: ::std::os::raw::c_uint,
        w_Stopsig: ::std::os::raw::c_uint,
        w_Filler: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let w_Stopval: u32 = unsafe { ::std::mem::transmute(w_Stopval) };
            w_Stopval as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let w_Stopsig: u32 = unsafe { ::std::mem::transmute(w_Stopsig) };
            w_Stopsig as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let w_Filler: u32 = unsafe { ::std::mem::transmute(w_Filler) };
            w_Filler as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of wait"][::std::mem::size_of::<wait>() - 4usize];
    ["Alignment of wait"][::std::mem::align_of::<wait>() - 4usize];
    ["Offset of field: wait::w_status"][::std::mem::offset_of!(wait, w_status) - 0usize];
    ["Offset of field: wait::w_T"][::std::mem::offset_of!(wait, w_T) - 0usize];
    ["Offset of field: wait::w_S"][::std::mem::offset_of!(wait, w_S) - 0usize];
};
impl Default for wait {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
unsafe extern "C" {
    pub fn wait(arg1: *mut ::std::os::raw::c_int) -> pid_t;
}
unsafe extern "C" {
    pub fn waitpid(
        arg1: pid_t,
        arg2: *mut ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> pid_t;
}
unsafe extern "C" {
    pub fn waitid(
        arg1: idtype_t,
        arg2: id_t,
        arg3: *mut siginfo_t,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn wait3(
        arg1: *mut ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *mut rusage,
    ) -> pid_t;
}
unsafe extern "C" {
    pub fn wait4(
        arg1: pid_t,
        arg2: *mut ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut rusage,
    ) -> pid_t;
}
unsafe extern "C" {
    pub fn alloca(arg1: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
pub type ct_rune_t = __darwin_ct_rune_t;
pub type rune_t = __darwin_rune_t;
pub type wchar_t = __darwin_wchar_t;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of div_t"][::std::mem::size_of::<div_t>() - 8usize];
    ["Alignment of div_t"][::std::mem::align_of::<div_t>() - 4usize];
    ["Offset of field: div_t::quot"][::std::mem::offset_of!(div_t, quot) - 0usize];
    ["Offset of field: div_t::rem"][::std::mem::offset_of!(div_t, rem) - 4usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ldiv_t"][::std::mem::size_of::<ldiv_t>() - 16usize];
    ["Alignment of ldiv_t"][::std::mem::align_of::<ldiv_t>() - 8usize];
    ["Offset of field: ldiv_t::quot"][::std::mem::offset_of!(ldiv_t, quot) - 0usize];
    ["Offset of field: ldiv_t::rem"][::std::mem::offset_of!(ldiv_t, rem) - 8usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lldiv_t"][::std::mem::size_of::<lldiv_t>() - 16usize];
    ["Alignment of lldiv_t"][::std::mem::align_of::<lldiv_t>() - 8usize];
    ["Offset of field: lldiv_t::quot"][::std::mem::offset_of!(lldiv_t, quot) - 0usize];
    ["Offset of field: lldiv_t::rem"][::std::mem::offset_of!(lldiv_t, rem) - 8usize];
};
unsafe extern "C" {
    pub static mut __mb_cur_max: ::std::os::raw::c_int;
}
pub type malloc_type_id_t = ::std::os::raw::c_ulonglong;
unsafe extern "C" {
    pub fn malloc_type_malloc(
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn malloc_type_calloc(
        count: usize,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn malloc_type_free(ptr: *mut ::std::os::raw::c_void, type_id: malloc_type_id_t);
}
unsafe extern "C" {
    pub fn malloc_type_realloc(
        ptr: *mut ::std::os::raw::c_void,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn malloc_type_valloc(
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn malloc_type_aligned_alloc(
        alignment: usize,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn malloc_type_posix_memalign(
        memptr: *mut *mut ::std::os::raw::c_void,
        alignment: usize,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _malloc_zone_t {
    _unused: [u8; 0],
}
pub type malloc_zone_t = _malloc_zone_t;
unsafe extern "C" {
    pub fn malloc_type_zone_malloc(
        zone: *mut malloc_zone_t,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn malloc_type_zone_calloc(
        zone: *mut malloc_zone_t,
        count: usize,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn malloc_type_zone_free(
        zone: *mut malloc_zone_t,
        ptr: *mut ::std::os::raw::c_void,
        type_id: malloc_type_id_t,
    );
}
unsafe extern "C" {
    pub fn malloc_type_zone_realloc(
        zone: *mut malloc_zone_t,
        ptr: *mut ::std::os::raw::c_void,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn malloc_type_zone_valloc(
        zone: *mut malloc_zone_t,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn malloc_type_zone_memalign(
        zone: *mut malloc_zone_t,
        alignment: usize,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn malloc(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn calloc(
        __count: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn free(arg1: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn realloc(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn reallocf(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn valloc(arg1: usize) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn aligned_alloc(
        __alignment: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn posix_memalign(
        __memptr: *mut *mut ::std::os::raw::c_void,
        __alignment: usize,
        __size: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn abort() -> !;
}
unsafe extern "C" {
    pub fn abs(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn atexit(arg1: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn atof(arg1: *const ::std::os::raw::c_char) -> f64;
}
unsafe extern "C" {
    pub fn atoi(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn atol(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn atoll(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn bsearch(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn div(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> div_t;
}
unsafe extern "C" {
    pub fn exit(arg1: ::std::os::raw::c_int) -> !;
}
unsafe extern "C" {
    pub fn getenv(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn labs(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn ldiv(arg1: ::std::os::raw::c_long, arg2: ::std::os::raw::c_long) -> ldiv_t;
}
unsafe extern "C" {
    pub fn llabs(arg1: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn lldiv(arg1: ::std::os::raw::c_longlong, arg2: ::std::os::raw::c_longlong) -> lldiv_t;
}
unsafe extern "C" {
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: usize) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mbstowcs(arg1: *mut wchar_t, arg2: *const ::std::os::raw::c_char, arg3: usize) -> usize;
}
unsafe extern "C" {
    pub fn mbtowc(
        arg1: *mut wchar_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn qsort(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
unsafe extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn srand(arg1: ::std::os::raw::c_uint);
}
unsafe extern "C" {
    pub fn strtod(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
unsafe extern "C" {
    pub fn strtof(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
unsafe extern "C" {
    pub fn strtol(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn strtold(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> u128;
}
unsafe extern "C" {
    pub fn strtoll(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn strtoul(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn strtoull(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn system(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn wcstombs(arg1: *mut ::std::os::raw::c_char, arg2: *const wchar_t, arg3: usize) -> usize;
}
unsafe extern "C" {
    pub fn wctomb(arg1: *mut ::std::os::raw::c_char, arg2: wchar_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _Exit(arg1: ::std::os::raw::c_int) -> !;
}
unsafe extern "C" {
    pub fn a64l(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn drand48() -> f64;
}
unsafe extern "C" {
    pub fn ecvt(
        arg1: f64,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn erand48(arg1: *mut ::std::os::raw::c_ushort) -> f64;
}
unsafe extern "C" {
    pub fn fcvt(
        arg1: f64,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn gcvt(
        arg1: f64,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn getsubopt(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const *mut ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn grantpt(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn initstate(
        arg1: ::std::os::raw::c_uint,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn jrand48(arg1: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn l64a(arg1: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn lcong48(arg1: *mut ::std::os::raw::c_ushort);
}
unsafe extern "C" {
    pub fn lrand48() -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn mktemp(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn mkstemp(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mrand48() -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn nrand48(arg1: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn posix_openpt(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ptsname(arg1: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ptsname_r(
        fildes: ::std::os::raw::c_int,
        buffer: *mut ::std::os::raw::c_char,
        buflen: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn putenv(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn random() -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn rand_r(arg1: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}_realpath$DARWIN_EXTSN"]
    pub fn realpath(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn seed48(arg1: *mut ::std::os::raw::c_ushort) -> *mut ::std::os::raw::c_ushort;
}
unsafe extern "C" {
    pub fn setenv(
        __name: *const ::std::os::raw::c_char,
        __value: *const ::std::os::raw::c_char,
        __overwrite: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setkey(arg1: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn setstate(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn srand48(arg1: ::std::os::raw::c_long);
}
unsafe extern "C" {
    pub fn srandom(arg1: ::std::os::raw::c_uint);
}
unsafe extern "C" {
    pub fn unlockpt(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn unsetenv(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
pub type dev_t = __darwin_dev_t;
pub type mode_t = __darwin_mode_t;
unsafe extern "C" {
    pub fn arc4random() -> u32;
}
unsafe extern "C" {
    pub fn arc4random_addrandom(arg1: *mut ::std::os::raw::c_uchar, arg2: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn arc4random_buf(__buf: *mut ::std::os::raw::c_void, __nbytes: usize);
}
unsafe extern "C" {
    pub fn arc4random_stir();
}
unsafe extern "C" {
    pub fn arc4random_uniform(__upper_bound: u32) -> u32;
}
unsafe extern "C" {
    pub fn atexit_b(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn bsearch_b(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn cgetcap(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn cgetclose() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn cgetent(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn cgetfirst(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn cgetmatch(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn cgetnext(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn cgetnum(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn cgetset(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn cgetstr(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn cgetustr(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}_daemon$1050"]
    pub fn daemon(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn devname(arg1: dev_t, arg2: mode_t) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn devname_r(
        arg1: dev_t,
        arg2: mode_t,
        buf: *mut ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn getbsize(
        arg1: *mut ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_long,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn getloadavg(arg1: *mut f64, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getprogname() -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn setprogname(arg1: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn heapsort(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn heapsort_b(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mergesort(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mergesort_b(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn psort(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
unsafe extern "C" {
    pub fn psort_b(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn psort_r(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        arg1: *mut ::std::os::raw::c_void,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
                arg3: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
unsafe extern "C" {
    pub fn qsort_b(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn qsort_r(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        arg1: *mut ::std::os::raw::c_void,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
                arg3: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
unsafe extern "C" {
    pub fn radixsort(
        __base: *mut *const ::std::os::raw::c_uchar,
        __nel: ::std::os::raw::c_int,
        __table: *const ::std::os::raw::c_uchar,
        __endbyte: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn rpmatch(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sradixsort(
        __base: *mut *const ::std::os::raw::c_uchar,
        __nel: ::std::os::raw::c_int,
        __table: *const ::std::os::raw::c_uchar,
        __endbyte: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sranddev();
}
unsafe extern "C" {
    pub fn srandomdev();
}
unsafe extern "C" {
    pub fn strtonum(
        __numstr: *const ::std::os::raw::c_char,
        __minval: ::std::os::raw::c_longlong,
        __maxval: ::std::os::raw::c_longlong,
        __errstrp: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn strtoq(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn strtouq(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub static mut suboptarg: *mut ::std::os::raw::c_char;
}
pub type float_t = f32;
pub type double_t = f64;
unsafe extern "C" {
    pub fn __math_errhandling() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __fpclassifyf(arg1: f32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __fpclassifyd(arg1: f64) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __fpclassifyl(arg1: u128) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn acosf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn acos(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn acosl(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn asinf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn asin(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn asinl(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn atanf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn atan(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn atanl(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn atan2f(arg1: f32, arg2: f32) -> f32;
}
unsafe extern "C" {
    pub fn atan2(arg1: f64, arg2: f64) -> f64;
}
unsafe extern "C" {
    pub fn atan2l(arg1: u128, arg2: u128) -> u128;
}
unsafe extern "C" {
    pub fn cosf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn cos(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn cosl(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn sinf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn sin(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn sinl(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn tanf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn tan(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn tanl(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn acoshf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn acosh(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn acoshl(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn asinhf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn asinh(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn asinhl(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn atanhf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn atanh(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn atanhl(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn coshf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn cosh(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn coshl(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn sinhf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn sinh(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn sinhl(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn tanhf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn tanh(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn tanhl(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn expf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn exp(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn expl(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn exp2f(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn exp2(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn exp2l(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn expm1f(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn expm1(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn expm1l(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn logf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn log(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn logl(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn log10f(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn log10(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn log10l(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn log2f(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn log2(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn log2l(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn log1pf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn log1p(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn log1pl(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn logbf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn logb(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn logbl(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn modff(arg1: f32, arg2: *mut f32) -> f32;
}
unsafe extern "C" {
    pub fn modf(arg1: f64, arg2: *mut f64) -> f64;
}
unsafe extern "C" {
    pub fn modfl(arg1: u128, arg2: *mut u128) -> u128;
}
unsafe extern "C" {
    pub fn ldexpf(arg1: f32, arg2: ::std::os::raw::c_int) -> f32;
}
unsafe extern "C" {
    pub fn ldexp(arg1: f64, arg2: ::std::os::raw::c_int) -> f64;
}
unsafe extern "C" {
    pub fn ldexpl(arg1: u128, arg2: ::std::os::raw::c_int) -> u128;
}
unsafe extern "C" {
    pub fn frexpf(arg1: f32, arg2: *mut ::std::os::raw::c_int) -> f32;
}
unsafe extern "C" {
    pub fn frexp(arg1: f64, arg2: *mut ::std::os::raw::c_int) -> f64;
}
unsafe extern "C" {
    pub fn frexpl(arg1: u128, arg2: *mut ::std::os::raw::c_int) -> u128;
}
unsafe extern "C" {
    pub fn ilogbf(arg1: f32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ilogb(arg1: f64) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ilogbl(arg1: u128) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn scalbnf(arg1: f32, arg2: ::std::os::raw::c_int) -> f32;
}
unsafe extern "C" {
    pub fn scalbn(arg1: f64, arg2: ::std::os::raw::c_int) -> f64;
}
unsafe extern "C" {
    pub fn scalbnl(arg1: u128, arg2: ::std::os::raw::c_int) -> u128;
}
unsafe extern "C" {
    pub fn scalblnf(arg1: f32, arg2: ::std::os::raw::c_long) -> f32;
}
unsafe extern "C" {
    pub fn scalbln(arg1: f64, arg2: ::std::os::raw::c_long) -> f64;
}
unsafe extern "C" {
    pub fn scalblnl(arg1: u128, arg2: ::std::os::raw::c_long) -> u128;
}
unsafe extern "C" {
    pub fn fabsf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn fabs(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn fabsl(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn cbrtf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn cbrt(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn cbrtl(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn hypotf(arg1: f32, arg2: f32) -> f32;
}
unsafe extern "C" {
    pub fn hypot(arg1: f64, arg2: f64) -> f64;
}
unsafe extern "C" {
    pub fn hypotl(arg1: u128, arg2: u128) -> u128;
}
unsafe extern "C" {
    pub fn powf(arg1: f32, arg2: f32) -> f32;
}
unsafe extern "C" {
    pub fn pow(arg1: f64, arg2: f64) -> f64;
}
unsafe extern "C" {
    pub fn powl(arg1: u128, arg2: u128) -> u128;
}
unsafe extern "C" {
    pub fn sqrtf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn sqrt(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn sqrtl(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn erff(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn erf(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn erfl(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn erfcf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn erfc(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn erfcl(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn lgammaf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn lgamma(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn lgammal(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn tgammaf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn tgamma(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn tgammal(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn ceilf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn ceil(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn ceill(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn floorf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn floor(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn floorl(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn nearbyintf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn nearbyint(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn nearbyintl(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn rintf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn rint(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn rintl(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn lrintf(arg1: f32) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn lrint(arg1: f64) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn lrintl(arg1: u128) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn roundf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn round(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn roundl(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn lroundf(arg1: f32) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn lround(arg1: f64) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn lroundl(arg1: u128) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn llrintf(arg1: f32) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn llrint(arg1: f64) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn llrintl(arg1: u128) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn llroundf(arg1: f32) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn llround(arg1: f64) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn llroundl(arg1: u128) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn truncf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn trunc(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn truncl(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn fmodf(arg1: f32, arg2: f32) -> f32;
}
unsafe extern "C" {
    pub fn fmod(arg1: f64, arg2: f64) -> f64;
}
unsafe extern "C" {
    pub fn fmodl(arg1: u128, arg2: u128) -> u128;
}
unsafe extern "C" {
    pub fn remainderf(arg1: f32, arg2: f32) -> f32;
}
unsafe extern "C" {
    pub fn remainder(arg1: f64, arg2: f64) -> f64;
}
unsafe extern "C" {
    pub fn remainderl(arg1: u128, arg2: u128) -> u128;
}
unsafe extern "C" {
    pub fn remquof(arg1: f32, arg2: f32, arg3: *mut ::std::os::raw::c_int) -> f32;
}
unsafe extern "C" {
    pub fn remquo(arg1: f64, arg2: f64, arg3: *mut ::std::os::raw::c_int) -> f64;
}
unsafe extern "C" {
    pub fn remquol(arg1: u128, arg2: u128, arg3: *mut ::std::os::raw::c_int) -> u128;
}
unsafe extern "C" {
    pub fn copysignf(arg1: f32, arg2: f32) -> f32;
}
unsafe extern "C" {
    pub fn copysign(arg1: f64, arg2: f64) -> f64;
}
unsafe extern "C" {
    pub fn copysignl(arg1: u128, arg2: u128) -> u128;
}
unsafe extern "C" {
    pub fn nanf(arg1: *const ::std::os::raw::c_char) -> f32;
}
unsafe extern "C" {
    pub fn nan(arg1: *const ::std::os::raw::c_char) -> f64;
}
unsafe extern "C" {
    pub fn nanl(arg1: *const ::std::os::raw::c_char) -> u128;
}
unsafe extern "C" {
    pub fn nextafterf(arg1: f32, arg2: f32) -> f32;
}
unsafe extern "C" {
    pub fn nextafter(arg1: f64, arg2: f64) -> f64;
}
unsafe extern "C" {
    pub fn nextafterl(arg1: u128, arg2: u128) -> u128;
}
unsafe extern "C" {
    pub fn nexttoward(arg1: f64, arg2: u128) -> f64;
}
unsafe extern "C" {
    pub fn nexttowardf(arg1: f32, arg2: u128) -> f32;
}
unsafe extern "C" {
    pub fn nexttowardl(arg1: u128, arg2: u128) -> u128;
}
unsafe extern "C" {
    pub fn fdimf(arg1: f32, arg2: f32) -> f32;
}
unsafe extern "C" {
    pub fn fdim(arg1: f64, arg2: f64) -> f64;
}
unsafe extern "C" {
    pub fn fdiml(arg1: u128, arg2: u128) -> u128;
}
unsafe extern "C" {
    pub fn fmaxf(arg1: f32, arg2: f32) -> f32;
}
unsafe extern "C" {
    pub fn fmax(arg1: f64, arg2: f64) -> f64;
}
unsafe extern "C" {
    pub fn fmaxl(arg1: u128, arg2: u128) -> u128;
}
unsafe extern "C" {
    pub fn fminf(arg1: f32, arg2: f32) -> f32;
}
unsafe extern "C" {
    pub fn fmin(arg1: f64, arg2: f64) -> f64;
}
unsafe extern "C" {
    pub fn fminl(arg1: u128, arg2: u128) -> u128;
}
unsafe extern "C" {
    pub fn fmaf(arg1: f32, arg2: f32, arg3: f32) -> f32;
}
unsafe extern "C" {
    pub fn fma(arg1: f64, arg2: f64, arg3: f64) -> f64;
}
unsafe extern "C" {
    pub fn fmal(arg1: u128, arg2: u128, arg3: u128) -> u128;
}
unsafe extern "C" {
    pub fn __inff() -> f32;
}
unsafe extern "C" {
    pub fn __inf() -> f64;
}
unsafe extern "C" {
    pub fn __infl() -> u128;
}
unsafe extern "C" {
    pub fn __nan() -> f32;
}
unsafe extern "C" {
    pub fn __exp10f(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn __exp10(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn __cospif(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn __cospi(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn __sinpif(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn __sinpi(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn __tanpif(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn __tanpi(arg1: f64) -> f64;
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __float2 {
    pub __sinval: f32,
    pub __cosval: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __float2"][::std::mem::size_of::<__float2>() - 8usize];
    ["Alignment of __float2"][::std::mem::align_of::<__float2>() - 4usize];
    ["Offset of field: __float2::__sinval"][::std::mem::offset_of!(__float2, __sinval) - 0usize];
    ["Offset of field: __float2::__cosval"][::std::mem::offset_of!(__float2, __cosval) - 4usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __double2 {
    pub __sinval: f64,
    pub __cosval: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __double2"][::std::mem::size_of::<__double2>() - 16usize];
    ["Alignment of __double2"][::std::mem::align_of::<__double2>() - 8usize];
    ["Offset of field: __double2::__sinval"][::std::mem::offset_of!(__double2, __sinval) - 0usize];
    ["Offset of field: __double2::__cosval"][::std::mem::offset_of!(__double2, __cosval) - 8usize];
};
unsafe extern "C" {
    pub fn __sincosf_stret(arg1: f32) -> __float2;
}
unsafe extern "C" {
    pub fn __sincos_stret(arg1: f64) -> __double2;
}
unsafe extern "C" {
    pub fn __sincospif_stret(arg1: f32) -> __float2;
}
unsafe extern "C" {
    pub fn __sincospi_stret(arg1: f64) -> __double2;
}
unsafe extern "C" {
    pub fn j0(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn j1(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn jn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
unsafe extern "C" {
    pub fn y0(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn y1(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn yn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
unsafe extern "C" {
    pub fn scalb(arg1: f64, arg2: f64) -> f64;
}
unsafe extern "C" {
    pub static mut signgam: ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn rinttol(arg1: f64) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn roundtol(arg1: f64) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn drem(arg1: f64, arg2: f64) -> f64;
}
unsafe extern "C" {
    pub fn finite(arg1: f64) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn gamma(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn significand(arg1: f64) -> f64;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct exception {
    pub type_: ::std::os::raw::c_int,
    pub name: *mut ::std::os::raw::c_char,
    pub arg1: f64,
    pub arg2: f64,
    pub retval: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of exception"][::std::mem::size_of::<exception>() - 40usize];
    ["Alignment of exception"][::std::mem::align_of::<exception>() - 8usize];
    ["Offset of field: exception::type_"][::std::mem::offset_of!(exception, type_) - 0usize];
    ["Offset of field: exception::name"][::std::mem::offset_of!(exception, name) - 8usize];
    ["Offset of field: exception::arg1"][::std::mem::offset_of!(exception, arg1) - 16usize];
    ["Offset of field: exception::arg2"][::std::mem::offset_of!(exception, arg2) - 24usize];
    ["Offset of field: exception::retval"][::std::mem::offset_of!(exception, retval) - 32usize];
};
impl Default for exception {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type rsize_t = ::std::os::raw::c_ulong;
pub type max_align_t = u128;
pub type mjtNum = f64;
pub type mjtByte = ::std::os::raw::c_uchar;
pub const mjtDisableBit__mjDSBL_CONSTRAINT: mjtDisableBit_ = 1;
pub const mjtDisableBit__mjDSBL_EQUALITY: mjtDisableBit_ = 2;
pub const mjtDisableBit__mjDSBL_FRICTIONLOSS: mjtDisableBit_ = 4;
pub const mjtDisableBit__mjDSBL_LIMIT: mjtDisableBit_ = 8;
pub const mjtDisableBit__mjDSBL_CONTACT: mjtDisableBit_ = 16;
pub const mjtDisableBit__mjDSBL_PASSIVE: mjtDisableBit_ = 32;
pub const mjtDisableBit__mjDSBL_GRAVITY: mjtDisableBit_ = 64;
pub const mjtDisableBit__mjDSBL_CLAMPCTRL: mjtDisableBit_ = 128;
pub const mjtDisableBit__mjDSBL_WARMSTART: mjtDisableBit_ = 256;
pub const mjtDisableBit__mjDSBL_FILTERPARENT: mjtDisableBit_ = 512;
pub const mjtDisableBit__mjDSBL_ACTUATION: mjtDisableBit_ = 1024;
pub const mjtDisableBit__mjDSBL_REFSAFE: mjtDisableBit_ = 2048;
pub const mjtDisableBit__mjDSBL_SENSOR: mjtDisableBit_ = 4096;
pub const mjtDisableBit__mjDSBL_MIDPHASE: mjtDisableBit_ = 8192;
pub const mjtDisableBit__mjDSBL_EULERDAMP: mjtDisableBit_ = 16384;
pub const mjtDisableBit__mjDSBL_AUTORESET: mjtDisableBit_ = 32768;
pub const mjtDisableBit__mjNDISABLE: mjtDisableBit_ = 16;
pub type mjtDisableBit_ = ::std::os::raw::c_uint;
pub use self::mjtDisableBit_ as mjtDisableBit;
pub const mjtEnableBit__mjENBL_OVERRIDE: mjtEnableBit_ = 1;
pub const mjtEnableBit__mjENBL_ENERGY: mjtEnableBit_ = 2;
pub const mjtEnableBit__mjENBL_FWDINV: mjtEnableBit_ = 4;
pub const mjtEnableBit__mjENBL_INVDISCRETE: mjtEnableBit_ = 8;
pub const mjtEnableBit__mjENBL_MULTICCD: mjtEnableBit_ = 16;
pub const mjtEnableBit__mjENBL_ISLAND: mjtEnableBit_ = 32;
pub const mjtEnableBit__mjENBL_NATIVECCD: mjtEnableBit_ = 64;
pub const mjtEnableBit__mjNENABLE: mjtEnableBit_ = 7;
pub type mjtEnableBit_ = ::std::os::raw::c_uint;
pub use self::mjtEnableBit_ as mjtEnableBit;
pub const mjtJoint__mjJNT_FREE: mjtJoint_ = 0;
pub const mjtJoint__mjJNT_BALL: mjtJoint_ = 1;
pub const mjtJoint__mjJNT_SLIDE: mjtJoint_ = 2;
pub const mjtJoint__mjJNT_HINGE: mjtJoint_ = 3;
pub type mjtJoint_ = ::std::os::raw::c_uint;
pub use self::mjtJoint_ as mjtJoint;
pub const mjtGeom__mjGEOM_PLANE: mjtGeom_ = 0;
pub const mjtGeom__mjGEOM_HFIELD: mjtGeom_ = 1;
pub const mjtGeom__mjGEOM_SPHERE: mjtGeom_ = 2;
pub const mjtGeom__mjGEOM_CAPSULE: mjtGeom_ = 3;
pub const mjtGeom__mjGEOM_ELLIPSOID: mjtGeom_ = 4;
pub const mjtGeom__mjGEOM_CYLINDER: mjtGeom_ = 5;
pub const mjtGeom__mjGEOM_BOX: mjtGeom_ = 6;
pub const mjtGeom__mjGEOM_MESH: mjtGeom_ = 7;
pub const mjtGeom__mjGEOM_SDF: mjtGeom_ = 8;
pub const mjtGeom__mjNGEOMTYPES: mjtGeom_ = 9;
pub const mjtGeom__mjGEOM_ARROW: mjtGeom_ = 100;
pub const mjtGeom__mjGEOM_ARROW1: mjtGeom_ = 101;
pub const mjtGeom__mjGEOM_ARROW2: mjtGeom_ = 102;
pub const mjtGeom__mjGEOM_LINE: mjtGeom_ = 103;
pub const mjtGeom__mjGEOM_LINEBOX: mjtGeom_ = 104;
pub const mjtGeom__mjGEOM_FLEX: mjtGeom_ = 105;
pub const mjtGeom__mjGEOM_SKIN: mjtGeom_ = 106;
pub const mjtGeom__mjGEOM_LABEL: mjtGeom_ = 107;
pub const mjtGeom__mjGEOM_TRIANGLE: mjtGeom_ = 108;
pub const mjtGeom__mjGEOM_NONE: mjtGeom_ = 1001;
pub type mjtGeom_ = ::std::os::raw::c_uint;
pub use self::mjtGeom_ as mjtGeom;
pub const mjtCamLight__mjCAMLIGHT_FIXED: mjtCamLight_ = 0;
pub const mjtCamLight__mjCAMLIGHT_TRACK: mjtCamLight_ = 1;
pub const mjtCamLight__mjCAMLIGHT_TRACKCOM: mjtCamLight_ = 2;
pub const mjtCamLight__mjCAMLIGHT_TARGETBODY: mjtCamLight_ = 3;
pub const mjtCamLight__mjCAMLIGHT_TARGETBODYCOM: mjtCamLight_ = 4;
pub type mjtCamLight_ = ::std::os::raw::c_uint;
pub use self::mjtCamLight_ as mjtCamLight;
pub const mjtTexture__mjTEXTURE_2D: mjtTexture_ = 0;
pub const mjtTexture__mjTEXTURE_CUBE: mjtTexture_ = 1;
pub const mjtTexture__mjTEXTURE_SKYBOX: mjtTexture_ = 2;
pub type mjtTexture_ = ::std::os::raw::c_uint;
pub use self::mjtTexture_ as mjtTexture;
pub const mjtTextureRole__mjTEXROLE_USER: mjtTextureRole_ = 0;
pub const mjtTextureRole__mjTEXROLE_RGB: mjtTextureRole_ = 1;
pub const mjtTextureRole__mjTEXROLE_OCCLUSION: mjtTextureRole_ = 2;
pub const mjtTextureRole__mjTEXROLE_ROUGHNESS: mjtTextureRole_ = 3;
pub const mjtTextureRole__mjTEXROLE_METALLIC: mjtTextureRole_ = 4;
pub const mjtTextureRole__mjTEXROLE_NORMAL: mjtTextureRole_ = 5;
pub const mjtTextureRole__mjTEXROLE_OPACITY: mjtTextureRole_ = 6;
pub const mjtTextureRole__mjTEXROLE_EMISSIVE: mjtTextureRole_ = 7;
pub const mjtTextureRole__mjTEXROLE_RGBA: mjtTextureRole_ = 8;
pub const mjtTextureRole__mjTEXROLE_ORM: mjtTextureRole_ = 9;
pub const mjtTextureRole__mjNTEXROLE: mjtTextureRole_ = 10;
pub type mjtTextureRole_ = ::std::os::raw::c_uint;
pub use self::mjtTextureRole_ as mjtTextureRole;
pub const mjtIntegrator__mjINT_EULER: mjtIntegrator_ = 0;
pub const mjtIntegrator__mjINT_RK4: mjtIntegrator_ = 1;
pub const mjtIntegrator__mjINT_IMPLICIT: mjtIntegrator_ = 2;
pub const mjtIntegrator__mjINT_IMPLICITFAST: mjtIntegrator_ = 3;
pub type mjtIntegrator_ = ::std::os::raw::c_uint;
pub use self::mjtIntegrator_ as mjtIntegrator;
pub const mjtCone__mjCONE_PYRAMIDAL: mjtCone_ = 0;
pub const mjtCone__mjCONE_ELLIPTIC: mjtCone_ = 1;
pub type mjtCone_ = ::std::os::raw::c_uint;
pub use self::mjtCone_ as mjtCone;
pub const mjtJacobian__mjJAC_DENSE: mjtJacobian_ = 0;
pub const mjtJacobian__mjJAC_SPARSE: mjtJacobian_ = 1;
pub const mjtJacobian__mjJAC_AUTO: mjtJacobian_ = 2;
pub type mjtJacobian_ = ::std::os::raw::c_uint;
pub use self::mjtJacobian_ as mjtJacobian;
pub const mjtSolver__mjSOL_PGS: mjtSolver_ = 0;
pub const mjtSolver__mjSOL_CG: mjtSolver_ = 1;
pub const mjtSolver__mjSOL_NEWTON: mjtSolver_ = 2;
pub type mjtSolver_ = ::std::os::raw::c_uint;
pub use self::mjtSolver_ as mjtSolver;
pub const mjtEq__mjEQ_CONNECT: mjtEq_ = 0;
pub const mjtEq__mjEQ_WELD: mjtEq_ = 1;
pub const mjtEq__mjEQ_JOINT: mjtEq_ = 2;
pub const mjtEq__mjEQ_TENDON: mjtEq_ = 3;
pub const mjtEq__mjEQ_FLEX: mjtEq_ = 4;
pub const mjtEq__mjEQ_DISTANCE: mjtEq_ = 5;
pub type mjtEq_ = ::std::os::raw::c_uint;
pub use self::mjtEq_ as mjtEq;
pub const mjtWrap__mjWRAP_NONE: mjtWrap_ = 0;
pub const mjtWrap__mjWRAP_JOINT: mjtWrap_ = 1;
pub const mjtWrap__mjWRAP_PULLEY: mjtWrap_ = 2;
pub const mjtWrap__mjWRAP_SITE: mjtWrap_ = 3;
pub const mjtWrap__mjWRAP_SPHERE: mjtWrap_ = 4;
pub const mjtWrap__mjWRAP_CYLINDER: mjtWrap_ = 5;
pub type mjtWrap_ = ::std::os::raw::c_uint;
pub use self::mjtWrap_ as mjtWrap;
pub const mjtTrn__mjTRN_JOINT: mjtTrn_ = 0;
pub const mjtTrn__mjTRN_JOINTINPARENT: mjtTrn_ = 1;
pub const mjtTrn__mjTRN_SLIDERCRANK: mjtTrn_ = 2;
pub const mjtTrn__mjTRN_TENDON: mjtTrn_ = 3;
pub const mjtTrn__mjTRN_SITE: mjtTrn_ = 4;
pub const mjtTrn__mjTRN_BODY: mjtTrn_ = 5;
pub const mjtTrn__mjTRN_UNDEFINED: mjtTrn_ = 1000;
pub type mjtTrn_ = ::std::os::raw::c_uint;
pub use self::mjtTrn_ as mjtTrn;
pub const mjtDyn__mjDYN_NONE: mjtDyn_ = 0;
pub const mjtDyn__mjDYN_INTEGRATOR: mjtDyn_ = 1;
pub const mjtDyn__mjDYN_FILTER: mjtDyn_ = 2;
pub const mjtDyn__mjDYN_FILTEREXACT: mjtDyn_ = 3;
pub const mjtDyn__mjDYN_MUSCLE: mjtDyn_ = 4;
pub const mjtDyn__mjDYN_USER: mjtDyn_ = 5;
pub type mjtDyn_ = ::std::os::raw::c_uint;
pub use self::mjtDyn_ as mjtDyn;
pub const mjtGain__mjGAIN_FIXED: mjtGain_ = 0;
pub const mjtGain__mjGAIN_AFFINE: mjtGain_ = 1;
pub const mjtGain__mjGAIN_MUSCLE: mjtGain_ = 2;
pub const mjtGain__mjGAIN_USER: mjtGain_ = 3;
pub type mjtGain_ = ::std::os::raw::c_uint;
pub use self::mjtGain_ as mjtGain;
pub const mjtBias__mjBIAS_NONE: mjtBias_ = 0;
pub const mjtBias__mjBIAS_AFFINE: mjtBias_ = 1;
pub const mjtBias__mjBIAS_MUSCLE: mjtBias_ = 2;
pub const mjtBias__mjBIAS_USER: mjtBias_ = 3;
pub type mjtBias_ = ::std::os::raw::c_uint;
pub use self::mjtBias_ as mjtBias;
pub const mjtObj__mjOBJ_UNKNOWN: mjtObj_ = 0;
pub const mjtObj__mjOBJ_BODY: mjtObj_ = 1;
pub const mjtObj__mjOBJ_XBODY: mjtObj_ = 2;
pub const mjtObj__mjOBJ_JOINT: mjtObj_ = 3;
pub const mjtObj__mjOBJ_DOF: mjtObj_ = 4;
pub const mjtObj__mjOBJ_GEOM: mjtObj_ = 5;
pub const mjtObj__mjOBJ_SITE: mjtObj_ = 6;
pub const mjtObj__mjOBJ_CAMERA: mjtObj_ = 7;
pub const mjtObj__mjOBJ_LIGHT: mjtObj_ = 8;
pub const mjtObj__mjOBJ_FLEX: mjtObj_ = 9;
pub const mjtObj__mjOBJ_MESH: mjtObj_ = 10;
pub const mjtObj__mjOBJ_SKIN: mjtObj_ = 11;
pub const mjtObj__mjOBJ_HFIELD: mjtObj_ = 12;
pub const mjtObj__mjOBJ_TEXTURE: mjtObj_ = 13;
pub const mjtObj__mjOBJ_MATERIAL: mjtObj_ = 14;
pub const mjtObj__mjOBJ_PAIR: mjtObj_ = 15;
pub const mjtObj__mjOBJ_EXCLUDE: mjtObj_ = 16;
pub const mjtObj__mjOBJ_EQUALITY: mjtObj_ = 17;
pub const mjtObj__mjOBJ_TENDON: mjtObj_ = 18;
pub const mjtObj__mjOBJ_ACTUATOR: mjtObj_ = 19;
pub const mjtObj__mjOBJ_SENSOR: mjtObj_ = 20;
pub const mjtObj__mjOBJ_NUMERIC: mjtObj_ = 21;
pub const mjtObj__mjOBJ_TEXT: mjtObj_ = 22;
pub const mjtObj__mjOBJ_TUPLE: mjtObj_ = 23;
pub const mjtObj__mjOBJ_KEY: mjtObj_ = 24;
pub const mjtObj__mjOBJ_PLUGIN: mjtObj_ = 25;
pub const mjtObj__mjNOBJECT: mjtObj_ = 26;
pub const mjtObj__mjOBJ_FRAME: mjtObj_ = 100;
pub type mjtObj_ = ::std::os::raw::c_uint;
pub use self::mjtObj_ as mjtObj;
pub const mjtConstraint__mjCNSTR_EQUALITY: mjtConstraint_ = 0;
pub const mjtConstraint__mjCNSTR_FRICTION_DOF: mjtConstraint_ = 1;
pub const mjtConstraint__mjCNSTR_FRICTION_TENDON: mjtConstraint_ = 2;
pub const mjtConstraint__mjCNSTR_LIMIT_JOINT: mjtConstraint_ = 3;
pub const mjtConstraint__mjCNSTR_LIMIT_TENDON: mjtConstraint_ = 4;
pub const mjtConstraint__mjCNSTR_CONTACT_FRICTIONLESS: mjtConstraint_ = 5;
pub const mjtConstraint__mjCNSTR_CONTACT_PYRAMIDAL: mjtConstraint_ = 6;
pub const mjtConstraint__mjCNSTR_CONTACT_ELLIPTIC: mjtConstraint_ = 7;
pub type mjtConstraint_ = ::std::os::raw::c_uint;
pub use self::mjtConstraint_ as mjtConstraint;
pub const mjtConstraintState__mjCNSTRSTATE_SATISFIED: mjtConstraintState_ = 0;
pub const mjtConstraintState__mjCNSTRSTATE_QUADRATIC: mjtConstraintState_ = 1;
pub const mjtConstraintState__mjCNSTRSTATE_LINEARNEG: mjtConstraintState_ = 2;
pub const mjtConstraintState__mjCNSTRSTATE_LINEARPOS: mjtConstraintState_ = 3;
pub const mjtConstraintState__mjCNSTRSTATE_CONE: mjtConstraintState_ = 4;
pub type mjtConstraintState_ = ::std::os::raw::c_uint;
pub use self::mjtConstraintState_ as mjtConstraintState;
pub const mjtSensor__mjSENS_TOUCH: mjtSensor_ = 0;
pub const mjtSensor__mjSENS_ACCELEROMETER: mjtSensor_ = 1;
pub const mjtSensor__mjSENS_VELOCIMETER: mjtSensor_ = 2;
pub const mjtSensor__mjSENS_GYRO: mjtSensor_ = 3;
pub const mjtSensor__mjSENS_FORCE: mjtSensor_ = 4;
pub const mjtSensor__mjSENS_TORQUE: mjtSensor_ = 5;
pub const mjtSensor__mjSENS_MAGNETOMETER: mjtSensor_ = 6;
pub const mjtSensor__mjSENS_RANGEFINDER: mjtSensor_ = 7;
pub const mjtSensor__mjSENS_CAMPROJECTION: mjtSensor_ = 8;
pub const mjtSensor__mjSENS_JOINTPOS: mjtSensor_ = 9;
pub const mjtSensor__mjSENS_JOINTVEL: mjtSensor_ = 10;
pub const mjtSensor__mjSENS_TENDONPOS: mjtSensor_ = 11;
pub const mjtSensor__mjSENS_TENDONVEL: mjtSensor_ = 12;
pub const mjtSensor__mjSENS_ACTUATORPOS: mjtSensor_ = 13;
pub const mjtSensor__mjSENS_ACTUATORVEL: mjtSensor_ = 14;
pub const mjtSensor__mjSENS_ACTUATORFRC: mjtSensor_ = 15;
pub const mjtSensor__mjSENS_JOINTACTFRC: mjtSensor_ = 16;
pub const mjtSensor__mjSENS_BALLQUAT: mjtSensor_ = 17;
pub const mjtSensor__mjSENS_BALLANGVEL: mjtSensor_ = 18;
pub const mjtSensor__mjSENS_JOINTLIMITPOS: mjtSensor_ = 19;
pub const mjtSensor__mjSENS_JOINTLIMITVEL: mjtSensor_ = 20;
pub const mjtSensor__mjSENS_JOINTLIMITFRC: mjtSensor_ = 21;
pub const mjtSensor__mjSENS_TENDONLIMITPOS: mjtSensor_ = 22;
pub const mjtSensor__mjSENS_TENDONLIMITVEL: mjtSensor_ = 23;
pub const mjtSensor__mjSENS_TENDONLIMITFRC: mjtSensor_ = 24;
pub const mjtSensor__mjSENS_FRAMEPOS: mjtSensor_ = 25;
pub const mjtSensor__mjSENS_FRAMEQUAT: mjtSensor_ = 26;
pub const mjtSensor__mjSENS_FRAMEXAXIS: mjtSensor_ = 27;
pub const mjtSensor__mjSENS_FRAMEYAXIS: mjtSensor_ = 28;
pub const mjtSensor__mjSENS_FRAMEZAXIS: mjtSensor_ = 29;
pub const mjtSensor__mjSENS_FRAMELINVEL: mjtSensor_ = 30;
pub const mjtSensor__mjSENS_FRAMEANGVEL: mjtSensor_ = 31;
pub const mjtSensor__mjSENS_FRAMELINACC: mjtSensor_ = 32;
pub const mjtSensor__mjSENS_FRAMEANGACC: mjtSensor_ = 33;
pub const mjtSensor__mjSENS_SUBTREECOM: mjtSensor_ = 34;
pub const mjtSensor__mjSENS_SUBTREELINVEL: mjtSensor_ = 35;
pub const mjtSensor__mjSENS_SUBTREEANGMOM: mjtSensor_ = 36;
pub const mjtSensor__mjSENS_GEOMDIST: mjtSensor_ = 37;
pub const mjtSensor__mjSENS_GEOMNORMAL: mjtSensor_ = 38;
pub const mjtSensor__mjSENS_GEOMFROMTO: mjtSensor_ = 39;
pub const mjtSensor__mjSENS_CLOCK: mjtSensor_ = 40;
pub const mjtSensor__mjSENS_PLUGIN: mjtSensor_ = 41;
pub const mjtSensor__mjSENS_USER: mjtSensor_ = 42;
pub type mjtSensor_ = ::std::os::raw::c_uint;
pub use self::mjtSensor_ as mjtSensor;
pub const mjtStage__mjSTAGE_NONE: mjtStage_ = 0;
pub const mjtStage__mjSTAGE_POS: mjtStage_ = 1;
pub const mjtStage__mjSTAGE_VEL: mjtStage_ = 2;
pub const mjtStage__mjSTAGE_ACC: mjtStage_ = 3;
pub type mjtStage_ = ::std::os::raw::c_uint;
pub use self::mjtStage_ as mjtStage;
pub const mjtDataType__mjDATATYPE_REAL: mjtDataType_ = 0;
pub const mjtDataType__mjDATATYPE_POSITIVE: mjtDataType_ = 1;
pub const mjtDataType__mjDATATYPE_AXIS: mjtDataType_ = 2;
pub const mjtDataType__mjDATATYPE_QUATERNION: mjtDataType_ = 3;
pub type mjtDataType_ = ::std::os::raw::c_uint;
pub use self::mjtDataType_ as mjtDataType;
pub const mjtSameFrame__mjSAMEFRAME_NONE: mjtSameFrame_ = 0;
pub const mjtSameFrame__mjSAMEFRAME_BODY: mjtSameFrame_ = 1;
pub const mjtSameFrame__mjSAMEFRAME_INERTIA: mjtSameFrame_ = 2;
pub const mjtSameFrame__mjSAMEFRAME_BODYROT: mjtSameFrame_ = 3;
pub const mjtSameFrame__mjSAMEFRAME_INERTIAROT: mjtSameFrame_ = 4;
pub type mjtSameFrame_ = ::std::os::raw::c_uint;
pub use self::mjtSameFrame_ as mjtSameFrame;
pub const mjtLRMode__mjLRMODE_NONE: mjtLRMode_ = 0;
pub const mjtLRMode__mjLRMODE_MUSCLE: mjtLRMode_ = 1;
pub const mjtLRMode__mjLRMODE_MUSCLEUSER: mjtLRMode_ = 2;
pub const mjtLRMode__mjLRMODE_ALL: mjtLRMode_ = 3;
pub type mjtLRMode_ = ::std::os::raw::c_uint;
pub use self::mjtLRMode_ as mjtLRMode;
pub const mjtFlexSelf__mjFLEXSELF_NONE: mjtFlexSelf_ = 0;
pub const mjtFlexSelf__mjFLEXSELF_NARROW: mjtFlexSelf_ = 1;
pub const mjtFlexSelf__mjFLEXSELF_BVH: mjtFlexSelf_ = 2;
pub const mjtFlexSelf__mjFLEXSELF_SAP: mjtFlexSelf_ = 3;
pub const mjtFlexSelf__mjFLEXSELF_AUTO: mjtFlexSelf_ = 4;
pub type mjtFlexSelf_ = ::std::os::raw::c_uint;
pub use self::mjtFlexSelf_ as mjtFlexSelf;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mjLROpt_ {
    pub mode: ::std::os::raw::c_int,
    pub useexisting: ::std::os::raw::c_int,
    pub uselimit: ::std::os::raw::c_int,
    pub accel: mjtNum,
    pub maxforce: mjtNum,
    pub timeconst: mjtNum,
    pub timestep: mjtNum,
    pub inttotal: mjtNum,
    pub interval: mjtNum,
    pub tolrange: mjtNum,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjLROpt_"][::std::mem::size_of::<mjLROpt_>() - 72usize];
    ["Alignment of mjLROpt_"][::std::mem::align_of::<mjLROpt_>() - 8usize];
    ["Offset of field: mjLROpt_::mode"][::std::mem::offset_of!(mjLROpt_, mode) - 0usize];
    ["Offset of field: mjLROpt_::useexisting"]
        [::std::mem::offset_of!(mjLROpt_, useexisting) - 4usize];
    ["Offset of field: mjLROpt_::uselimit"][::std::mem::offset_of!(mjLROpt_, uselimit) - 8usize];
    ["Offset of field: mjLROpt_::accel"][::std::mem::offset_of!(mjLROpt_, accel) - 16usize];
    ["Offset of field: mjLROpt_::maxforce"][::std::mem::offset_of!(mjLROpt_, maxforce) - 24usize];
    ["Offset of field: mjLROpt_::timeconst"][::std::mem::offset_of!(mjLROpt_, timeconst) - 32usize];
    ["Offset of field: mjLROpt_::timestep"][::std::mem::offset_of!(mjLROpt_, timestep) - 40usize];
    ["Offset of field: mjLROpt_::inttotal"][::std::mem::offset_of!(mjLROpt_, inttotal) - 48usize];
    ["Offset of field: mjLROpt_::interval"][::std::mem::offset_of!(mjLROpt_, interval) - 56usize];
    ["Offset of field: mjLROpt_::tolrange"][::std::mem::offset_of!(mjLROpt_, tolrange) - 64usize];
};
pub type mjLROpt = mjLROpt_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mjVFS_ {
    pub impl_: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjVFS_"][::std::mem::size_of::<mjVFS_>() - 8usize];
    ["Alignment of mjVFS_"][::std::mem::align_of::<mjVFS_>() - 8usize];
    ["Offset of field: mjVFS_::impl_"][::std::mem::offset_of!(mjVFS_, impl_) - 0usize];
};
impl Default for mjVFS_ {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mjVFS = mjVFS_;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mjOption_ {
    pub timestep: mjtNum,
    pub apirate: mjtNum,
    pub impratio: mjtNum,
    pub tolerance: mjtNum,
    pub ls_tolerance: mjtNum,
    pub noslip_tolerance: mjtNum,
    pub ccd_tolerance: mjtNum,
    pub gravity: [mjtNum; 3usize],
    pub wind: [mjtNum; 3usize],
    pub magnetic: [mjtNum; 3usize],
    pub density: mjtNum,
    pub viscosity: mjtNum,
    pub o_margin: mjtNum,
    pub o_solref: [mjtNum; 2usize],
    pub o_solimp: [mjtNum; 5usize],
    pub o_friction: [mjtNum; 5usize],
    pub integrator: ::std::os::raw::c_int,
    pub cone: ::std::os::raw::c_int,
    pub jacobian: ::std::os::raw::c_int,
    pub solver: ::std::os::raw::c_int,
    pub iterations: ::std::os::raw::c_int,
    pub ls_iterations: ::std::os::raw::c_int,
    pub noslip_iterations: ::std::os::raw::c_int,
    pub ccd_iterations: ::std::os::raw::c_int,
    pub disableflags: ::std::os::raw::c_int,
    pub enableflags: ::std::os::raw::c_int,
    pub disableactuator: ::std::os::raw::c_int,
    pub sdf_initpoints: ::std::os::raw::c_int,
    pub sdf_iterations: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjOption_"][::std::mem::size_of::<mjOption_>() - 304usize];
    ["Alignment of mjOption_"][::std::mem::align_of::<mjOption_>() - 8usize];
    ["Offset of field: mjOption_::timestep"][::std::mem::offset_of!(mjOption_, timestep) - 0usize];
    ["Offset of field: mjOption_::apirate"][::std::mem::offset_of!(mjOption_, apirate) - 8usize];
    ["Offset of field: mjOption_::impratio"][::std::mem::offset_of!(mjOption_, impratio) - 16usize];
    ["Offset of field: mjOption_::tolerance"]
        [::std::mem::offset_of!(mjOption_, tolerance) - 24usize];
    ["Offset of field: mjOption_::ls_tolerance"]
        [::std::mem::offset_of!(mjOption_, ls_tolerance) - 32usize];
    ["Offset of field: mjOption_::noslip_tolerance"]
        [::std::mem::offset_of!(mjOption_, noslip_tolerance) - 40usize];
    ["Offset of field: mjOption_::ccd_tolerance"]
        [::std::mem::offset_of!(mjOption_, ccd_tolerance) - 48usize];
    ["Offset of field: mjOption_::gravity"][::std::mem::offset_of!(mjOption_, gravity) - 56usize];
    ["Offset of field: mjOption_::wind"][::std::mem::offset_of!(mjOption_, wind) - 80usize];
    ["Offset of field: mjOption_::magnetic"]
        [::std::mem::offset_of!(mjOption_, magnetic) - 104usize];
    ["Offset of field: mjOption_::density"][::std::mem::offset_of!(mjOption_, density) - 128usize];
    ["Offset of field: mjOption_::viscosity"]
        [::std::mem::offset_of!(mjOption_, viscosity) - 136usize];
    ["Offset of field: mjOption_::o_margin"]
        [::std::mem::offset_of!(mjOption_, o_margin) - 144usize];
    ["Offset of field: mjOption_::o_solref"]
        [::std::mem::offset_of!(mjOption_, o_solref) - 152usize];
    ["Offset of field: mjOption_::o_solimp"]
        [::std::mem::offset_of!(mjOption_, o_solimp) - 168usize];
    ["Offset of field: mjOption_::o_friction"]
        [::std::mem::offset_of!(mjOption_, o_friction) - 208usize];
    ["Offset of field: mjOption_::integrator"]
        [::std::mem::offset_of!(mjOption_, integrator) - 248usize];
    ["Offset of field: mjOption_::cone"][::std::mem::offset_of!(mjOption_, cone) - 252usize];
    ["Offset of field: mjOption_::jacobian"]
        [::std::mem::offset_of!(mjOption_, jacobian) - 256usize];
    ["Offset of field: mjOption_::solver"][::std::mem::offset_of!(mjOption_, solver) - 260usize];
    ["Offset of field: mjOption_::iterations"]
        [::std::mem::offset_of!(mjOption_, iterations) - 264usize];
    ["Offset of field: mjOption_::ls_iterations"]
        [::std::mem::offset_of!(mjOption_, ls_iterations) - 268usize];
    ["Offset of field: mjOption_::noslip_iterations"]
        [::std::mem::offset_of!(mjOption_, noslip_iterations) - 272usize];
    ["Offset of field: mjOption_::ccd_iterations"]
        [::std::mem::offset_of!(mjOption_, ccd_iterations) - 276usize];
    ["Offset of field: mjOption_::disableflags"]
        [::std::mem::offset_of!(mjOption_, disableflags) - 280usize];
    ["Offset of field: mjOption_::enableflags"]
        [::std::mem::offset_of!(mjOption_, enableflags) - 284usize];
    ["Offset of field: mjOption_::disableactuator"]
        [::std::mem::offset_of!(mjOption_, disableactuator) - 288usize];
    ["Offset of field: mjOption_::sdf_initpoints"]
        [::std::mem::offset_of!(mjOption_, sdf_initpoints) - 292usize];
    ["Offset of field: mjOption_::sdf_iterations"]
        [::std::mem::offset_of!(mjOption_, sdf_iterations) - 296usize];
};
pub type mjOption = mjOption_;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mjVisual_ {
    pub global: mjVisual___bindgen_ty_1,
    pub quality: mjVisual___bindgen_ty_2,
    pub headlight: mjVisual___bindgen_ty_3,
    pub map: mjVisual___bindgen_ty_4,
    pub scale: mjVisual___bindgen_ty_5,
    pub rgba: mjVisual___bindgen_ty_6,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mjVisual___bindgen_ty_1 {
    pub orthographic: ::std::os::raw::c_int,
    pub fovy: f32,
    pub ipd: f32,
    pub azimuth: f32,
    pub elevation: f32,
    pub linewidth: f32,
    pub glow: f32,
    pub realtime: f32,
    pub offwidth: ::std::os::raw::c_int,
    pub offheight: ::std::os::raw::c_int,
    pub ellipsoidinertia: ::std::os::raw::c_int,
    pub bvactive: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjVisual___bindgen_ty_1"][::std::mem::size_of::<mjVisual___bindgen_ty_1>() - 48usize];
    ["Alignment of mjVisual___bindgen_ty_1"]
        [::std::mem::align_of::<mjVisual___bindgen_ty_1>() - 4usize];
    ["Offset of field: mjVisual___bindgen_ty_1::orthographic"]
        [::std::mem::offset_of!(mjVisual___bindgen_ty_1, orthographic) - 0usize];
    ["Offset of field: mjVisual___bindgen_ty_1::fovy"]
        [::std::mem::offset_of!(mjVisual___bindgen_ty_1, fovy) - 4usize];
    ["Offset of field: mjVisual___bindgen_ty_1::ipd"]
        [::std::mem::offset_of!(mjVisual___bindgen_ty_1, ipd) - 8usize];
    ["Offset of field: mjVisual___bindgen_ty_1::azimuth"]
        [::std::mem::offset_of!(mjVisual___bindgen_ty_1, azimuth) - 12usize];
    ["Offset of field: mjVisual___bindgen_ty_1::elevation"]
        [::std::mem::offset_of!(mjVisual___bindgen_ty_1, elevation) - 16usize];
    ["Offset of field: mjVisual___bindgen_ty_1::linewidth"]
        [::std::mem::offset_of!(mjVisual___bindgen_ty_1, linewidth) - 20usize];
    ["Offset of field: mjVisual___bindgen_ty_1::glow"]
        [::std::mem::offset_of!(mjVisual___bindgen_ty_1, glow) - 24usize];
    ["Offset of field: mjVisual___bindgen_ty_1::realtime"]
        [::std::mem::offset_of!(mjVisual___bindgen_ty_1, realtime) - 28usize];
    ["Offset of field: mjVisual___bindgen_ty_1::offwidth"]
        [::std::mem::offset_of!(mjVisual___bindgen_ty_1, offwidth) - 32usize];
    ["Offset of field: mjVisual___bindgen_ty_1::offheight"]
        [::std::mem::offset_of!(mjVisual___bindgen_ty_1, offheight) - 36usize];
    ["Offset of field: mjVisual___bindgen_ty_1::ellipsoidinertia"]
        [::std::mem::offset_of!(mjVisual___bindgen_ty_1, ellipsoidinertia) - 40usize];
    ["Offset of field: mjVisual___bindgen_ty_1::bvactive"]
        [::std::mem::offset_of!(mjVisual___bindgen_ty_1, bvactive) - 44usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mjVisual___bindgen_ty_2 {
    pub shadowsize: ::std::os::raw::c_int,
    pub offsamples: ::std::os::raw::c_int,
    pub numslices: ::std::os::raw::c_int,
    pub numstacks: ::std::os::raw::c_int,
    pub numquads: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjVisual___bindgen_ty_2"][::std::mem::size_of::<mjVisual___bindgen_ty_2>() - 20usize];
    ["Alignment of mjVisual___bindgen_ty_2"]
        [::std::mem::align_of::<mjVisual___bindgen_ty_2>() - 4usize];
    ["Offset of field: mjVisual___bindgen_ty_2::shadowsize"]
        [::std::mem::offset_of!(mjVisual___bindgen_ty_2, shadowsize) - 0usize];
    ["Offset of field: mjVisual___bindgen_ty_2::offsamples"]
        [::std::mem::offset_of!(mjVisual___bindgen_ty_2, offsamples) - 4usize];
    ["Offset of field: mjVisual___bindgen_ty_2::numslices"]
        [::std::mem::offset_of!(mjVisual___bindgen_ty_2, numslices) - 8usize];
    ["Offset of field: mjVisual___bindgen_ty_2::numstacks"]
        [::std::mem::offset_of!(mjVisual___bindgen_ty_2, numstacks) - 12usize];
    ["Offset of field: mjVisual___bindgen_ty_2::numquads"]
        [::std::mem::offset_of!(mjVisual___bindgen_ty_2, numquads) - 16usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mjVisual___bindgen_ty_3 {
    pub ambient: [f32; 3usize],
    pub diffuse: [f32; 3usize],
    pub specular: [f32; 3usize],
    pub active: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjVisual___bindgen_ty_3"][::std::mem::size_of::<mjVisual___bindgen_ty_3>() - 40usize];
    ["Alignment of mjVisual___bindgen_ty_3"]
        [::std::mem::align_of::<mjVisual___bindgen_ty_3>() - 4usize];
    ["Offset of field: mjVisual___bindgen_ty_3::ambient"]
        [::std::mem::offset_of!(mjVisual___bindgen_ty_3, ambient) - 0usize];
    ["Offset of field: mjVisual___bindgen_ty_3::diffuse"]
        [::std::mem::offset_of!(mjVisual___bindgen_ty_3, diffuse) - 12usize];
    ["Offset of field: mjVisual___bindgen_ty_3::specular"]
        [::std::mem::offset_of!(mjVisual___bindgen_ty_3, specular) - 24usize];
    ["Offset of field: mjVisual___bindgen_ty_3::active"]
        [::std::mem::offset_of!(mjVisual___bindgen_ty_3, active) - 36usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mjVisual___bindgen_ty_4 {
    pub stiffness: f32,
    pub stiffnessrot: f32,
    pub force: f32,
    pub torque: f32,
    pub alpha: f32,
    pub fogstart: f32,
    pub fogend: f32,
    pub znear: f32,
    pub zfar: f32,
    pub haze: f32,
    pub shadowclip: f32,
    pub shadowscale: f32,
    pub actuatortendon: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjVisual___bindgen_ty_4"][::std::mem::size_of::<mjVisual___bindgen_ty_4>() - 52usize];
    ["Alignment of mjVisual___bindgen_ty_4"]
        [::std::mem::align_of::<mjVisual___bindgen_ty_4>() - 4usize];
    ["Offset of field: mjVisual___bindgen_ty_4::stiffness"]
        [::std::mem::offset_of!(mjVisual___bindgen_ty_4, stiffness) - 0usize];
    ["Offset of field: mjVisual___bindgen_ty_4::stiffnessrot"]
        [::std::mem::offset_of!(mjVisual___bindgen_ty_4, stiffnessrot) - 4usize];
    ["Offset of field: mjVisual___bindgen_ty_4::force"]
        [::std::mem::offset_of!(mjVisual___bindgen_ty_4, force) - 8usize];
    ["Offset of field: mjVisual___bindgen_ty_4::torque"]
        [::std::mem::offset_of!(mjVisual___bindgen_ty_4, torque) - 12usize];
    ["Offset of field: mjVisual___bindgen_ty_4::alpha"]
        [::std::mem::offset_of!(mjVisual___bindgen_ty_4, alpha) - 16usize];
    ["Offset of field: mjVisual___bindgen_ty_4::fogstart"]
        [::std::mem::offset_of!(mjVisual___bindgen_ty_4, fogstart) - 20usize];
    ["Offset of field: mjVisual___bindgen_ty_4::fogend"]
        [::std::mem::offset_of!(mjVisual___bindgen_ty_4, fogend) - 24usize];
    ["Offset of field: mjVisual___bindgen_ty_4::znear"]
        [::std::mem::offset_of!(mjVisual___bindgen_ty_4, znear) - 28usize];
    ["Offset of field: mjVisual___bindgen_ty_4::zfar"]
        [::std::mem::offset_of!(mjVisual___bindgen_ty_4, zfar) - 32usize];
    ["Offset of field: mjVisual___bindgen_ty_4::haze"]
        [::std::mem::offset_of!(mjVisual___bindgen_ty_4, haze) - 36usize];
    ["Offset of field: mjVisual___bindgen_ty_4::shadowclip"]
        [::std::mem::offset_of!(mjVisual___bindgen_ty_4, shadowclip) - 40usize];
    ["Offset of field: mjVisual___bindgen_ty_4::shadowscale"]
        [::std::mem::offset_of!(mjVisual___bindgen_ty_4, shadowscale) - 44usize];
    ["Offset of field: mjVisual___bindgen_ty_4::actuatortendon"]
        [::std::mem::offset_of!(mjVisual___bindgen_ty_4, actuatortendon) - 48usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mjVisual___bindgen_ty_5 {
    pub forcewidth: f32,
    pub contactwidth: f32,
    pub contactheight: f32,
    pub connect: f32,
    pub com: f32,
    pub camera: f32,
    pub light: f32,
    pub selectpoint: f32,
    pub jointlength: f32,
    pub jointwidth: f32,
    pub actuatorlength: f32,
    pub actuatorwidth: f32,
    pub framelength: f32,
    pub framewidth: f32,
    pub constraint: f32,
    pub slidercrank: f32,
    pub frustum: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjVisual___bindgen_ty_5"][::std::mem::size_of::<mjVisual___bindgen_ty_5>() - 68usize];
    ["Alignment of mjVisual___bindgen_ty_5"]
        [::std::mem::align_of::<mjVisual___bindgen_ty_5>() - 4usize];
    ["Offset of field: mjVisual___bindgen_ty_5::forcewidth"]
        [::std::mem::offset_of!(mjVisual___bindgen_ty_5, forcewidth) - 0usize];
    ["Offset of field: mjVisual___bindgen_ty_5::contactwidth"]
        [::std::mem::offset_of!(mjVisual___bindgen_ty_5, contactwidth) - 4usize];
    ["Offset of field: mjVisual___bindgen_ty_5::contactheight"]
        [::std::mem::offset_of!(mjVisual___bindgen_ty_5, contactheight) - 8usize];
    ["Offset of field: mjVisual___bindgen_ty_5::connect"]
        [::std::mem::offset_of!(mjVisual___bindgen_ty_5, connect) - 12usize];
    ["Offset of field: mjVisual___bindgen_ty_5::com"]
        [::std::mem::offset_of!(mjVisual___bindgen_ty_5, com) - 16usize];
    ["Offset of field: mjVisual___bindgen_ty_5::camera"]
        [::std::mem::offset_of!(mjVisual___bindgen_ty_5, camera) - 20usize];
    ["Offset of field: mjVisual___bindgen_ty_5::light"]
        [::std::mem::offset_of!(mjVisual___bindgen_ty_5, light) - 24usize];
    ["Offset of field: mjVisual___bindgen_ty_5::selectpoint"]
        [::std::mem::offset_of!(mjVisual___bindgen_ty_5, selectpoint) - 28usize];
    ["Offset of field: mjVisual___bindgen_ty_5::jointlength"]
        [::std::mem::offset_of!(mjVisual___bindgen_ty_5, jointlength) - 32usize];
    ["Offset of field: mjVisual___bindgen_ty_5::jointwidth"]
        [::std::mem::offset_of!(mjVisual___bindgen_ty_5, jointwidth) - 36usize];
    ["Offset of field: mjVisual___bindgen_ty_5::actuatorlength"]
        [::std::mem::offset_of!(mjVisual___bindgen_ty_5, actuatorlength) - 40usize];
    ["Offset of field: mjVisual___bindgen_ty_5::actuatorwidth"]
        [::std::mem::offset_of!(mjVisual___bindgen_ty_5, actuatorwidth) - 44usize];
    ["Offset of field: mjVisual___bindgen_ty_5::framelength"]
        [::std::mem::offset_of!(mjVisual___bindgen_ty_5, framelength) - 48usize];
    ["Offset of field: mjVisual___bindgen_ty_5::framewidth"]
        [::std::mem::offset_of!(mjVisual___bindgen_ty_5, framewidth) - 52usize];
    ["Offset of field: mjVisual___bindgen_ty_5::constraint"]
        [::std::mem::offset_of!(mjVisual___bindgen_ty_5, constraint) - 56usize];
    ["Offset of field: mjVisual___bindgen_ty_5::slidercrank"]
        [::std::mem::offset_of!(mjVisual___bindgen_ty_5, slidercrank) - 60usize];
    ["Offset of field: mjVisual___bindgen_ty_5::frustum"]
        [::std::mem::offset_of!(mjVisual___bindgen_ty_5, frustum) - 64usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mjVisual___bindgen_ty_6 {
    pub fog: [f32; 4usize],
    pub haze: [f32; 4usize],
    pub force: [f32; 4usize],
    pub inertia: [f32; 4usize],
    pub joint: [f32; 4usize],
    pub actuator: [f32; 4usize],
    pub actuatornegative: [f32; 4usize],
    pub actuatorpositive: [f32; 4usize],
    pub com: [f32; 4usize],
    pub camera: [f32; 4usize],
    pub light: [f32; 4usize],
    pub selectpoint: [f32; 4usize],
    pub connect: [f32; 4usize],
    pub contactpoint: [f32; 4usize],
    pub contactforce: [f32; 4usize],
    pub contactfriction: [f32; 4usize],
    pub contacttorque: [f32; 4usize],
    pub contactgap: [f32; 4usize],
    pub rangefinder: [f32; 4usize],
    pub constraint: [f32; 4usize],
    pub slidercrank: [f32; 4usize],
    pub crankbroken: [f32; 4usize],
    pub frustum: [f32; 4usize],
    pub bv: [f32; 4usize],
    pub bvactive: [f32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjVisual___bindgen_ty_6"]
        [::std::mem::size_of::<mjVisual___bindgen_ty_6>() - 400usize];
    ["Alignment of mjVisual___bindgen_ty_6"]
        [::std::mem::align_of::<mjVisual___bindgen_ty_6>() - 4usize];
    ["Offset of field: mjVisual___bindgen_ty_6::fog"]
        [::std::mem::offset_of!(mjVisual___bindgen_ty_6, fog) - 0usize];
    ["Offset of field: mjVisual___bindgen_ty_6::haze"]
        [::std::mem::offset_of!(mjVisual___bindgen_ty_6, haze) - 16usize];
    ["Offset of field: mjVisual___bindgen_ty_6::force"]
        [::std::mem::offset_of!(mjVisual___bindgen_ty_6, force) - 32usize];
    ["Offset of field: mjVisual___bindgen_ty_6::inertia"]
        [::std::mem::offset_of!(mjVisual___bindgen_ty_6, inertia) - 48usize];
    ["Offset of field: mjVisual___bindgen_ty_6::joint"]
        [::std::mem::offset_of!(mjVisual___bindgen_ty_6, joint) - 64usize];
    ["Offset of field: mjVisual___bindgen_ty_6::actuator"]
        [::std::mem::offset_of!(mjVisual___bindgen_ty_6, actuator) - 80usize];
    ["Offset of field: mjVisual___bindgen_ty_6::actuatornegative"]
        [::std::mem::offset_of!(mjVisual___bindgen_ty_6, actuatornegative) - 96usize];
    ["Offset of field: mjVisual___bindgen_ty_6::actuatorpositive"]
        [::std::mem::offset_of!(mjVisual___bindgen_ty_6, actuatorpositive) - 112usize];
    ["Offset of field: mjVisual___bindgen_ty_6::com"]
        [::std::mem::offset_of!(mjVisual___bindgen_ty_6, com) - 128usize];
    ["Offset of field: mjVisual___bindgen_ty_6::camera"]
        [::std::mem::offset_of!(mjVisual___bindgen_ty_6, camera) - 144usize];
    ["Offset of field: mjVisual___bindgen_ty_6::light"]
        [::std::mem::offset_of!(mjVisual___bindgen_ty_6, light) - 160usize];
    ["Offset of field: mjVisual___bindgen_ty_6::selectpoint"]
        [::std::mem::offset_of!(mjVisual___bindgen_ty_6, selectpoint) - 176usize];
    ["Offset of field: mjVisual___bindgen_ty_6::connect"]
        [::std::mem::offset_of!(mjVisual___bindgen_ty_6, connect) - 192usize];
    ["Offset of field: mjVisual___bindgen_ty_6::contactpoint"]
        [::std::mem::offset_of!(mjVisual___bindgen_ty_6, contactpoint) - 208usize];
    ["Offset of field: mjVisual___bindgen_ty_6::contactforce"]
        [::std::mem::offset_of!(mjVisual___bindgen_ty_6, contactforce) - 224usize];
    ["Offset of field: mjVisual___bindgen_ty_6::contactfriction"]
        [::std::mem::offset_of!(mjVisual___bindgen_ty_6, contactfriction) - 240usize];
    ["Offset of field: mjVisual___bindgen_ty_6::contacttorque"]
        [::std::mem::offset_of!(mjVisual___bindgen_ty_6, contacttorque) - 256usize];
    ["Offset of field: mjVisual___bindgen_ty_6::contactgap"]
        [::std::mem::offset_of!(mjVisual___bindgen_ty_6, contactgap) - 272usize];
    ["Offset of field: mjVisual___bindgen_ty_6::rangefinder"]
        [::std::mem::offset_of!(mjVisual___bindgen_ty_6, rangefinder) - 288usize];
    ["Offset of field: mjVisual___bindgen_ty_6::constraint"]
        [::std::mem::offset_of!(mjVisual___bindgen_ty_6, constraint) - 304usize];
    ["Offset of field: mjVisual___bindgen_ty_6::slidercrank"]
        [::std::mem::offset_of!(mjVisual___bindgen_ty_6, slidercrank) - 320usize];
    ["Offset of field: mjVisual___bindgen_ty_6::crankbroken"]
        [::std::mem::offset_of!(mjVisual___bindgen_ty_6, crankbroken) - 336usize];
    ["Offset of field: mjVisual___bindgen_ty_6::frustum"]
        [::std::mem::offset_of!(mjVisual___bindgen_ty_6, frustum) - 352usize];
    ["Offset of field: mjVisual___bindgen_ty_6::bv"]
        [::std::mem::offset_of!(mjVisual___bindgen_ty_6, bv) - 368usize];
    ["Offset of field: mjVisual___bindgen_ty_6::bvactive"]
        [::std::mem::offset_of!(mjVisual___bindgen_ty_6, bvactive) - 384usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjVisual_"][::std::mem::size_of::<mjVisual_>() - 628usize];
    ["Alignment of mjVisual_"][::std::mem::align_of::<mjVisual_>() - 4usize];
    ["Offset of field: mjVisual_::global"][::std::mem::offset_of!(mjVisual_, global) - 0usize];
    ["Offset of field: mjVisual_::quality"][::std::mem::offset_of!(mjVisual_, quality) - 48usize];
    ["Offset of field: mjVisual_::headlight"]
        [::std::mem::offset_of!(mjVisual_, headlight) - 68usize];
    ["Offset of field: mjVisual_::map"][::std::mem::offset_of!(mjVisual_, map) - 108usize];
    ["Offset of field: mjVisual_::scale"][::std::mem::offset_of!(mjVisual_, scale) - 160usize];
    ["Offset of field: mjVisual_::rgba"][::std::mem::offset_of!(mjVisual_, rgba) - 228usize];
};
pub type mjVisual = mjVisual_;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mjStatistic_ {
    pub meaninertia: mjtNum,
    pub meanmass: mjtNum,
    pub meansize: mjtNum,
    pub extent: mjtNum,
    pub center: [mjtNum; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjStatistic_"][::std::mem::size_of::<mjStatistic_>() - 56usize];
    ["Alignment of mjStatistic_"][::std::mem::align_of::<mjStatistic_>() - 8usize];
    ["Offset of field: mjStatistic_::meaninertia"]
        [::std::mem::offset_of!(mjStatistic_, meaninertia) - 0usize];
    ["Offset of field: mjStatistic_::meanmass"]
        [::std::mem::offset_of!(mjStatistic_, meanmass) - 8usize];
    ["Offset of field: mjStatistic_::meansize"]
        [::std::mem::offset_of!(mjStatistic_, meansize) - 16usize];
    ["Offset of field: mjStatistic_::extent"]
        [::std::mem::offset_of!(mjStatistic_, extent) - 24usize];
    ["Offset of field: mjStatistic_::center"]
        [::std::mem::offset_of!(mjStatistic_, center) - 32usize];
};
pub type mjStatistic = mjStatistic_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mjModel_ {
    pub nq: ::std::os::raw::c_int,
    pub nv: ::std::os::raw::c_int,
    pub nu: ::std::os::raw::c_int,
    pub na: ::std::os::raw::c_int,
    pub nbody: ::std::os::raw::c_int,
    pub nbvh: ::std::os::raw::c_int,
    pub nbvhstatic: ::std::os::raw::c_int,
    pub nbvhdynamic: ::std::os::raw::c_int,
    pub njnt: ::std::os::raw::c_int,
    pub ngeom: ::std::os::raw::c_int,
    pub nsite: ::std::os::raw::c_int,
    pub ncam: ::std::os::raw::c_int,
    pub nlight: ::std::os::raw::c_int,
    pub nflex: ::std::os::raw::c_int,
    pub nflexvert: ::std::os::raw::c_int,
    pub nflexedge: ::std::os::raw::c_int,
    pub nflexelem: ::std::os::raw::c_int,
    pub nflexelemdata: ::std::os::raw::c_int,
    pub nflexelemedge: ::std::os::raw::c_int,
    pub nflexshelldata: ::std::os::raw::c_int,
    pub nflexevpair: ::std::os::raw::c_int,
    pub nflextexcoord: ::std::os::raw::c_int,
    pub nmesh: ::std::os::raw::c_int,
    pub nmeshvert: ::std::os::raw::c_int,
    pub nmeshnormal: ::std::os::raw::c_int,
    pub nmeshtexcoord: ::std::os::raw::c_int,
    pub nmeshface: ::std::os::raw::c_int,
    pub nmeshgraph: ::std::os::raw::c_int,
    pub nskin: ::std::os::raw::c_int,
    pub nskinvert: ::std::os::raw::c_int,
    pub nskintexvert: ::std::os::raw::c_int,
    pub nskinface: ::std::os::raw::c_int,
    pub nskinbone: ::std::os::raw::c_int,
    pub nskinbonevert: ::std::os::raw::c_int,
    pub nhfield: ::std::os::raw::c_int,
    pub nhfielddata: ::std::os::raw::c_int,
    pub ntex: ::std::os::raw::c_int,
    pub ntexdata: ::std::os::raw::c_int,
    pub nmat: ::std::os::raw::c_int,
    pub npair: ::std::os::raw::c_int,
    pub nexclude: ::std::os::raw::c_int,
    pub neq: ::std::os::raw::c_int,
    pub ntendon: ::std::os::raw::c_int,
    pub nwrap: ::std::os::raw::c_int,
    pub nsensor: ::std::os::raw::c_int,
    pub nnumeric: ::std::os::raw::c_int,
    pub nnumericdata: ::std::os::raw::c_int,
    pub ntext: ::std::os::raw::c_int,
    pub ntextdata: ::std::os::raw::c_int,
    pub ntuple: ::std::os::raw::c_int,
    pub ntupledata: ::std::os::raw::c_int,
    pub nkey: ::std::os::raw::c_int,
    pub nmocap: ::std::os::raw::c_int,
    pub nplugin: ::std::os::raw::c_int,
    pub npluginattr: ::std::os::raw::c_int,
    pub nuser_body: ::std::os::raw::c_int,
    pub nuser_jnt: ::std::os::raw::c_int,
    pub nuser_geom: ::std::os::raw::c_int,
    pub nuser_site: ::std::os::raw::c_int,
    pub nuser_cam: ::std::os::raw::c_int,
    pub nuser_tendon: ::std::os::raw::c_int,
    pub nuser_actuator: ::std::os::raw::c_int,
    pub nuser_sensor: ::std::os::raw::c_int,
    pub nnames: ::std::os::raw::c_int,
    pub npaths: ::std::os::raw::c_int,
    pub nnames_map: ::std::os::raw::c_int,
    pub nM: ::std::os::raw::c_int,
    pub nB: ::std::os::raw::c_int,
    pub nC: ::std::os::raw::c_int,
    pub nD: ::std::os::raw::c_int,
    pub nJmom: ::std::os::raw::c_int,
    pub ntree: ::std::os::raw::c_int,
    pub ngravcomp: ::std::os::raw::c_int,
    pub nemax: ::std::os::raw::c_int,
    pub njmax: ::std::os::raw::c_int,
    pub nconmax: ::std::os::raw::c_int,
    pub nuserdata: ::std::os::raw::c_int,
    pub nsensordata: ::std::os::raw::c_int,
    pub npluginstate: ::std::os::raw::c_int,
    pub narena: usize,
    pub nbuffer: usize,
    pub opt: mjOption,
    pub vis: mjVisual,
    pub stat: mjStatistic,
    pub buffer: *mut ::std::os::raw::c_void,
    pub qpos0: *mut mjtNum,
    pub qpos_spring: *mut mjtNum,
    pub body_parentid: *mut ::std::os::raw::c_int,
    pub body_rootid: *mut ::std::os::raw::c_int,
    pub body_weldid: *mut ::std::os::raw::c_int,
    pub body_mocapid: *mut ::std::os::raw::c_int,
    pub body_jntnum: *mut ::std::os::raw::c_int,
    pub body_jntadr: *mut ::std::os::raw::c_int,
    pub body_dofnum: *mut ::std::os::raw::c_int,
    pub body_dofadr: *mut ::std::os::raw::c_int,
    pub body_treeid: *mut ::std::os::raw::c_int,
    pub body_geomnum: *mut ::std::os::raw::c_int,
    pub body_geomadr: *mut ::std::os::raw::c_int,
    pub body_simple: *mut mjtByte,
    pub body_sameframe: *mut mjtByte,
    pub body_pos: *mut mjtNum,
    pub body_quat: *mut mjtNum,
    pub body_ipos: *mut mjtNum,
    pub body_iquat: *mut mjtNum,
    pub body_mass: *mut mjtNum,
    pub body_subtreemass: *mut mjtNum,
    pub body_inertia: *mut mjtNum,
    pub body_invweight0: *mut mjtNum,
    pub body_gravcomp: *mut mjtNum,
    pub body_margin: *mut mjtNum,
    pub body_user: *mut mjtNum,
    pub body_plugin: *mut ::std::os::raw::c_int,
    pub body_contype: *mut ::std::os::raw::c_int,
    pub body_conaffinity: *mut ::std::os::raw::c_int,
    pub body_bvhadr: *mut ::std::os::raw::c_int,
    pub body_bvhnum: *mut ::std::os::raw::c_int,
    pub bvh_depth: *mut ::std::os::raw::c_int,
    pub bvh_child: *mut ::std::os::raw::c_int,
    pub bvh_nodeid: *mut ::std::os::raw::c_int,
    pub bvh_aabb: *mut mjtNum,
    pub jnt_type: *mut ::std::os::raw::c_int,
    pub jnt_qposadr: *mut ::std::os::raw::c_int,
    pub jnt_dofadr: *mut ::std::os::raw::c_int,
    pub jnt_bodyid: *mut ::std::os::raw::c_int,
    pub jnt_group: *mut ::std::os::raw::c_int,
    pub jnt_limited: *mut mjtByte,
    pub jnt_actfrclimited: *mut mjtByte,
    pub jnt_actgravcomp: *mut mjtByte,
    pub jnt_solref: *mut mjtNum,
    pub jnt_solimp: *mut mjtNum,
    pub jnt_pos: *mut mjtNum,
    pub jnt_axis: *mut mjtNum,
    pub jnt_stiffness: *mut mjtNum,
    pub jnt_range: *mut mjtNum,
    pub jnt_actfrcrange: *mut mjtNum,
    pub jnt_margin: *mut mjtNum,
    pub jnt_user: *mut mjtNum,
    pub dof_bodyid: *mut ::std::os::raw::c_int,
    pub dof_jntid: *mut ::std::os::raw::c_int,
    pub dof_parentid: *mut ::std::os::raw::c_int,
    pub dof_treeid: *mut ::std::os::raw::c_int,
    pub dof_Madr: *mut ::std::os::raw::c_int,
    pub dof_simplenum: *mut ::std::os::raw::c_int,
    pub dof_solref: *mut mjtNum,
    pub dof_solimp: *mut mjtNum,
    pub dof_frictionloss: *mut mjtNum,
    pub dof_armature: *mut mjtNum,
    pub dof_damping: *mut mjtNum,
    pub dof_invweight0: *mut mjtNum,
    pub dof_M0: *mut mjtNum,
    pub geom_type: *mut ::std::os::raw::c_int,
    pub geom_contype: *mut ::std::os::raw::c_int,
    pub geom_conaffinity: *mut ::std::os::raw::c_int,
    pub geom_condim: *mut ::std::os::raw::c_int,
    pub geom_bodyid: *mut ::std::os::raw::c_int,
    pub geom_dataid: *mut ::std::os::raw::c_int,
    pub geom_matid: *mut ::std::os::raw::c_int,
    pub geom_group: *mut ::std::os::raw::c_int,
    pub geom_priority: *mut ::std::os::raw::c_int,
    pub geom_plugin: *mut ::std::os::raw::c_int,
    pub geom_sameframe: *mut mjtByte,
    pub geom_solmix: *mut mjtNum,
    pub geom_solref: *mut mjtNum,
    pub geom_solimp: *mut mjtNum,
    pub geom_size: *mut mjtNum,
    pub geom_aabb: *mut mjtNum,
    pub geom_rbound: *mut mjtNum,
    pub geom_pos: *mut mjtNum,
    pub geom_quat: *mut mjtNum,
    pub geom_friction: *mut mjtNum,
    pub geom_margin: *mut mjtNum,
    pub geom_gap: *mut mjtNum,
    pub geom_fluid: *mut mjtNum,
    pub geom_user: *mut mjtNum,
    pub geom_rgba: *mut f32,
    pub site_type: *mut ::std::os::raw::c_int,
    pub site_bodyid: *mut ::std::os::raw::c_int,
    pub site_matid: *mut ::std::os::raw::c_int,
    pub site_group: *mut ::std::os::raw::c_int,
    pub site_sameframe: *mut mjtByte,
    pub site_size: *mut mjtNum,
    pub site_pos: *mut mjtNum,
    pub site_quat: *mut mjtNum,
    pub site_user: *mut mjtNum,
    pub site_rgba: *mut f32,
    pub cam_mode: *mut ::std::os::raw::c_int,
    pub cam_bodyid: *mut ::std::os::raw::c_int,
    pub cam_targetbodyid: *mut ::std::os::raw::c_int,
    pub cam_pos: *mut mjtNum,
    pub cam_quat: *mut mjtNum,
    pub cam_poscom0: *mut mjtNum,
    pub cam_pos0: *mut mjtNum,
    pub cam_mat0: *mut mjtNum,
    pub cam_orthographic: *mut ::std::os::raw::c_int,
    pub cam_fovy: *mut mjtNum,
    pub cam_ipd: *mut mjtNum,
    pub cam_resolution: *mut ::std::os::raw::c_int,
    pub cam_sensorsize: *mut f32,
    pub cam_intrinsic: *mut f32,
    pub cam_user: *mut mjtNum,
    pub light_mode: *mut ::std::os::raw::c_int,
    pub light_bodyid: *mut ::std::os::raw::c_int,
    pub light_targetbodyid: *mut ::std::os::raw::c_int,
    pub light_directional: *mut mjtByte,
    pub light_castshadow: *mut mjtByte,
    pub light_bulbradius: *mut f32,
    pub light_active: *mut mjtByte,
    pub light_pos: *mut mjtNum,
    pub light_dir: *mut mjtNum,
    pub light_poscom0: *mut mjtNum,
    pub light_pos0: *mut mjtNum,
    pub light_dir0: *mut mjtNum,
    pub light_attenuation: *mut f32,
    pub light_cutoff: *mut f32,
    pub light_exponent: *mut f32,
    pub light_ambient: *mut f32,
    pub light_diffuse: *mut f32,
    pub light_specular: *mut f32,
    pub flex_contype: *mut ::std::os::raw::c_int,
    pub flex_conaffinity: *mut ::std::os::raw::c_int,
    pub flex_condim: *mut ::std::os::raw::c_int,
    pub flex_priority: *mut ::std::os::raw::c_int,
    pub flex_solmix: *mut mjtNum,
    pub flex_solref: *mut mjtNum,
    pub flex_solimp: *mut mjtNum,
    pub flex_friction: *mut mjtNum,
    pub flex_margin: *mut mjtNum,
    pub flex_gap: *mut mjtNum,
    pub flex_internal: *mut mjtByte,
    pub flex_selfcollide: *mut ::std::os::raw::c_int,
    pub flex_activelayers: *mut ::std::os::raw::c_int,
    pub flex_dim: *mut ::std::os::raw::c_int,
    pub flex_matid: *mut ::std::os::raw::c_int,
    pub flex_group: *mut ::std::os::raw::c_int,
    pub flex_vertadr: *mut ::std::os::raw::c_int,
    pub flex_vertnum: *mut ::std::os::raw::c_int,
    pub flex_edgeadr: *mut ::std::os::raw::c_int,
    pub flex_edgenum: *mut ::std::os::raw::c_int,
    pub flex_elemadr: *mut ::std::os::raw::c_int,
    pub flex_elemnum: *mut ::std::os::raw::c_int,
    pub flex_elemdataadr: *mut ::std::os::raw::c_int,
    pub flex_elemedgeadr: *mut ::std::os::raw::c_int,
    pub flex_shellnum: *mut ::std::os::raw::c_int,
    pub flex_shelldataadr: *mut ::std::os::raw::c_int,
    pub flex_evpairadr: *mut ::std::os::raw::c_int,
    pub flex_evpairnum: *mut ::std::os::raw::c_int,
    pub flex_texcoordadr: *mut ::std::os::raw::c_int,
    pub flex_vertbodyid: *mut ::std::os::raw::c_int,
    pub flex_edge: *mut ::std::os::raw::c_int,
    pub flex_elem: *mut ::std::os::raw::c_int,
    pub flex_elemedge: *mut ::std::os::raw::c_int,
    pub flex_elemlayer: *mut ::std::os::raw::c_int,
    pub flex_shell: *mut ::std::os::raw::c_int,
    pub flex_evpair: *mut ::std::os::raw::c_int,
    pub flex_vert: *mut mjtNum,
    pub flex_vert0: *mut mjtNum,
    pub flexedge_length0: *mut mjtNum,
    pub flexedge_invweight0: *mut mjtNum,
    pub flex_radius: *mut mjtNum,
    pub flex_stiffness: *mut mjtNum,
    pub flex_damping: *mut mjtNum,
    pub flex_edgestiffness: *mut mjtNum,
    pub flex_edgedamping: *mut mjtNum,
    pub flex_edgeequality: *mut mjtByte,
    pub flex_rigid: *mut mjtByte,
    pub flexedge_rigid: *mut mjtByte,
    pub flex_centered: *mut mjtByte,
    pub flex_flatskin: *mut mjtByte,
    pub flex_bvhadr: *mut ::std::os::raw::c_int,
    pub flex_bvhnum: *mut ::std::os::raw::c_int,
    pub flex_rgba: *mut f32,
    pub flex_texcoord: *mut f32,
    pub mesh_vertadr: *mut ::std::os::raw::c_int,
    pub mesh_vertnum: *mut ::std::os::raw::c_int,
    pub mesh_faceadr: *mut ::std::os::raw::c_int,
    pub mesh_facenum: *mut ::std::os::raw::c_int,
    pub mesh_bvhadr: *mut ::std::os::raw::c_int,
    pub mesh_bvhnum: *mut ::std::os::raw::c_int,
    pub mesh_normaladr: *mut ::std::os::raw::c_int,
    pub mesh_normalnum: *mut ::std::os::raw::c_int,
    pub mesh_texcoordadr: *mut ::std::os::raw::c_int,
    pub mesh_texcoordnum: *mut ::std::os::raw::c_int,
    pub mesh_graphadr: *mut ::std::os::raw::c_int,
    pub mesh_vert: *mut f32,
    pub mesh_normal: *mut f32,
    pub mesh_texcoord: *mut f32,
    pub mesh_face: *mut ::std::os::raw::c_int,
    pub mesh_facenormal: *mut ::std::os::raw::c_int,
    pub mesh_facetexcoord: *mut ::std::os::raw::c_int,
    pub mesh_graph: *mut ::std::os::raw::c_int,
    pub mesh_scale: *mut mjtNum,
    pub mesh_pos: *mut mjtNum,
    pub mesh_quat: *mut mjtNum,
    pub mesh_pathadr: *mut ::std::os::raw::c_int,
    pub skin_matid: *mut ::std::os::raw::c_int,
    pub skin_group: *mut ::std::os::raw::c_int,
    pub skin_rgba: *mut f32,
    pub skin_inflate: *mut f32,
    pub skin_vertadr: *mut ::std::os::raw::c_int,
    pub skin_vertnum: *mut ::std::os::raw::c_int,
    pub skin_texcoordadr: *mut ::std::os::raw::c_int,
    pub skin_faceadr: *mut ::std::os::raw::c_int,
    pub skin_facenum: *mut ::std::os::raw::c_int,
    pub skin_boneadr: *mut ::std::os::raw::c_int,
    pub skin_bonenum: *mut ::std::os::raw::c_int,
    pub skin_vert: *mut f32,
    pub skin_texcoord: *mut f32,
    pub skin_face: *mut ::std::os::raw::c_int,
    pub skin_bonevertadr: *mut ::std::os::raw::c_int,
    pub skin_bonevertnum: *mut ::std::os::raw::c_int,
    pub skin_bonebindpos: *mut f32,
    pub skin_bonebindquat: *mut f32,
    pub skin_bonebodyid: *mut ::std::os::raw::c_int,
    pub skin_bonevertid: *mut ::std::os::raw::c_int,
    pub skin_bonevertweight: *mut f32,
    pub skin_pathadr: *mut ::std::os::raw::c_int,
    pub hfield_size: *mut mjtNum,
    pub hfield_nrow: *mut ::std::os::raw::c_int,
    pub hfield_ncol: *mut ::std::os::raw::c_int,
    pub hfield_adr: *mut ::std::os::raw::c_int,
    pub hfield_data: *mut f32,
    pub hfield_pathadr: *mut ::std::os::raw::c_int,
    pub tex_type: *mut ::std::os::raw::c_int,
    pub tex_height: *mut ::std::os::raw::c_int,
    pub tex_width: *mut ::std::os::raw::c_int,
    pub tex_nchannel: *mut ::std::os::raw::c_int,
    pub tex_adr: *mut ::std::os::raw::c_int,
    pub tex_data: *mut mjtByte,
    pub tex_pathadr: *mut ::std::os::raw::c_int,
    pub mat_texid: *mut ::std::os::raw::c_int,
    pub mat_texuniform: *mut mjtByte,
    pub mat_texrepeat: *mut f32,
    pub mat_emission: *mut f32,
    pub mat_specular: *mut f32,
    pub mat_shininess: *mut f32,
    pub mat_reflectance: *mut f32,
    pub mat_metallic: *mut f32,
    pub mat_roughness: *mut f32,
    pub mat_rgba: *mut f32,
    pub pair_dim: *mut ::std::os::raw::c_int,
    pub pair_geom1: *mut ::std::os::raw::c_int,
    pub pair_geom2: *mut ::std::os::raw::c_int,
    pub pair_signature: *mut ::std::os::raw::c_int,
    pub pair_solref: *mut mjtNum,
    pub pair_solreffriction: *mut mjtNum,
    pub pair_solimp: *mut mjtNum,
    pub pair_margin: *mut mjtNum,
    pub pair_gap: *mut mjtNum,
    pub pair_friction: *mut mjtNum,
    pub exclude_signature: *mut ::std::os::raw::c_int,
    pub eq_type: *mut ::std::os::raw::c_int,
    pub eq_obj1id: *mut ::std::os::raw::c_int,
    pub eq_obj2id: *mut ::std::os::raw::c_int,
    pub eq_objtype: *mut ::std::os::raw::c_int,
    pub eq_active0: *mut mjtByte,
    pub eq_solref: *mut mjtNum,
    pub eq_solimp: *mut mjtNum,
    pub eq_data: *mut mjtNum,
    pub tendon_adr: *mut ::std::os::raw::c_int,
    pub tendon_num: *mut ::std::os::raw::c_int,
    pub tendon_matid: *mut ::std::os::raw::c_int,
    pub tendon_group: *mut ::std::os::raw::c_int,
    pub tendon_limited: *mut mjtByte,
    pub tendon_width: *mut mjtNum,
    pub tendon_solref_lim: *mut mjtNum,
    pub tendon_solimp_lim: *mut mjtNum,
    pub tendon_solref_fri: *mut mjtNum,
    pub tendon_solimp_fri: *mut mjtNum,
    pub tendon_range: *mut mjtNum,
    pub tendon_margin: *mut mjtNum,
    pub tendon_stiffness: *mut mjtNum,
    pub tendon_damping: *mut mjtNum,
    pub tendon_frictionloss: *mut mjtNum,
    pub tendon_lengthspring: *mut mjtNum,
    pub tendon_length0: *mut mjtNum,
    pub tendon_invweight0: *mut mjtNum,
    pub tendon_user: *mut mjtNum,
    pub tendon_rgba: *mut f32,
    pub wrap_type: *mut ::std::os::raw::c_int,
    pub wrap_objid: *mut ::std::os::raw::c_int,
    pub wrap_prm: *mut mjtNum,
    pub actuator_trntype: *mut ::std::os::raw::c_int,
    pub actuator_dyntype: *mut ::std::os::raw::c_int,
    pub actuator_gaintype: *mut ::std::os::raw::c_int,
    pub actuator_biastype: *mut ::std::os::raw::c_int,
    pub actuator_trnid: *mut ::std::os::raw::c_int,
    pub actuator_actadr: *mut ::std::os::raw::c_int,
    pub actuator_actnum: *mut ::std::os::raw::c_int,
    pub actuator_group: *mut ::std::os::raw::c_int,
    pub actuator_ctrllimited: *mut mjtByte,
    pub actuator_forcelimited: *mut mjtByte,
    pub actuator_actlimited: *mut mjtByte,
    pub actuator_dynprm: *mut mjtNum,
    pub actuator_gainprm: *mut mjtNum,
    pub actuator_biasprm: *mut mjtNum,
    pub actuator_actearly: *mut mjtByte,
    pub actuator_ctrlrange: *mut mjtNum,
    pub actuator_forcerange: *mut mjtNum,
    pub actuator_actrange: *mut mjtNum,
    pub actuator_gear: *mut mjtNum,
    pub actuator_cranklength: *mut mjtNum,
    pub actuator_acc0: *mut mjtNum,
    pub actuator_length0: *mut mjtNum,
    pub actuator_lengthrange: *mut mjtNum,
    pub actuator_user: *mut mjtNum,
    pub actuator_plugin: *mut ::std::os::raw::c_int,
    pub sensor_type: *mut ::std::os::raw::c_int,
    pub sensor_datatype: *mut ::std::os::raw::c_int,
    pub sensor_needstage: *mut ::std::os::raw::c_int,
    pub sensor_objtype: *mut ::std::os::raw::c_int,
    pub sensor_objid: *mut ::std::os::raw::c_int,
    pub sensor_reftype: *mut ::std::os::raw::c_int,
    pub sensor_refid: *mut ::std::os::raw::c_int,
    pub sensor_dim: *mut ::std::os::raw::c_int,
    pub sensor_adr: *mut ::std::os::raw::c_int,
    pub sensor_cutoff: *mut mjtNum,
    pub sensor_noise: *mut mjtNum,
    pub sensor_user: *mut mjtNum,
    pub sensor_plugin: *mut ::std::os::raw::c_int,
    pub plugin: *mut ::std::os::raw::c_int,
    pub plugin_stateadr: *mut ::std::os::raw::c_int,
    pub plugin_statenum: *mut ::std::os::raw::c_int,
    pub plugin_attr: *mut ::std::os::raw::c_char,
    pub plugin_attradr: *mut ::std::os::raw::c_int,
    pub numeric_adr: *mut ::std::os::raw::c_int,
    pub numeric_size: *mut ::std::os::raw::c_int,
    pub numeric_data: *mut mjtNum,
    pub text_adr: *mut ::std::os::raw::c_int,
    pub text_size: *mut ::std::os::raw::c_int,
    pub text_data: *mut ::std::os::raw::c_char,
    pub tuple_adr: *mut ::std::os::raw::c_int,
    pub tuple_size: *mut ::std::os::raw::c_int,
    pub tuple_objtype: *mut ::std::os::raw::c_int,
    pub tuple_objid: *mut ::std::os::raw::c_int,
    pub tuple_objprm: *mut mjtNum,
    pub key_time: *mut mjtNum,
    pub key_qpos: *mut mjtNum,
    pub key_qvel: *mut mjtNum,
    pub key_act: *mut mjtNum,
    pub key_mpos: *mut mjtNum,
    pub key_mquat: *mut mjtNum,
    pub key_ctrl: *mut mjtNum,
    pub name_bodyadr: *mut ::std::os::raw::c_int,
    pub name_jntadr: *mut ::std::os::raw::c_int,
    pub name_geomadr: *mut ::std::os::raw::c_int,
    pub name_siteadr: *mut ::std::os::raw::c_int,
    pub name_camadr: *mut ::std::os::raw::c_int,
    pub name_lightadr: *mut ::std::os::raw::c_int,
    pub name_flexadr: *mut ::std::os::raw::c_int,
    pub name_meshadr: *mut ::std::os::raw::c_int,
    pub name_skinadr: *mut ::std::os::raw::c_int,
    pub name_hfieldadr: *mut ::std::os::raw::c_int,
    pub name_texadr: *mut ::std::os::raw::c_int,
    pub name_matadr: *mut ::std::os::raw::c_int,
    pub name_pairadr: *mut ::std::os::raw::c_int,
    pub name_excludeadr: *mut ::std::os::raw::c_int,
    pub name_eqadr: *mut ::std::os::raw::c_int,
    pub name_tendonadr: *mut ::std::os::raw::c_int,
    pub name_actuatoradr: *mut ::std::os::raw::c_int,
    pub name_sensoradr: *mut ::std::os::raw::c_int,
    pub name_numericadr: *mut ::std::os::raw::c_int,
    pub name_textadr: *mut ::std::os::raw::c_int,
    pub name_tupleadr: *mut ::std::os::raw::c_int,
    pub name_keyadr: *mut ::std::os::raw::c_int,
    pub name_pluginadr: *mut ::std::os::raw::c_int,
    pub names: *mut ::std::os::raw::c_char,
    pub names_map: *mut ::std::os::raw::c_int,
    pub paths: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjModel_"][::std::mem::size_of::<mjModel_>() - 4400usize];
    ["Alignment of mjModel_"][::std::mem::align_of::<mjModel_>() - 8usize];
    ["Offset of field: mjModel_::nq"][::std::mem::offset_of!(mjModel_, nq) - 0usize];
    ["Offset of field: mjModel_::nv"][::std::mem::offset_of!(mjModel_, nv) - 4usize];
    ["Offset of field: mjModel_::nu"][::std::mem::offset_of!(mjModel_, nu) - 8usize];
    ["Offset of field: mjModel_::na"][::std::mem::offset_of!(mjModel_, na) - 12usize];
    ["Offset of field: mjModel_::nbody"][::std::mem::offset_of!(mjModel_, nbody) - 16usize];
    ["Offset of field: mjModel_::nbvh"][::std::mem::offset_of!(mjModel_, nbvh) - 20usize];
    ["Offset of field: mjModel_::nbvhstatic"]
        [::std::mem::offset_of!(mjModel_, nbvhstatic) - 24usize];
    ["Offset of field: mjModel_::nbvhdynamic"]
        [::std::mem::offset_of!(mjModel_, nbvhdynamic) - 28usize];
    ["Offset of field: mjModel_::njnt"][::std::mem::offset_of!(mjModel_, njnt) - 32usize];
    ["Offset of field: mjModel_::ngeom"][::std::mem::offset_of!(mjModel_, ngeom) - 36usize];
    ["Offset of field: mjModel_::nsite"][::std::mem::offset_of!(mjModel_, nsite) - 40usize];
    ["Offset of field: mjModel_::ncam"][::std::mem::offset_of!(mjModel_, ncam) - 44usize];
    ["Offset of field: mjModel_::nlight"][::std::mem::offset_of!(mjModel_, nlight) - 48usize];
    ["Offset of field: mjModel_::nflex"][::std::mem::offset_of!(mjModel_, nflex) - 52usize];
    ["Offset of field: mjModel_::nflexvert"][::std::mem::offset_of!(mjModel_, nflexvert) - 56usize];
    ["Offset of field: mjModel_::nflexedge"][::std::mem::offset_of!(mjModel_, nflexedge) - 60usize];
    ["Offset of field: mjModel_::nflexelem"][::std::mem::offset_of!(mjModel_, nflexelem) - 64usize];
    ["Offset of field: mjModel_::nflexelemdata"]
        [::std::mem::offset_of!(mjModel_, nflexelemdata) - 68usize];
    ["Offset of field: mjModel_::nflexelemedge"]
        [::std::mem::offset_of!(mjModel_, nflexelemedge) - 72usize];
    ["Offset of field: mjModel_::nflexshelldata"]
        [::std::mem::offset_of!(mjModel_, nflexshelldata) - 76usize];
    ["Offset of field: mjModel_::nflexevpair"]
        [::std::mem::offset_of!(mjModel_, nflexevpair) - 80usize];
    ["Offset of field: mjModel_::nflextexcoord"]
        [::std::mem::offset_of!(mjModel_, nflextexcoord) - 84usize];
    ["Offset of field: mjModel_::nmesh"][::std::mem::offset_of!(mjModel_, nmesh) - 88usize];
    ["Offset of field: mjModel_::nmeshvert"][::std::mem::offset_of!(mjModel_, nmeshvert) - 92usize];
    ["Offset of field: mjModel_::nmeshnormal"]
        [::std::mem::offset_of!(mjModel_, nmeshnormal) - 96usize];
    ["Offset of field: mjModel_::nmeshtexcoord"]
        [::std::mem::offset_of!(mjModel_, nmeshtexcoord) - 100usize];
    ["Offset of field: mjModel_::nmeshface"]
        [::std::mem::offset_of!(mjModel_, nmeshface) - 104usize];
    ["Offset of field: mjModel_::nmeshgraph"]
        [::std::mem::offset_of!(mjModel_, nmeshgraph) - 108usize];
    ["Offset of field: mjModel_::nskin"][::std::mem::offset_of!(mjModel_, nskin) - 112usize];
    ["Offset of field: mjModel_::nskinvert"]
        [::std::mem::offset_of!(mjModel_, nskinvert) - 116usize];
    ["Offset of field: mjModel_::nskintexvert"]
        [::std::mem::offset_of!(mjModel_, nskintexvert) - 120usize];
    ["Offset of field: mjModel_::nskinface"]
        [::std::mem::offset_of!(mjModel_, nskinface) - 124usize];
    ["Offset of field: mjModel_::nskinbone"]
        [::std::mem::offset_of!(mjModel_, nskinbone) - 128usize];
    ["Offset of field: mjModel_::nskinbonevert"]
        [::std::mem::offset_of!(mjModel_, nskinbonevert) - 132usize];
    ["Offset of field: mjModel_::nhfield"][::std::mem::offset_of!(mjModel_, nhfield) - 136usize];
    ["Offset of field: mjModel_::nhfielddata"]
        [::std::mem::offset_of!(mjModel_, nhfielddata) - 140usize];
    ["Offset of field: mjModel_::ntex"][::std::mem::offset_of!(mjModel_, ntex) - 144usize];
    ["Offset of field: mjModel_::ntexdata"][::std::mem::offset_of!(mjModel_, ntexdata) - 148usize];
    ["Offset of field: mjModel_::nmat"][::std::mem::offset_of!(mjModel_, nmat) - 152usize];
    ["Offset of field: mjModel_::npair"][::std::mem::offset_of!(mjModel_, npair) - 156usize];
    ["Offset of field: mjModel_::nexclude"][::std::mem::offset_of!(mjModel_, nexclude) - 160usize];
    ["Offset of field: mjModel_::neq"][::std::mem::offset_of!(mjModel_, neq) - 164usize];
    ["Offset of field: mjModel_::ntendon"][::std::mem::offset_of!(mjModel_, ntendon) - 168usize];
    ["Offset of field: mjModel_::nwrap"][::std::mem::offset_of!(mjModel_, nwrap) - 172usize];
    ["Offset of field: mjModel_::nsensor"][::std::mem::offset_of!(mjModel_, nsensor) - 176usize];
    ["Offset of field: mjModel_::nnumeric"][::std::mem::offset_of!(mjModel_, nnumeric) - 180usize];
    ["Offset of field: mjModel_::nnumericdata"]
        [::std::mem::offset_of!(mjModel_, nnumericdata) - 184usize];
    ["Offset of field: mjModel_::ntext"][::std::mem::offset_of!(mjModel_, ntext) - 188usize];
    ["Offset of field: mjModel_::ntextdata"]
        [::std::mem::offset_of!(mjModel_, ntextdata) - 192usize];
    ["Offset of field: mjModel_::ntuple"][::std::mem::offset_of!(mjModel_, ntuple) - 196usize];
    ["Offset of field: mjModel_::ntupledata"]
        [::std::mem::offset_of!(mjModel_, ntupledata) - 200usize];
    ["Offset of field: mjModel_::nkey"][::std::mem::offset_of!(mjModel_, nkey) - 204usize];
    ["Offset of field: mjModel_::nmocap"][::std::mem::offset_of!(mjModel_, nmocap) - 208usize];
    ["Offset of field: mjModel_::nplugin"][::std::mem::offset_of!(mjModel_, nplugin) - 212usize];
    ["Offset of field: mjModel_::npluginattr"]
        [::std::mem::offset_of!(mjModel_, npluginattr) - 216usize];
    ["Offset of field: mjModel_::nuser_body"]
        [::std::mem::offset_of!(mjModel_, nuser_body) - 220usize];
    ["Offset of field: mjModel_::nuser_jnt"]
        [::std::mem::offset_of!(mjModel_, nuser_jnt) - 224usize];
    ["Offset of field: mjModel_::nuser_geom"]
        [::std::mem::offset_of!(mjModel_, nuser_geom) - 228usize];
    ["Offset of field: mjModel_::nuser_site"]
        [::std::mem::offset_of!(mjModel_, nuser_site) - 232usize];
    ["Offset of field: mjModel_::nuser_cam"]
        [::std::mem::offset_of!(mjModel_, nuser_cam) - 236usize];
    ["Offset of field: mjModel_::nuser_tendon"]
        [::std::mem::offset_of!(mjModel_, nuser_tendon) - 240usize];
    ["Offset of field: mjModel_::nuser_actuator"]
        [::std::mem::offset_of!(mjModel_, nuser_actuator) - 244usize];
    ["Offset of field: mjModel_::nuser_sensor"]
        [::std::mem::offset_of!(mjModel_, nuser_sensor) - 248usize];
    ["Offset of field: mjModel_::nnames"][::std::mem::offset_of!(mjModel_, nnames) - 252usize];
    ["Offset of field: mjModel_::npaths"][::std::mem::offset_of!(mjModel_, npaths) - 256usize];
    ["Offset of field: mjModel_::nnames_map"]
        [::std::mem::offset_of!(mjModel_, nnames_map) - 260usize];
    ["Offset of field: mjModel_::nM"][::std::mem::offset_of!(mjModel_, nM) - 264usize];
    ["Offset of field: mjModel_::nB"][::std::mem::offset_of!(mjModel_, nB) - 268usize];
    ["Offset of field: mjModel_::nC"][::std::mem::offset_of!(mjModel_, nC) - 272usize];
    ["Offset of field: mjModel_::nD"][::std::mem::offset_of!(mjModel_, nD) - 276usize];
    ["Offset of field: mjModel_::nJmom"][::std::mem::offset_of!(mjModel_, nJmom) - 280usize];
    ["Offset of field: mjModel_::ntree"][::std::mem::offset_of!(mjModel_, ntree) - 284usize];
    ["Offset of field: mjModel_::ngravcomp"]
        [::std::mem::offset_of!(mjModel_, ngravcomp) - 288usize];
    ["Offset of field: mjModel_::nemax"][::std::mem::offset_of!(mjModel_, nemax) - 292usize];
    ["Offset of field: mjModel_::njmax"][::std::mem::offset_of!(mjModel_, njmax) - 296usize];
    ["Offset of field: mjModel_::nconmax"][::std::mem::offset_of!(mjModel_, nconmax) - 300usize];
    ["Offset of field: mjModel_::nuserdata"]
        [::std::mem::offset_of!(mjModel_, nuserdata) - 304usize];
    ["Offset of field: mjModel_::nsensordata"]
        [::std::mem::offset_of!(mjModel_, nsensordata) - 308usize];
    ["Offset of field: mjModel_::npluginstate"]
        [::std::mem::offset_of!(mjModel_, npluginstate) - 312usize];
    ["Offset of field: mjModel_::narena"][::std::mem::offset_of!(mjModel_, narena) - 320usize];
    ["Offset of field: mjModel_::nbuffer"][::std::mem::offset_of!(mjModel_, nbuffer) - 328usize];
    ["Offset of field: mjModel_::opt"][::std::mem::offset_of!(mjModel_, opt) - 336usize];
    ["Offset of field: mjModel_::vis"][::std::mem::offset_of!(mjModel_, vis) - 640usize];
    ["Offset of field: mjModel_::stat"][::std::mem::offset_of!(mjModel_, stat) - 1272usize];
    ["Offset of field: mjModel_::buffer"][::std::mem::offset_of!(mjModel_, buffer) - 1328usize];
    ["Offset of field: mjModel_::qpos0"][::std::mem::offset_of!(mjModel_, qpos0) - 1336usize];
    ["Offset of field: mjModel_::qpos_spring"]
        [::std::mem::offset_of!(mjModel_, qpos_spring) - 1344usize];
    ["Offset of field: mjModel_::body_parentid"]
        [::std::mem::offset_of!(mjModel_, body_parentid) - 1352usize];
    ["Offset of field: mjModel_::body_rootid"]
        [::std::mem::offset_of!(mjModel_, body_rootid) - 1360usize];
    ["Offset of field: mjModel_::body_weldid"]
        [::std::mem::offset_of!(mjModel_, body_weldid) - 1368usize];
    ["Offset of field: mjModel_::body_mocapid"]
        [::std::mem::offset_of!(mjModel_, body_mocapid) - 1376usize];
    ["Offset of field: mjModel_::body_jntnum"]
        [::std::mem::offset_of!(mjModel_, body_jntnum) - 1384usize];
    ["Offset of field: mjModel_::body_jntadr"]
        [::std::mem::offset_of!(mjModel_, body_jntadr) - 1392usize];
    ["Offset of field: mjModel_::body_dofnum"]
        [::std::mem::offset_of!(mjModel_, body_dofnum) - 1400usize];
    ["Offset of field: mjModel_::body_dofadr"]
        [::std::mem::offset_of!(mjModel_, body_dofadr) - 1408usize];
    ["Offset of field: mjModel_::body_treeid"]
        [::std::mem::offset_of!(mjModel_, body_treeid) - 1416usize];
    ["Offset of field: mjModel_::body_geomnum"]
        [::std::mem::offset_of!(mjModel_, body_geomnum) - 1424usize];
    ["Offset of field: mjModel_::body_geomadr"]
        [::std::mem::offset_of!(mjModel_, body_geomadr) - 1432usize];
    ["Offset of field: mjModel_::body_simple"]
        [::std::mem::offset_of!(mjModel_, body_simple) - 1440usize];
    ["Offset of field: mjModel_::body_sameframe"]
        [::std::mem::offset_of!(mjModel_, body_sameframe) - 1448usize];
    ["Offset of field: mjModel_::body_pos"][::std::mem::offset_of!(mjModel_, body_pos) - 1456usize];
    ["Offset of field: mjModel_::body_quat"]
        [::std::mem::offset_of!(mjModel_, body_quat) - 1464usize];
    ["Offset of field: mjModel_::body_ipos"]
        [::std::mem::offset_of!(mjModel_, body_ipos) - 1472usize];
    ["Offset of field: mjModel_::body_iquat"]
        [::std::mem::offset_of!(mjModel_, body_iquat) - 1480usize];
    ["Offset of field: mjModel_::body_mass"]
        [::std::mem::offset_of!(mjModel_, body_mass) - 1488usize];
    ["Offset of field: mjModel_::body_subtreemass"]
        [::std::mem::offset_of!(mjModel_, body_subtreemass) - 1496usize];
    ["Offset of field: mjModel_::body_inertia"]
        [::std::mem::offset_of!(mjModel_, body_inertia) - 1504usize];
    ["Offset of field: mjModel_::body_invweight0"]
        [::std::mem::offset_of!(mjModel_, body_invweight0) - 1512usize];
    ["Offset of field: mjModel_::body_gravcomp"]
        [::std::mem::offset_of!(mjModel_, body_gravcomp) - 1520usize];
    ["Offset of field: mjModel_::body_margin"]
        [::std::mem::offset_of!(mjModel_, body_margin) - 1528usize];
    ["Offset of field: mjModel_::body_user"]
        [::std::mem::offset_of!(mjModel_, body_user) - 1536usize];
    ["Offset of field: mjModel_::body_plugin"]
        [::std::mem::offset_of!(mjModel_, body_plugin) - 1544usize];
    ["Offset of field: mjModel_::body_contype"]
        [::std::mem::offset_of!(mjModel_, body_contype) - 1552usize];
    ["Offset of field: mjModel_::body_conaffinity"]
        [::std::mem::offset_of!(mjModel_, body_conaffinity) - 1560usize];
    ["Offset of field: mjModel_::body_bvhadr"]
        [::std::mem::offset_of!(mjModel_, body_bvhadr) - 1568usize];
    ["Offset of field: mjModel_::body_bvhnum"]
        [::std::mem::offset_of!(mjModel_, body_bvhnum) - 1576usize];
    ["Offset of field: mjModel_::bvh_depth"]
        [::std::mem::offset_of!(mjModel_, bvh_depth) - 1584usize];
    ["Offset of field: mjModel_::bvh_child"]
        [::std::mem::offset_of!(mjModel_, bvh_child) - 1592usize];
    ["Offset of field: mjModel_::bvh_nodeid"]
        [::std::mem::offset_of!(mjModel_, bvh_nodeid) - 1600usize];
    ["Offset of field: mjModel_::bvh_aabb"][::std::mem::offset_of!(mjModel_, bvh_aabb) - 1608usize];
    ["Offset of field: mjModel_::jnt_type"][::std::mem::offset_of!(mjModel_, jnt_type) - 1616usize];
    ["Offset of field: mjModel_::jnt_qposadr"]
        [::std::mem::offset_of!(mjModel_, jnt_qposadr) - 1624usize];
    ["Offset of field: mjModel_::jnt_dofadr"]
        [::std::mem::offset_of!(mjModel_, jnt_dofadr) - 1632usize];
    ["Offset of field: mjModel_::jnt_bodyid"]
        [::std::mem::offset_of!(mjModel_, jnt_bodyid) - 1640usize];
    ["Offset of field: mjModel_::jnt_group"]
        [::std::mem::offset_of!(mjModel_, jnt_group) - 1648usize];
    ["Offset of field: mjModel_::jnt_limited"]
        [::std::mem::offset_of!(mjModel_, jnt_limited) - 1656usize];
    ["Offset of field: mjModel_::jnt_actfrclimited"]
        [::std::mem::offset_of!(mjModel_, jnt_actfrclimited) - 1664usize];
    ["Offset of field: mjModel_::jnt_actgravcomp"]
        [::std::mem::offset_of!(mjModel_, jnt_actgravcomp) - 1672usize];
    ["Offset of field: mjModel_::jnt_solref"]
        [::std::mem::offset_of!(mjModel_, jnt_solref) - 1680usize];
    ["Offset of field: mjModel_::jnt_solimp"]
        [::std::mem::offset_of!(mjModel_, jnt_solimp) - 1688usize];
    ["Offset of field: mjModel_::jnt_pos"][::std::mem::offset_of!(mjModel_, jnt_pos) - 1696usize];
    ["Offset of field: mjModel_::jnt_axis"][::std::mem::offset_of!(mjModel_, jnt_axis) - 1704usize];
    ["Offset of field: mjModel_::jnt_stiffness"]
        [::std::mem::offset_of!(mjModel_, jnt_stiffness) - 1712usize];
    ["Offset of field: mjModel_::jnt_range"]
        [::std::mem::offset_of!(mjModel_, jnt_range) - 1720usize];
    ["Offset of field: mjModel_::jnt_actfrcrange"]
        [::std::mem::offset_of!(mjModel_, jnt_actfrcrange) - 1728usize];
    ["Offset of field: mjModel_::jnt_margin"]
        [::std::mem::offset_of!(mjModel_, jnt_margin) - 1736usize];
    ["Offset of field: mjModel_::jnt_user"][::std::mem::offset_of!(mjModel_, jnt_user) - 1744usize];
    ["Offset of field: mjModel_::dof_bodyid"]
        [::std::mem::offset_of!(mjModel_, dof_bodyid) - 1752usize];
    ["Offset of field: mjModel_::dof_jntid"]
        [::std::mem::offset_of!(mjModel_, dof_jntid) - 1760usize];
    ["Offset of field: mjModel_::dof_parentid"]
        [::std::mem::offset_of!(mjModel_, dof_parentid) - 1768usize];
    ["Offset of field: mjModel_::dof_treeid"]
        [::std::mem::offset_of!(mjModel_, dof_treeid) - 1776usize];
    ["Offset of field: mjModel_::dof_Madr"][::std::mem::offset_of!(mjModel_, dof_Madr) - 1784usize];
    ["Offset of field: mjModel_::dof_simplenum"]
        [::std::mem::offset_of!(mjModel_, dof_simplenum) - 1792usize];
    ["Offset of field: mjModel_::dof_solref"]
        [::std::mem::offset_of!(mjModel_, dof_solref) - 1800usize];
    ["Offset of field: mjModel_::dof_solimp"]
        [::std::mem::offset_of!(mjModel_, dof_solimp) - 1808usize];
    ["Offset of field: mjModel_::dof_frictionloss"]
        [::std::mem::offset_of!(mjModel_, dof_frictionloss) - 1816usize];
    ["Offset of field: mjModel_::dof_armature"]
        [::std::mem::offset_of!(mjModel_, dof_armature) - 1824usize];
    ["Offset of field: mjModel_::dof_damping"]
        [::std::mem::offset_of!(mjModel_, dof_damping) - 1832usize];
    ["Offset of field: mjModel_::dof_invweight0"]
        [::std::mem::offset_of!(mjModel_, dof_invweight0) - 1840usize];
    ["Offset of field: mjModel_::dof_M0"][::std::mem::offset_of!(mjModel_, dof_M0) - 1848usize];
    ["Offset of field: mjModel_::geom_type"]
        [::std::mem::offset_of!(mjModel_, geom_type) - 1856usize];
    ["Offset of field: mjModel_::geom_contype"]
        [::std::mem::offset_of!(mjModel_, geom_contype) - 1864usize];
    ["Offset of field: mjModel_::geom_conaffinity"]
        [::std::mem::offset_of!(mjModel_, geom_conaffinity) - 1872usize];
    ["Offset of field: mjModel_::geom_condim"]
        [::std::mem::offset_of!(mjModel_, geom_condim) - 1880usize];
    ["Offset of field: mjModel_::geom_bodyid"]
        [::std::mem::offset_of!(mjModel_, geom_bodyid) - 1888usize];
    ["Offset of field: mjModel_::geom_dataid"]
        [::std::mem::offset_of!(mjModel_, geom_dataid) - 1896usize];
    ["Offset of field: mjModel_::geom_matid"]
        [::std::mem::offset_of!(mjModel_, geom_matid) - 1904usize];
    ["Offset of field: mjModel_::geom_group"]
        [::std::mem::offset_of!(mjModel_, geom_group) - 1912usize];
    ["Offset of field: mjModel_::geom_priority"]
        [::std::mem::offset_of!(mjModel_, geom_priority) - 1920usize];
    ["Offset of field: mjModel_::geom_plugin"]
        [::std::mem::offset_of!(mjModel_, geom_plugin) - 1928usize];
    ["Offset of field: mjModel_::geom_sameframe"]
        [::std::mem::offset_of!(mjModel_, geom_sameframe) - 1936usize];
    ["Offset of field: mjModel_::geom_solmix"]
        [::std::mem::offset_of!(mjModel_, geom_solmix) - 1944usize];
    ["Offset of field: mjModel_::geom_solref"]
        [::std::mem::offset_of!(mjModel_, geom_solref) - 1952usize];
    ["Offset of field: mjModel_::geom_solimp"]
        [::std::mem::offset_of!(mjModel_, geom_solimp) - 1960usize];
    ["Offset of field: mjModel_::geom_size"]
        [::std::mem::offset_of!(mjModel_, geom_size) - 1968usize];
    ["Offset of field: mjModel_::geom_aabb"]
        [::std::mem::offset_of!(mjModel_, geom_aabb) - 1976usize];
    ["Offset of field: mjModel_::geom_rbound"]
        [::std::mem::offset_of!(mjModel_, geom_rbound) - 1984usize];
    ["Offset of field: mjModel_::geom_pos"][::std::mem::offset_of!(mjModel_, geom_pos) - 1992usize];
    ["Offset of field: mjModel_::geom_quat"]
        [::std::mem::offset_of!(mjModel_, geom_quat) - 2000usize];
    ["Offset of field: mjModel_::geom_friction"]
        [::std::mem::offset_of!(mjModel_, geom_friction) - 2008usize];
    ["Offset of field: mjModel_::geom_margin"]
        [::std::mem::offset_of!(mjModel_, geom_margin) - 2016usize];
    ["Offset of field: mjModel_::geom_gap"][::std::mem::offset_of!(mjModel_, geom_gap) - 2024usize];
    ["Offset of field: mjModel_::geom_fluid"]
        [::std::mem::offset_of!(mjModel_, geom_fluid) - 2032usize];
    ["Offset of field: mjModel_::geom_user"]
        [::std::mem::offset_of!(mjModel_, geom_user) - 2040usize];
    ["Offset of field: mjModel_::geom_rgba"]
        [::std::mem::offset_of!(mjModel_, geom_rgba) - 2048usize];
    ["Offset of field: mjModel_::site_type"]
        [::std::mem::offset_of!(mjModel_, site_type) - 2056usize];
    ["Offset of field: mjModel_::site_bodyid"]
        [::std::mem::offset_of!(mjModel_, site_bodyid) - 2064usize];
    ["Offset of field: mjModel_::site_matid"]
        [::std::mem::offset_of!(mjModel_, site_matid) - 2072usize];
    ["Offset of field: mjModel_::site_group"]
        [::std::mem::offset_of!(mjModel_, site_group) - 2080usize];
    ["Offset of field: mjModel_::site_sameframe"]
        [::std::mem::offset_of!(mjModel_, site_sameframe) - 2088usize];
    ["Offset of field: mjModel_::site_size"]
        [::std::mem::offset_of!(mjModel_, site_size) - 2096usize];
    ["Offset of field: mjModel_::site_pos"][::std::mem::offset_of!(mjModel_, site_pos) - 2104usize];
    ["Offset of field: mjModel_::site_quat"]
        [::std::mem::offset_of!(mjModel_, site_quat) - 2112usize];
    ["Offset of field: mjModel_::site_user"]
        [::std::mem::offset_of!(mjModel_, site_user) - 2120usize];
    ["Offset of field: mjModel_::site_rgba"]
        [::std::mem::offset_of!(mjModel_, site_rgba) - 2128usize];
    ["Offset of field: mjModel_::cam_mode"][::std::mem::offset_of!(mjModel_, cam_mode) - 2136usize];
    ["Offset of field: mjModel_::cam_bodyid"]
        [::std::mem::offset_of!(mjModel_, cam_bodyid) - 2144usize];
    ["Offset of field: mjModel_::cam_targetbodyid"]
        [::std::mem::offset_of!(mjModel_, cam_targetbodyid) - 2152usize];
    ["Offset of field: mjModel_::cam_pos"][::std::mem::offset_of!(mjModel_, cam_pos) - 2160usize];
    ["Offset of field: mjModel_::cam_quat"][::std::mem::offset_of!(mjModel_, cam_quat) - 2168usize];
    ["Offset of field: mjModel_::cam_poscom0"]
        [::std::mem::offset_of!(mjModel_, cam_poscom0) - 2176usize];
    ["Offset of field: mjModel_::cam_pos0"][::std::mem::offset_of!(mjModel_, cam_pos0) - 2184usize];
    ["Offset of field: mjModel_::cam_mat0"][::std::mem::offset_of!(mjModel_, cam_mat0) - 2192usize];
    ["Offset of field: mjModel_::cam_orthographic"]
        [::std::mem::offset_of!(mjModel_, cam_orthographic) - 2200usize];
    ["Offset of field: mjModel_::cam_fovy"][::std::mem::offset_of!(mjModel_, cam_fovy) - 2208usize];
    ["Offset of field: mjModel_::cam_ipd"][::std::mem::offset_of!(mjModel_, cam_ipd) - 2216usize];
    ["Offset of field: mjModel_::cam_resolution"]
        [::std::mem::offset_of!(mjModel_, cam_resolution) - 2224usize];
    ["Offset of field: mjModel_::cam_sensorsize"]
        [::std::mem::offset_of!(mjModel_, cam_sensorsize) - 2232usize];
    ["Offset of field: mjModel_::cam_intrinsic"]
        [::std::mem::offset_of!(mjModel_, cam_intrinsic) - 2240usize];
    ["Offset of field: mjModel_::cam_user"][::std::mem::offset_of!(mjModel_, cam_user) - 2248usize];
    ["Offset of field: mjModel_::light_mode"]
        [::std::mem::offset_of!(mjModel_, light_mode) - 2256usize];
    ["Offset of field: mjModel_::light_bodyid"]
        [::std::mem::offset_of!(mjModel_, light_bodyid) - 2264usize];
    ["Offset of field: mjModel_::light_targetbodyid"]
        [::std::mem::offset_of!(mjModel_, light_targetbodyid) - 2272usize];
    ["Offset of field: mjModel_::light_directional"]
        [::std::mem::offset_of!(mjModel_, light_directional) - 2280usize];
    ["Offset of field: mjModel_::light_castshadow"]
        [::std::mem::offset_of!(mjModel_, light_castshadow) - 2288usize];
    ["Offset of field: mjModel_::light_bulbradius"]
        [::std::mem::offset_of!(mjModel_, light_bulbradius) - 2296usize];
    ["Offset of field: mjModel_::light_active"]
        [::std::mem::offset_of!(mjModel_, light_active) - 2304usize];
    ["Offset of field: mjModel_::light_pos"]
        [::std::mem::offset_of!(mjModel_, light_pos) - 2312usize];
    ["Offset of field: mjModel_::light_dir"]
        [::std::mem::offset_of!(mjModel_, light_dir) - 2320usize];
    ["Offset of field: mjModel_::light_poscom0"]
        [::std::mem::offset_of!(mjModel_, light_poscom0) - 2328usize];
    ["Offset of field: mjModel_::light_pos0"]
        [::std::mem::offset_of!(mjModel_, light_pos0) - 2336usize];
    ["Offset of field: mjModel_::light_dir0"]
        [::std::mem::offset_of!(mjModel_, light_dir0) - 2344usize];
    ["Offset of field: mjModel_::light_attenuation"]
        [::std::mem::offset_of!(mjModel_, light_attenuation) - 2352usize];
    ["Offset of field: mjModel_::light_cutoff"]
        [::std::mem::offset_of!(mjModel_, light_cutoff) - 2360usize];
    ["Offset of field: mjModel_::light_exponent"]
        [::std::mem::offset_of!(mjModel_, light_exponent) - 2368usize];
    ["Offset of field: mjModel_::light_ambient"]
        [::std::mem::offset_of!(mjModel_, light_ambient) - 2376usize];
    ["Offset of field: mjModel_::light_diffuse"]
        [::std::mem::offset_of!(mjModel_, light_diffuse) - 2384usize];
    ["Offset of field: mjModel_::light_specular"]
        [::std::mem::offset_of!(mjModel_, light_specular) - 2392usize];
    ["Offset of field: mjModel_::flex_contype"]
        [::std::mem::offset_of!(mjModel_, flex_contype) - 2400usize];
    ["Offset of field: mjModel_::flex_conaffinity"]
        [::std::mem::offset_of!(mjModel_, flex_conaffinity) - 2408usize];
    ["Offset of field: mjModel_::flex_condim"]
        [::std::mem::offset_of!(mjModel_, flex_condim) - 2416usize];
    ["Offset of field: mjModel_::flex_priority"]
        [::std::mem::offset_of!(mjModel_, flex_priority) - 2424usize];
    ["Offset of field: mjModel_::flex_solmix"]
        [::std::mem::offset_of!(mjModel_, flex_solmix) - 2432usize];
    ["Offset of field: mjModel_::flex_solref"]
        [::std::mem::offset_of!(mjModel_, flex_solref) - 2440usize];
    ["Offset of field: mjModel_::flex_solimp"]
        [::std::mem::offset_of!(mjModel_, flex_solimp) - 2448usize];
    ["Offset of field: mjModel_::flex_friction"]
        [::std::mem::offset_of!(mjModel_, flex_friction) - 2456usize];
    ["Offset of field: mjModel_::flex_margin"]
        [::std::mem::offset_of!(mjModel_, flex_margin) - 2464usize];
    ["Offset of field: mjModel_::flex_gap"][::std::mem::offset_of!(mjModel_, flex_gap) - 2472usize];
    ["Offset of field: mjModel_::flex_internal"]
        [::std::mem::offset_of!(mjModel_, flex_internal) - 2480usize];
    ["Offset of field: mjModel_::flex_selfcollide"]
        [::std::mem::offset_of!(mjModel_, flex_selfcollide) - 2488usize];
    ["Offset of field: mjModel_::flex_activelayers"]
        [::std::mem::offset_of!(mjModel_, flex_activelayers) - 2496usize];
    ["Offset of field: mjModel_::flex_dim"][::std::mem::offset_of!(mjModel_, flex_dim) - 2504usize];
    ["Offset of field: mjModel_::flex_matid"]
        [::std::mem::offset_of!(mjModel_, flex_matid) - 2512usize];
    ["Offset of field: mjModel_::flex_group"]
        [::std::mem::offset_of!(mjModel_, flex_group) - 2520usize];
    ["Offset of field: mjModel_::flex_vertadr"]
        [::std::mem::offset_of!(mjModel_, flex_vertadr) - 2528usize];
    ["Offset of field: mjModel_::flex_vertnum"]
        [::std::mem::offset_of!(mjModel_, flex_vertnum) - 2536usize];
    ["Offset of field: mjModel_::flex_edgeadr"]
        [::std::mem::offset_of!(mjModel_, flex_edgeadr) - 2544usize];
    ["Offset of field: mjModel_::flex_edgenum"]
        [::std::mem::offset_of!(mjModel_, flex_edgenum) - 2552usize];
    ["Offset of field: mjModel_::flex_elemadr"]
        [::std::mem::offset_of!(mjModel_, flex_elemadr) - 2560usize];
    ["Offset of field: mjModel_::flex_elemnum"]
        [::std::mem::offset_of!(mjModel_, flex_elemnum) - 2568usize];
    ["Offset of field: mjModel_::flex_elemdataadr"]
        [::std::mem::offset_of!(mjModel_, flex_elemdataadr) - 2576usize];
    ["Offset of field: mjModel_::flex_elemedgeadr"]
        [::std::mem::offset_of!(mjModel_, flex_elemedgeadr) - 2584usize];
    ["Offset of field: mjModel_::flex_shellnum"]
        [::std::mem::offset_of!(mjModel_, flex_shellnum) - 2592usize];
    ["Offset of field: mjModel_::flex_shelldataadr"]
        [::std::mem::offset_of!(mjModel_, flex_shelldataadr) - 2600usize];
    ["Offset of field: mjModel_::flex_evpairadr"]
        [::std::mem::offset_of!(mjModel_, flex_evpairadr) - 2608usize];
    ["Offset of field: mjModel_::flex_evpairnum"]
        [::std::mem::offset_of!(mjModel_, flex_evpairnum) - 2616usize];
    ["Offset of field: mjModel_::flex_texcoordadr"]
        [::std::mem::offset_of!(mjModel_, flex_texcoordadr) - 2624usize];
    ["Offset of field: mjModel_::flex_vertbodyid"]
        [::std::mem::offset_of!(mjModel_, flex_vertbodyid) - 2632usize];
    ["Offset of field: mjModel_::flex_edge"]
        [::std::mem::offset_of!(mjModel_, flex_edge) - 2640usize];
    ["Offset of field: mjModel_::flex_elem"]
        [::std::mem::offset_of!(mjModel_, flex_elem) - 2648usize];
    ["Offset of field: mjModel_::flex_elemedge"]
        [::std::mem::offset_of!(mjModel_, flex_elemedge) - 2656usize];
    ["Offset of field: mjModel_::flex_elemlayer"]
        [::std::mem::offset_of!(mjModel_, flex_elemlayer) - 2664usize];
    ["Offset of field: mjModel_::flex_shell"]
        [::std::mem::offset_of!(mjModel_, flex_shell) - 2672usize];
    ["Offset of field: mjModel_::flex_evpair"]
        [::std::mem::offset_of!(mjModel_, flex_evpair) - 2680usize];
    ["Offset of field: mjModel_::flex_vert"]
        [::std::mem::offset_of!(mjModel_, flex_vert) - 2688usize];
    ["Offset of field: mjModel_::flex_vert0"]
        [::std::mem::offset_of!(mjModel_, flex_vert0) - 2696usize];
    ["Offset of field: mjModel_::flexedge_length0"]
        [::std::mem::offset_of!(mjModel_, flexedge_length0) - 2704usize];
    ["Offset of field: mjModel_::flexedge_invweight0"]
        [::std::mem::offset_of!(mjModel_, flexedge_invweight0) - 2712usize];
    ["Offset of field: mjModel_::flex_radius"]
        [::std::mem::offset_of!(mjModel_, flex_radius) - 2720usize];
    ["Offset of field: mjModel_::flex_stiffness"]
        [::std::mem::offset_of!(mjModel_, flex_stiffness) - 2728usize];
    ["Offset of field: mjModel_::flex_damping"]
        [::std::mem::offset_of!(mjModel_, flex_damping) - 2736usize];
    ["Offset of field: mjModel_::flex_edgestiffness"]
        [::std::mem::offset_of!(mjModel_, flex_edgestiffness) - 2744usize];
    ["Offset of field: mjModel_::flex_edgedamping"]
        [::std::mem::offset_of!(mjModel_, flex_edgedamping) - 2752usize];
    ["Offset of field: mjModel_::flex_edgeequality"]
        [::std::mem::offset_of!(mjModel_, flex_edgeequality) - 2760usize];
    ["Offset of field: mjModel_::flex_rigid"]
        [::std::mem::offset_of!(mjModel_, flex_rigid) - 2768usize];
    ["Offset of field: mjModel_::flexedge_rigid"]
        [::std::mem::offset_of!(mjModel_, flexedge_rigid) - 2776usize];
    ["Offset of field: mjModel_::flex_centered"]
        [::std::mem::offset_of!(mjModel_, flex_centered) - 2784usize];
    ["Offset of field: mjModel_::flex_flatskin"]
        [::std::mem::offset_of!(mjModel_, flex_flatskin) - 2792usize];
    ["Offset of field: mjModel_::flex_bvhadr"]
        [::std::mem::offset_of!(mjModel_, flex_bvhadr) - 2800usize];
    ["Offset of field: mjModel_::flex_bvhnum"]
        [::std::mem::offset_of!(mjModel_, flex_bvhnum) - 2808usize];
    ["Offset of field: mjModel_::flex_rgba"]
        [::std::mem::offset_of!(mjModel_, flex_rgba) - 2816usize];
    ["Offset of field: mjModel_::flex_texcoord"]
        [::std::mem::offset_of!(mjModel_, flex_texcoord) - 2824usize];
    ["Offset of field: mjModel_::mesh_vertadr"]
        [::std::mem::offset_of!(mjModel_, mesh_vertadr) - 2832usize];
    ["Offset of field: mjModel_::mesh_vertnum"]
        [::std::mem::offset_of!(mjModel_, mesh_vertnum) - 2840usize];
    ["Offset of field: mjModel_::mesh_faceadr"]
        [::std::mem::offset_of!(mjModel_, mesh_faceadr) - 2848usize];
    ["Offset of field: mjModel_::mesh_facenum"]
        [::std::mem::offset_of!(mjModel_, mesh_facenum) - 2856usize];
    ["Offset of field: mjModel_::mesh_bvhadr"]
        [::std::mem::offset_of!(mjModel_, mesh_bvhadr) - 2864usize];
    ["Offset of field: mjModel_::mesh_bvhnum"]
        [::std::mem::offset_of!(mjModel_, mesh_bvhnum) - 2872usize];
    ["Offset of field: mjModel_::mesh_normaladr"]
        [::std::mem::offset_of!(mjModel_, mesh_normaladr) - 2880usize];
    ["Offset of field: mjModel_::mesh_normalnum"]
        [::std::mem::offset_of!(mjModel_, mesh_normalnum) - 2888usize];
    ["Offset of field: mjModel_::mesh_texcoordadr"]
        [::std::mem::offset_of!(mjModel_, mesh_texcoordadr) - 2896usize];
    ["Offset of field: mjModel_::mesh_texcoordnum"]
        [::std::mem::offset_of!(mjModel_, mesh_texcoordnum) - 2904usize];
    ["Offset of field: mjModel_::mesh_graphadr"]
        [::std::mem::offset_of!(mjModel_, mesh_graphadr) - 2912usize];
    ["Offset of field: mjModel_::mesh_vert"]
        [::std::mem::offset_of!(mjModel_, mesh_vert) - 2920usize];
    ["Offset of field: mjModel_::mesh_normal"]
        [::std::mem::offset_of!(mjModel_, mesh_normal) - 2928usize];
    ["Offset of field: mjModel_::mesh_texcoord"]
        [::std::mem::offset_of!(mjModel_, mesh_texcoord) - 2936usize];
    ["Offset of field: mjModel_::mesh_face"]
        [::std::mem::offset_of!(mjModel_, mesh_face) - 2944usize];
    ["Offset of field: mjModel_::mesh_facenormal"]
        [::std::mem::offset_of!(mjModel_, mesh_facenormal) - 2952usize];
    ["Offset of field: mjModel_::mesh_facetexcoord"]
        [::std::mem::offset_of!(mjModel_, mesh_facetexcoord) - 2960usize];
    ["Offset of field: mjModel_::mesh_graph"]
        [::std::mem::offset_of!(mjModel_, mesh_graph) - 2968usize];
    ["Offset of field: mjModel_::mesh_scale"]
        [::std::mem::offset_of!(mjModel_, mesh_scale) - 2976usize];
    ["Offset of field: mjModel_::mesh_pos"][::std::mem::offset_of!(mjModel_, mesh_pos) - 2984usize];
    ["Offset of field: mjModel_::mesh_quat"]
        [::std::mem::offset_of!(mjModel_, mesh_quat) - 2992usize];
    ["Offset of field: mjModel_::mesh_pathadr"]
        [::std::mem::offset_of!(mjModel_, mesh_pathadr) - 3000usize];
    ["Offset of field: mjModel_::skin_matid"]
        [::std::mem::offset_of!(mjModel_, skin_matid) - 3008usize];
    ["Offset of field: mjModel_::skin_group"]
        [::std::mem::offset_of!(mjModel_, skin_group) - 3016usize];
    ["Offset of field: mjModel_::skin_rgba"]
        [::std::mem::offset_of!(mjModel_, skin_rgba) - 3024usize];
    ["Offset of field: mjModel_::skin_inflate"]
        [::std::mem::offset_of!(mjModel_, skin_inflate) - 3032usize];
    ["Offset of field: mjModel_::skin_vertadr"]
        [::std::mem::offset_of!(mjModel_, skin_vertadr) - 3040usize];
    ["Offset of field: mjModel_::skin_vertnum"]
        [::std::mem::offset_of!(mjModel_, skin_vertnum) - 3048usize];
    ["Offset of field: mjModel_::skin_texcoordadr"]
        [::std::mem::offset_of!(mjModel_, skin_texcoordadr) - 3056usize];
    ["Offset of field: mjModel_::skin_faceadr"]
        [::std::mem::offset_of!(mjModel_, skin_faceadr) - 3064usize];
    ["Offset of field: mjModel_::skin_facenum"]
        [::std::mem::offset_of!(mjModel_, skin_facenum) - 3072usize];
    ["Offset of field: mjModel_::skin_boneadr"]
        [::std::mem::offset_of!(mjModel_, skin_boneadr) - 3080usize];
    ["Offset of field: mjModel_::skin_bonenum"]
        [::std::mem::offset_of!(mjModel_, skin_bonenum) - 3088usize];
    ["Offset of field: mjModel_::skin_vert"]
        [::std::mem::offset_of!(mjModel_, skin_vert) - 3096usize];
    ["Offset of field: mjModel_::skin_texcoord"]
        [::std::mem::offset_of!(mjModel_, skin_texcoord) - 3104usize];
    ["Offset of field: mjModel_::skin_face"]
        [::std::mem::offset_of!(mjModel_, skin_face) - 3112usize];
    ["Offset of field: mjModel_::skin_bonevertadr"]
        [::std::mem::offset_of!(mjModel_, skin_bonevertadr) - 3120usize];
    ["Offset of field: mjModel_::skin_bonevertnum"]
        [::std::mem::offset_of!(mjModel_, skin_bonevertnum) - 3128usize];
    ["Offset of field: mjModel_::skin_bonebindpos"]
        [::std::mem::offset_of!(mjModel_, skin_bonebindpos) - 3136usize];
    ["Offset of field: mjModel_::skin_bonebindquat"]
        [::std::mem::offset_of!(mjModel_, skin_bonebindquat) - 3144usize];
    ["Offset of field: mjModel_::skin_bonebodyid"]
        [::std::mem::offset_of!(mjModel_, skin_bonebodyid) - 3152usize];
    ["Offset of field: mjModel_::skin_bonevertid"]
        [::std::mem::offset_of!(mjModel_, skin_bonevertid) - 3160usize];
    ["Offset of field: mjModel_::skin_bonevertweight"]
        [::std::mem::offset_of!(mjModel_, skin_bonevertweight) - 3168usize];
    ["Offset of field: mjModel_::skin_pathadr"]
        [::std::mem::offset_of!(mjModel_, skin_pathadr) - 3176usize];
    ["Offset of field: mjModel_::hfield_size"]
        [::std::mem::offset_of!(mjModel_, hfield_size) - 3184usize];
    ["Offset of field: mjModel_::hfield_nrow"]
        [::std::mem::offset_of!(mjModel_, hfield_nrow) - 3192usize];
    ["Offset of field: mjModel_::hfield_ncol"]
        [::std::mem::offset_of!(mjModel_, hfield_ncol) - 3200usize];
    ["Offset of field: mjModel_::hfield_adr"]
        [::std::mem::offset_of!(mjModel_, hfield_adr) - 3208usize];
    ["Offset of field: mjModel_::hfield_data"]
        [::std::mem::offset_of!(mjModel_, hfield_data) - 3216usize];
    ["Offset of field: mjModel_::hfield_pathadr"]
        [::std::mem::offset_of!(mjModel_, hfield_pathadr) - 3224usize];
    ["Offset of field: mjModel_::tex_type"][::std::mem::offset_of!(mjModel_, tex_type) - 3232usize];
    ["Offset of field: mjModel_::tex_height"]
        [::std::mem::offset_of!(mjModel_, tex_height) - 3240usize];
    ["Offset of field: mjModel_::tex_width"]
        [::std::mem::offset_of!(mjModel_, tex_width) - 3248usize];
    ["Offset of field: mjModel_::tex_nchannel"]
        [::std::mem::offset_of!(mjModel_, tex_nchannel) - 3256usize];
    ["Offset of field: mjModel_::tex_adr"][::std::mem::offset_of!(mjModel_, tex_adr) - 3264usize];
    ["Offset of field: mjModel_::tex_data"][::std::mem::offset_of!(mjModel_, tex_data) - 3272usize];
    ["Offset of field: mjModel_::tex_pathadr"]
        [::std::mem::offset_of!(mjModel_, tex_pathadr) - 3280usize];
    ["Offset of field: mjModel_::mat_texid"]
        [::std::mem::offset_of!(mjModel_, mat_texid) - 3288usize];
    ["Offset of field: mjModel_::mat_texuniform"]
        [::std::mem::offset_of!(mjModel_, mat_texuniform) - 3296usize];
    ["Offset of field: mjModel_::mat_texrepeat"]
        [::std::mem::offset_of!(mjModel_, mat_texrepeat) - 3304usize];
    ["Offset of field: mjModel_::mat_emission"]
        [::std::mem::offset_of!(mjModel_, mat_emission) - 3312usize];
    ["Offset of field: mjModel_::mat_specular"]
        [::std::mem::offset_of!(mjModel_, mat_specular) - 3320usize];
    ["Offset of field: mjModel_::mat_shininess"]
        [::std::mem::offset_of!(mjModel_, mat_shininess) - 3328usize];
    ["Offset of field: mjModel_::mat_reflectance"]
        [::std::mem::offset_of!(mjModel_, mat_reflectance) - 3336usize];
    ["Offset of field: mjModel_::mat_metallic"]
        [::std::mem::offset_of!(mjModel_, mat_metallic) - 3344usize];
    ["Offset of field: mjModel_::mat_roughness"]
        [::std::mem::offset_of!(mjModel_, mat_roughness) - 3352usize];
    ["Offset of field: mjModel_::mat_rgba"][::std::mem::offset_of!(mjModel_, mat_rgba) - 3360usize];
    ["Offset of field: mjModel_::pair_dim"][::std::mem::offset_of!(mjModel_, pair_dim) - 3368usize];
    ["Offset of field: mjModel_::pair_geom1"]
        [::std::mem::offset_of!(mjModel_, pair_geom1) - 3376usize];
    ["Offset of field: mjModel_::pair_geom2"]
        [::std::mem::offset_of!(mjModel_, pair_geom2) - 3384usize];
    ["Offset of field: mjModel_::pair_signature"]
        [::std::mem::offset_of!(mjModel_, pair_signature) - 3392usize];
    ["Offset of field: mjModel_::pair_solref"]
        [::std::mem::offset_of!(mjModel_, pair_solref) - 3400usize];
    ["Offset of field: mjModel_::pair_solreffriction"]
        [::std::mem::offset_of!(mjModel_, pair_solreffriction) - 3408usize];
    ["Offset of field: mjModel_::pair_solimp"]
        [::std::mem::offset_of!(mjModel_, pair_solimp) - 3416usize];
    ["Offset of field: mjModel_::pair_margin"]
        [::std::mem::offset_of!(mjModel_, pair_margin) - 3424usize];
    ["Offset of field: mjModel_::pair_gap"][::std::mem::offset_of!(mjModel_, pair_gap) - 3432usize];
    ["Offset of field: mjModel_::pair_friction"]
        [::std::mem::offset_of!(mjModel_, pair_friction) - 3440usize];
    ["Offset of field: mjModel_::exclude_signature"]
        [::std::mem::offset_of!(mjModel_, exclude_signature) - 3448usize];
    ["Offset of field: mjModel_::eq_type"][::std::mem::offset_of!(mjModel_, eq_type) - 3456usize];
    ["Offset of field: mjModel_::eq_obj1id"]
        [::std::mem::offset_of!(mjModel_, eq_obj1id) - 3464usize];
    ["Offset of field: mjModel_::eq_obj2id"]
        [::std::mem::offset_of!(mjModel_, eq_obj2id) - 3472usize];
    ["Offset of field: mjModel_::eq_objtype"]
        [::std::mem::offset_of!(mjModel_, eq_objtype) - 3480usize];
    ["Offset of field: mjModel_::eq_active0"]
        [::std::mem::offset_of!(mjModel_, eq_active0) - 3488usize];
    ["Offset of field: mjModel_::eq_solref"]
        [::std::mem::offset_of!(mjModel_, eq_solref) - 3496usize];
    ["Offset of field: mjModel_::eq_solimp"]
        [::std::mem::offset_of!(mjModel_, eq_solimp) - 3504usize];
    ["Offset of field: mjModel_::eq_data"][::std::mem::offset_of!(mjModel_, eq_data) - 3512usize];
    ["Offset of field: mjModel_::tendon_adr"]
        [::std::mem::offset_of!(mjModel_, tendon_adr) - 3520usize];
    ["Offset of field: mjModel_::tendon_num"]
        [::std::mem::offset_of!(mjModel_, tendon_num) - 3528usize];
    ["Offset of field: mjModel_::tendon_matid"]
        [::std::mem::offset_of!(mjModel_, tendon_matid) - 3536usize];
    ["Offset of field: mjModel_::tendon_group"]
        [::std::mem::offset_of!(mjModel_, tendon_group) - 3544usize];
    ["Offset of field: mjModel_::tendon_limited"]
        [::std::mem::offset_of!(mjModel_, tendon_limited) - 3552usize];
    ["Offset of field: mjModel_::tendon_width"]
        [::std::mem::offset_of!(mjModel_, tendon_width) - 3560usize];
    ["Offset of field: mjModel_::tendon_solref_lim"]
        [::std::mem::offset_of!(mjModel_, tendon_solref_lim) - 3568usize];
    ["Offset of field: mjModel_::tendon_solimp_lim"]
        [::std::mem::offset_of!(mjModel_, tendon_solimp_lim) - 3576usize];
    ["Offset of field: mjModel_::tendon_solref_fri"]
        [::std::mem::offset_of!(mjModel_, tendon_solref_fri) - 3584usize];
    ["Offset of field: mjModel_::tendon_solimp_fri"]
        [::std::mem::offset_of!(mjModel_, tendon_solimp_fri) - 3592usize];
    ["Offset of field: mjModel_::tendon_range"]
        [::std::mem::offset_of!(mjModel_, tendon_range) - 3600usize];
    ["Offset of field: mjModel_::tendon_margin"]
        [::std::mem::offset_of!(mjModel_, tendon_margin) - 3608usize];
    ["Offset of field: mjModel_::tendon_stiffness"]
        [::std::mem::offset_of!(mjModel_, tendon_stiffness) - 3616usize];
    ["Offset of field: mjModel_::tendon_damping"]
        [::std::mem::offset_of!(mjModel_, tendon_damping) - 3624usize];
    ["Offset of field: mjModel_::tendon_frictionloss"]
        [::std::mem::offset_of!(mjModel_, tendon_frictionloss) - 3632usize];
    ["Offset of field: mjModel_::tendon_lengthspring"]
        [::std::mem::offset_of!(mjModel_, tendon_lengthspring) - 3640usize];
    ["Offset of field: mjModel_::tendon_length0"]
        [::std::mem::offset_of!(mjModel_, tendon_length0) - 3648usize];
    ["Offset of field: mjModel_::tendon_invweight0"]
        [::std::mem::offset_of!(mjModel_, tendon_invweight0) - 3656usize];
    ["Offset of field: mjModel_::tendon_user"]
        [::std::mem::offset_of!(mjModel_, tendon_user) - 3664usize];
    ["Offset of field: mjModel_::tendon_rgba"]
        [::std::mem::offset_of!(mjModel_, tendon_rgba) - 3672usize];
    ["Offset of field: mjModel_::wrap_type"]
        [::std::mem::offset_of!(mjModel_, wrap_type) - 3680usize];
    ["Offset of field: mjModel_::wrap_objid"]
        [::std::mem::offset_of!(mjModel_, wrap_objid) - 3688usize];
    ["Offset of field: mjModel_::wrap_prm"][::std::mem::offset_of!(mjModel_, wrap_prm) - 3696usize];
    ["Offset of field: mjModel_::actuator_trntype"]
        [::std::mem::offset_of!(mjModel_, actuator_trntype) - 3704usize];
    ["Offset of field: mjModel_::actuator_dyntype"]
        [::std::mem::offset_of!(mjModel_, actuator_dyntype) - 3712usize];
    ["Offset of field: mjModel_::actuator_gaintype"]
        [::std::mem::offset_of!(mjModel_, actuator_gaintype) - 3720usize];
    ["Offset of field: mjModel_::actuator_biastype"]
        [::std::mem::offset_of!(mjModel_, actuator_biastype) - 3728usize];
    ["Offset of field: mjModel_::actuator_trnid"]
        [::std::mem::offset_of!(mjModel_, actuator_trnid) - 3736usize];
    ["Offset of field: mjModel_::actuator_actadr"]
        [::std::mem::offset_of!(mjModel_, actuator_actadr) - 3744usize];
    ["Offset of field: mjModel_::actuator_actnum"]
        [::std::mem::offset_of!(mjModel_, actuator_actnum) - 3752usize];
    ["Offset of field: mjModel_::actuator_group"]
        [::std::mem::offset_of!(mjModel_, actuator_group) - 3760usize];
    ["Offset of field: mjModel_::actuator_ctrllimited"]
        [::std::mem::offset_of!(mjModel_, actuator_ctrllimited) - 3768usize];
    ["Offset of field: mjModel_::actuator_forcelimited"]
        [::std::mem::offset_of!(mjModel_, actuator_forcelimited) - 3776usize];
    ["Offset of field: mjModel_::actuator_actlimited"]
        [::std::mem::offset_of!(mjModel_, actuator_actlimited) - 3784usize];
    ["Offset of field: mjModel_::actuator_dynprm"]
        [::std::mem::offset_of!(mjModel_, actuator_dynprm) - 3792usize];
    ["Offset of field: mjModel_::actuator_gainprm"]
        [::std::mem::offset_of!(mjModel_, actuator_gainprm) - 3800usize];
    ["Offset of field: mjModel_::actuator_biasprm"]
        [::std::mem::offset_of!(mjModel_, actuator_biasprm) - 3808usize];
    ["Offset of field: mjModel_::actuator_actearly"]
        [::std::mem::offset_of!(mjModel_, actuator_actearly) - 3816usize];
    ["Offset of field: mjModel_::actuator_ctrlrange"]
        [::std::mem::offset_of!(mjModel_, actuator_ctrlrange) - 3824usize];
    ["Offset of field: mjModel_::actuator_forcerange"]
        [::std::mem::offset_of!(mjModel_, actuator_forcerange) - 3832usize];
    ["Offset of field: mjModel_::actuator_actrange"]
        [::std::mem::offset_of!(mjModel_, actuator_actrange) - 3840usize];
    ["Offset of field: mjModel_::actuator_gear"]
        [::std::mem::offset_of!(mjModel_, actuator_gear) - 3848usize];
    ["Offset of field: mjModel_::actuator_cranklength"]
        [::std::mem::offset_of!(mjModel_, actuator_cranklength) - 3856usize];
    ["Offset of field: mjModel_::actuator_acc0"]
        [::std::mem::offset_of!(mjModel_, actuator_acc0) - 3864usize];
    ["Offset of field: mjModel_::actuator_length0"]
        [::std::mem::offset_of!(mjModel_, actuator_length0) - 3872usize];
    ["Offset of field: mjModel_::actuator_lengthrange"]
        [::std::mem::offset_of!(mjModel_, actuator_lengthrange) - 3880usize];
    ["Offset of field: mjModel_::actuator_user"]
        [::std::mem::offset_of!(mjModel_, actuator_user) - 3888usize];
    ["Offset of field: mjModel_::actuator_plugin"]
        [::std::mem::offset_of!(mjModel_, actuator_plugin) - 3896usize];
    ["Offset of field: mjModel_::sensor_type"]
        [::std::mem::offset_of!(mjModel_, sensor_type) - 3904usize];
    ["Offset of field: mjModel_::sensor_datatype"]
        [::std::mem::offset_of!(mjModel_, sensor_datatype) - 3912usize];
    ["Offset of field: mjModel_::sensor_needstage"]
        [::std::mem::offset_of!(mjModel_, sensor_needstage) - 3920usize];
    ["Offset of field: mjModel_::sensor_objtype"]
        [::std::mem::offset_of!(mjModel_, sensor_objtype) - 3928usize];
    ["Offset of field: mjModel_::sensor_objid"]
        [::std::mem::offset_of!(mjModel_, sensor_objid) - 3936usize];
    ["Offset of field: mjModel_::sensor_reftype"]
        [::std::mem::offset_of!(mjModel_, sensor_reftype) - 3944usize];
    ["Offset of field: mjModel_::sensor_refid"]
        [::std::mem::offset_of!(mjModel_, sensor_refid) - 3952usize];
    ["Offset of field: mjModel_::sensor_dim"]
        [::std::mem::offset_of!(mjModel_, sensor_dim) - 3960usize];
    ["Offset of field: mjModel_::sensor_adr"]
        [::std::mem::offset_of!(mjModel_, sensor_adr) - 3968usize];
    ["Offset of field: mjModel_::sensor_cutoff"]
        [::std::mem::offset_of!(mjModel_, sensor_cutoff) - 3976usize];
    ["Offset of field: mjModel_::sensor_noise"]
        [::std::mem::offset_of!(mjModel_, sensor_noise) - 3984usize];
    ["Offset of field: mjModel_::sensor_user"]
        [::std::mem::offset_of!(mjModel_, sensor_user) - 3992usize];
    ["Offset of field: mjModel_::sensor_plugin"]
        [::std::mem::offset_of!(mjModel_, sensor_plugin) - 4000usize];
    ["Offset of field: mjModel_::plugin"][::std::mem::offset_of!(mjModel_, plugin) - 4008usize];
    ["Offset of field: mjModel_::plugin_stateadr"]
        [::std::mem::offset_of!(mjModel_, plugin_stateadr) - 4016usize];
    ["Offset of field: mjModel_::plugin_statenum"]
        [::std::mem::offset_of!(mjModel_, plugin_statenum) - 4024usize];
    ["Offset of field: mjModel_::plugin_attr"]
        [::std::mem::offset_of!(mjModel_, plugin_attr) - 4032usize];
    ["Offset of field: mjModel_::plugin_attradr"]
        [::std::mem::offset_of!(mjModel_, plugin_attradr) - 4040usize];
    ["Offset of field: mjModel_::numeric_adr"]
        [::std::mem::offset_of!(mjModel_, numeric_adr) - 4048usize];
    ["Offset of field: mjModel_::numeric_size"]
        [::std::mem::offset_of!(mjModel_, numeric_size) - 4056usize];
    ["Offset of field: mjModel_::numeric_data"]
        [::std::mem::offset_of!(mjModel_, numeric_data) - 4064usize];
    ["Offset of field: mjModel_::text_adr"][::std::mem::offset_of!(mjModel_, text_adr) - 4072usize];
    ["Offset of field: mjModel_::text_size"]
        [::std::mem::offset_of!(mjModel_, text_size) - 4080usize];
    ["Offset of field: mjModel_::text_data"]
        [::std::mem::offset_of!(mjModel_, text_data) - 4088usize];
    ["Offset of field: mjModel_::tuple_adr"]
        [::std::mem::offset_of!(mjModel_, tuple_adr) - 4096usize];
    ["Offset of field: mjModel_::tuple_size"]
        [::std::mem::offset_of!(mjModel_, tuple_size) - 4104usize];
    ["Offset of field: mjModel_::tuple_objtype"]
        [::std::mem::offset_of!(mjModel_, tuple_objtype) - 4112usize];
    ["Offset of field: mjModel_::tuple_objid"]
        [::std::mem::offset_of!(mjModel_, tuple_objid) - 4120usize];
    ["Offset of field: mjModel_::tuple_objprm"]
        [::std::mem::offset_of!(mjModel_, tuple_objprm) - 4128usize];
    ["Offset of field: mjModel_::key_time"][::std::mem::offset_of!(mjModel_, key_time) - 4136usize];
    ["Offset of field: mjModel_::key_qpos"][::std::mem::offset_of!(mjModel_, key_qpos) - 4144usize];
    ["Offset of field: mjModel_::key_qvel"][::std::mem::offset_of!(mjModel_, key_qvel) - 4152usize];
    ["Offset of field: mjModel_::key_act"][::std::mem::offset_of!(mjModel_, key_act) - 4160usize];
    ["Offset of field: mjModel_::key_mpos"][::std::mem::offset_of!(mjModel_, key_mpos) - 4168usize];
    ["Offset of field: mjModel_::key_mquat"]
        [::std::mem::offset_of!(mjModel_, key_mquat) - 4176usize];
    ["Offset of field: mjModel_::key_ctrl"][::std::mem::offset_of!(mjModel_, key_ctrl) - 4184usize];
    ["Offset of field: mjModel_::name_bodyadr"]
        [::std::mem::offset_of!(mjModel_, name_bodyadr) - 4192usize];
    ["Offset of field: mjModel_::name_jntadr"]
        [::std::mem::offset_of!(mjModel_, name_jntadr) - 4200usize];
    ["Offset of field: mjModel_::name_geomadr"]
        [::std::mem::offset_of!(mjModel_, name_geomadr) - 4208usize];
    ["Offset of field: mjModel_::name_siteadr"]
        [::std::mem::offset_of!(mjModel_, name_siteadr) - 4216usize];
    ["Offset of field: mjModel_::name_camadr"]
        [::std::mem::offset_of!(mjModel_, name_camadr) - 4224usize];
    ["Offset of field: mjModel_::name_lightadr"]
        [::std::mem::offset_of!(mjModel_, name_lightadr) - 4232usize];
    ["Offset of field: mjModel_::name_flexadr"]
        [::std::mem::offset_of!(mjModel_, name_flexadr) - 4240usize];
    ["Offset of field: mjModel_::name_meshadr"]
        [::std::mem::offset_of!(mjModel_, name_meshadr) - 4248usize];
    ["Offset of field: mjModel_::name_skinadr"]
        [::std::mem::offset_of!(mjModel_, name_skinadr) - 4256usize];
    ["Offset of field: mjModel_::name_hfieldadr"]
        [::std::mem::offset_of!(mjModel_, name_hfieldadr) - 4264usize];
    ["Offset of field: mjModel_::name_texadr"]
        [::std::mem::offset_of!(mjModel_, name_texadr) - 4272usize];
    ["Offset of field: mjModel_::name_matadr"]
        [::std::mem::offset_of!(mjModel_, name_matadr) - 4280usize];
    ["Offset of field: mjModel_::name_pairadr"]
        [::std::mem::offset_of!(mjModel_, name_pairadr) - 4288usize];
    ["Offset of field: mjModel_::name_excludeadr"]
        [::std::mem::offset_of!(mjModel_, name_excludeadr) - 4296usize];
    ["Offset of field: mjModel_::name_eqadr"]
        [::std::mem::offset_of!(mjModel_, name_eqadr) - 4304usize];
    ["Offset of field: mjModel_::name_tendonadr"]
        [::std::mem::offset_of!(mjModel_, name_tendonadr) - 4312usize];
    ["Offset of field: mjModel_::name_actuatoradr"]
        [::std::mem::offset_of!(mjModel_, name_actuatoradr) - 4320usize];
    ["Offset of field: mjModel_::name_sensoradr"]
        [::std::mem::offset_of!(mjModel_, name_sensoradr) - 4328usize];
    ["Offset of field: mjModel_::name_numericadr"]
        [::std::mem::offset_of!(mjModel_, name_numericadr) - 4336usize];
    ["Offset of field: mjModel_::name_textadr"]
        [::std::mem::offset_of!(mjModel_, name_textadr) - 4344usize];
    ["Offset of field: mjModel_::name_tupleadr"]
        [::std::mem::offset_of!(mjModel_, name_tupleadr) - 4352usize];
    ["Offset of field: mjModel_::name_keyadr"]
        [::std::mem::offset_of!(mjModel_, name_keyadr) - 4360usize];
    ["Offset of field: mjModel_::name_pluginadr"]
        [::std::mem::offset_of!(mjModel_, name_pluginadr) - 4368usize];
    ["Offset of field: mjModel_::names"][::std::mem::offset_of!(mjModel_, names) - 4376usize];
    ["Offset of field: mjModel_::names_map"]
        [::std::mem::offset_of!(mjModel_, names_map) - 4384usize];
    ["Offset of field: mjModel_::paths"][::std::mem::offset_of!(mjModel_, paths) - 4392usize];
};
impl Default for mjModel_ {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mjModel = mjModel_;
pub const mjtTaskStatus__mjTASK_NEW: mjtTaskStatus_ = 0;
pub const mjtTaskStatus__mjTASK_QUEUED: mjtTaskStatus_ = 1;
pub const mjtTaskStatus__mjTASK_COMPLETED: mjtTaskStatus_ = 2;
pub type mjtTaskStatus_ = ::std::os::raw::c_uint;
pub use self::mjtTaskStatus_ as mjtTaskStatus;
pub type mjfTask = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
>;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mjThreadPool_ {
    pub nworker: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjThreadPool_"][::std::mem::size_of::<mjThreadPool_>() - 4usize];
    ["Alignment of mjThreadPool_"][::std::mem::align_of::<mjThreadPool_>() - 4usize];
    ["Offset of field: mjThreadPool_::nworker"]
        [::std::mem::offset_of!(mjThreadPool_, nworker) - 0usize];
};
pub type mjThreadPool = mjThreadPool_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mjTask_ {
    pub func: mjfTask,
    pub args: *mut ::std::os::raw::c_void,
    pub status: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjTask_"][::std::mem::size_of::<mjTask_>() - 24usize];
    ["Alignment of mjTask_"][::std::mem::align_of::<mjTask_>() - 8usize];
    ["Offset of field: mjTask_::func"][::std::mem::offset_of!(mjTask_, func) - 0usize];
    ["Offset of field: mjTask_::args"][::std::mem::offset_of!(mjTask_, args) - 8usize];
    ["Offset of field: mjTask_::status"][::std::mem::offset_of!(mjTask_, status) - 16usize];
};
impl Default for mjTask_ {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mjTask = mjTask_;
pub const mjtState__mjSTATE_TIME: mjtState_ = 1;
pub const mjtState__mjSTATE_QPOS: mjtState_ = 2;
pub const mjtState__mjSTATE_QVEL: mjtState_ = 4;
pub const mjtState__mjSTATE_ACT: mjtState_ = 8;
pub const mjtState__mjSTATE_WARMSTART: mjtState_ = 16;
pub const mjtState__mjSTATE_CTRL: mjtState_ = 32;
pub const mjtState__mjSTATE_QFRC_APPLIED: mjtState_ = 64;
pub const mjtState__mjSTATE_XFRC_APPLIED: mjtState_ = 128;
pub const mjtState__mjSTATE_EQ_ACTIVE: mjtState_ = 256;
pub const mjtState__mjSTATE_MOCAP_POS: mjtState_ = 512;
pub const mjtState__mjSTATE_MOCAP_QUAT: mjtState_ = 1024;
pub const mjtState__mjSTATE_USERDATA: mjtState_ = 2048;
pub const mjtState__mjSTATE_PLUGIN: mjtState_ = 4096;
pub const mjtState__mjNSTATE: mjtState_ = 13;
pub const mjtState__mjSTATE_PHYSICS: mjtState_ = 14;
pub const mjtState__mjSTATE_FULLPHYSICS: mjtState_ = 4111;
pub const mjtState__mjSTATE_USER: mjtState_ = 4064;
pub const mjtState__mjSTATE_INTEGRATION: mjtState_ = 8191;
pub type mjtState_ = ::std::os::raw::c_uint;
pub use self::mjtState_ as mjtState;
pub const mjtWarning__mjWARN_INERTIA: mjtWarning_ = 0;
pub const mjtWarning__mjWARN_CONTACTFULL: mjtWarning_ = 1;
pub const mjtWarning__mjWARN_CNSTRFULL: mjtWarning_ = 2;
pub const mjtWarning__mjWARN_VGEOMFULL: mjtWarning_ = 3;
pub const mjtWarning__mjWARN_BADQPOS: mjtWarning_ = 4;
pub const mjtWarning__mjWARN_BADQVEL: mjtWarning_ = 5;
pub const mjtWarning__mjWARN_BADQACC: mjtWarning_ = 6;
pub const mjtWarning__mjWARN_BADCTRL: mjtWarning_ = 7;
pub const mjtWarning__mjNWARNING: mjtWarning_ = 8;
pub type mjtWarning_ = ::std::os::raw::c_uint;
pub use self::mjtWarning_ as mjtWarning;
pub const mjtTimer__mjTIMER_STEP: mjtTimer_ = 0;
pub const mjtTimer__mjTIMER_FORWARD: mjtTimer_ = 1;
pub const mjtTimer__mjTIMER_INVERSE: mjtTimer_ = 2;
pub const mjtTimer__mjTIMER_POSITION: mjtTimer_ = 3;
pub const mjtTimer__mjTIMER_VELOCITY: mjtTimer_ = 4;
pub const mjtTimer__mjTIMER_ACTUATION: mjtTimer_ = 5;
pub const mjtTimer__mjTIMER_CONSTRAINT: mjtTimer_ = 6;
pub const mjtTimer__mjTIMER_ADVANCE: mjtTimer_ = 7;
pub const mjtTimer__mjTIMER_POS_KINEMATICS: mjtTimer_ = 8;
pub const mjtTimer__mjTIMER_POS_INERTIA: mjtTimer_ = 9;
pub const mjtTimer__mjTIMER_POS_COLLISION: mjtTimer_ = 10;
pub const mjtTimer__mjTIMER_POS_MAKE: mjtTimer_ = 11;
pub const mjtTimer__mjTIMER_POS_PROJECT: mjtTimer_ = 12;
pub const mjtTimer__mjTIMER_COL_BROAD: mjtTimer_ = 13;
pub const mjtTimer__mjTIMER_COL_NARROW: mjtTimer_ = 14;
pub const mjtTimer__mjNTIMER: mjtTimer_ = 15;
pub type mjtTimer_ = ::std::os::raw::c_uint;
pub use self::mjtTimer_ as mjtTimer;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mjContact_ {
    pub dist: mjtNum,
    pub pos: [mjtNum; 3usize],
    pub frame: [mjtNum; 9usize],
    pub includemargin: mjtNum,
    pub friction: [mjtNum; 5usize],
    pub solref: [mjtNum; 2usize],
    pub solreffriction: [mjtNum; 2usize],
    pub solimp: [mjtNum; 5usize],
    pub mu: mjtNum,
    pub H: [mjtNum; 36usize],
    pub dim: ::std::os::raw::c_int,
    pub geom1: ::std::os::raw::c_int,
    pub geom2: ::std::os::raw::c_int,
    pub geom: [::std::os::raw::c_int; 2usize],
    pub flex: [::std::os::raw::c_int; 2usize],
    pub elem: [::std::os::raw::c_int; 2usize],
    pub vert: [::std::os::raw::c_int; 2usize],
    pub exclude: ::std::os::raw::c_int,
    pub efc_address: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjContact_"][::std::mem::size_of::<mjContact_>() - 576usize];
    ["Alignment of mjContact_"][::std::mem::align_of::<mjContact_>() - 8usize];
    ["Offset of field: mjContact_::dist"][::std::mem::offset_of!(mjContact_, dist) - 0usize];
    ["Offset of field: mjContact_::pos"][::std::mem::offset_of!(mjContact_, pos) - 8usize];
    ["Offset of field: mjContact_::frame"][::std::mem::offset_of!(mjContact_, frame) - 32usize];
    ["Offset of field: mjContact_::includemargin"]
        [::std::mem::offset_of!(mjContact_, includemargin) - 104usize];
    ["Offset of field: mjContact_::friction"]
        [::std::mem::offset_of!(mjContact_, friction) - 112usize];
    ["Offset of field: mjContact_::solref"][::std::mem::offset_of!(mjContact_, solref) - 152usize];
    ["Offset of field: mjContact_::solreffriction"]
        [::std::mem::offset_of!(mjContact_, solreffriction) - 168usize];
    ["Offset of field: mjContact_::solimp"][::std::mem::offset_of!(mjContact_, solimp) - 184usize];
    ["Offset of field: mjContact_::mu"][::std::mem::offset_of!(mjContact_, mu) - 224usize];
    ["Offset of field: mjContact_::H"][::std::mem::offset_of!(mjContact_, H) - 232usize];
    ["Offset of field: mjContact_::dim"][::std::mem::offset_of!(mjContact_, dim) - 520usize];
    ["Offset of field: mjContact_::geom1"][::std::mem::offset_of!(mjContact_, geom1) - 524usize];
    ["Offset of field: mjContact_::geom2"][::std::mem::offset_of!(mjContact_, geom2) - 528usize];
    ["Offset of field: mjContact_::geom"][::std::mem::offset_of!(mjContact_, geom) - 532usize];
    ["Offset of field: mjContact_::flex"][::std::mem::offset_of!(mjContact_, flex) - 540usize];
    ["Offset of field: mjContact_::elem"][::std::mem::offset_of!(mjContact_, elem) - 548usize];
    ["Offset of field: mjContact_::vert"][::std::mem::offset_of!(mjContact_, vert) - 556usize];
    ["Offset of field: mjContact_::exclude"]
        [::std::mem::offset_of!(mjContact_, exclude) - 564usize];
    ["Offset of field: mjContact_::efc_address"]
        [::std::mem::offset_of!(mjContact_, efc_address) - 568usize];
};
impl Default for mjContact_ {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mjContact = mjContact_;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mjWarningStat_ {
    pub lastinfo: ::std::os::raw::c_int,
    pub number: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjWarningStat_"][::std::mem::size_of::<mjWarningStat_>() - 8usize];
    ["Alignment of mjWarningStat_"][::std::mem::align_of::<mjWarningStat_>() - 4usize];
    ["Offset of field: mjWarningStat_::lastinfo"]
        [::std::mem::offset_of!(mjWarningStat_, lastinfo) - 0usize];
    ["Offset of field: mjWarningStat_::number"]
        [::std::mem::offset_of!(mjWarningStat_, number) - 4usize];
};
pub type mjWarningStat = mjWarningStat_;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mjTimerStat_ {
    pub duration: mjtNum,
    pub number: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjTimerStat_"][::std::mem::size_of::<mjTimerStat_>() - 16usize];
    ["Alignment of mjTimerStat_"][::std::mem::align_of::<mjTimerStat_>() - 8usize];
    ["Offset of field: mjTimerStat_::duration"]
        [::std::mem::offset_of!(mjTimerStat_, duration) - 0usize];
    ["Offset of field: mjTimerStat_::number"]
        [::std::mem::offset_of!(mjTimerStat_, number) - 8usize];
};
pub type mjTimerStat = mjTimerStat_;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mjSolverStat_ {
    pub improvement: mjtNum,
    pub gradient: mjtNum,
    pub lineslope: mjtNum,
    pub nactive: ::std::os::raw::c_int,
    pub nchange: ::std::os::raw::c_int,
    pub neval: ::std::os::raw::c_int,
    pub nupdate: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjSolverStat_"][::std::mem::size_of::<mjSolverStat_>() - 40usize];
    ["Alignment of mjSolverStat_"][::std::mem::align_of::<mjSolverStat_>() - 8usize];
    ["Offset of field: mjSolverStat_::improvement"]
        [::std::mem::offset_of!(mjSolverStat_, improvement) - 0usize];
    ["Offset of field: mjSolverStat_::gradient"]
        [::std::mem::offset_of!(mjSolverStat_, gradient) - 8usize];
    ["Offset of field: mjSolverStat_::lineslope"]
        [::std::mem::offset_of!(mjSolverStat_, lineslope) - 16usize];
    ["Offset of field: mjSolverStat_::nactive"]
        [::std::mem::offset_of!(mjSolverStat_, nactive) - 24usize];
    ["Offset of field: mjSolverStat_::nchange"]
        [::std::mem::offset_of!(mjSolverStat_, nchange) - 28usize];
    ["Offset of field: mjSolverStat_::neval"]
        [::std::mem::offset_of!(mjSolverStat_, neval) - 32usize];
    ["Offset of field: mjSolverStat_::nupdate"]
        [::std::mem::offset_of!(mjSolverStat_, nupdate) - 36usize];
};
pub type mjSolverStat = mjSolverStat_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mjData_ {
    pub narena: usize,
    pub nbuffer: usize,
    pub nplugin: ::std::os::raw::c_int,
    pub pstack: usize,
    pub pbase: usize,
    pub parena: usize,
    pub maxuse_stack: usize,
    pub maxuse_threadstack: [usize; 128usize],
    pub maxuse_arena: usize,
    pub maxuse_con: ::std::os::raw::c_int,
    pub maxuse_efc: ::std::os::raw::c_int,
    pub solver: [mjSolverStat; 4000usize],
    pub solver_nisland: ::std::os::raw::c_int,
    pub solver_niter: [::std::os::raw::c_int; 20usize],
    pub solver_nnz: [::std::os::raw::c_int; 20usize],
    pub solver_fwdinv: [mjtNum; 2usize],
    pub warning: [mjWarningStat; 8usize],
    pub timer: [mjTimerStat; 15usize],
    pub ncon: ::std::os::raw::c_int,
    pub ne: ::std::os::raw::c_int,
    pub nf: ::std::os::raw::c_int,
    pub nl: ::std::os::raw::c_int,
    pub nefc: ::std::os::raw::c_int,
    pub nJ: ::std::os::raw::c_int,
    pub nA: ::std::os::raw::c_int,
    pub nisland: ::std::os::raw::c_int,
    pub time: mjtNum,
    pub energy: [mjtNum; 2usize],
    pub buffer: *mut ::std::os::raw::c_void,
    pub arena: *mut ::std::os::raw::c_void,
    pub qpos: *mut mjtNum,
    pub qvel: *mut mjtNum,
    pub act: *mut mjtNum,
    pub qacc_warmstart: *mut mjtNum,
    pub plugin_state: *mut mjtNum,
    pub ctrl: *mut mjtNum,
    pub qfrc_applied: *mut mjtNum,
    pub xfrc_applied: *mut mjtNum,
    pub eq_active: *mut mjtByte,
    pub mocap_pos: *mut mjtNum,
    pub mocap_quat: *mut mjtNum,
    pub qacc: *mut mjtNum,
    pub act_dot: *mut mjtNum,
    pub userdata: *mut mjtNum,
    pub sensordata: *mut mjtNum,
    pub plugin: *mut ::std::os::raw::c_int,
    pub plugin_data: *mut usize,
    pub xpos: *mut mjtNum,
    pub xquat: *mut mjtNum,
    pub xmat: *mut mjtNum,
    pub xipos: *mut mjtNum,
    pub ximat: *mut mjtNum,
    pub xanchor: *mut mjtNum,
    pub xaxis: *mut mjtNum,
    pub geom_xpos: *mut mjtNum,
    pub geom_xmat: *mut mjtNum,
    pub site_xpos: *mut mjtNum,
    pub site_xmat: *mut mjtNum,
    pub cam_xpos: *mut mjtNum,
    pub cam_xmat: *mut mjtNum,
    pub light_xpos: *mut mjtNum,
    pub light_xdir: *mut mjtNum,
    pub subtree_com: *mut mjtNum,
    pub cdof: *mut mjtNum,
    pub cinert: *mut mjtNum,
    pub flexvert_xpos: *mut mjtNum,
    pub flexelem_aabb: *mut mjtNum,
    pub flexedge_J_rownnz: *mut ::std::os::raw::c_int,
    pub flexedge_J_rowadr: *mut ::std::os::raw::c_int,
    pub flexedge_J_colind: *mut ::std::os::raw::c_int,
    pub flexedge_J: *mut mjtNum,
    pub flexedge_length: *mut mjtNum,
    pub ten_wrapadr: *mut ::std::os::raw::c_int,
    pub ten_wrapnum: *mut ::std::os::raw::c_int,
    pub ten_J_rownnz: *mut ::std::os::raw::c_int,
    pub ten_J_rowadr: *mut ::std::os::raw::c_int,
    pub ten_J_colind: *mut ::std::os::raw::c_int,
    pub ten_J: *mut mjtNum,
    pub ten_length: *mut mjtNum,
    pub wrap_obj: *mut ::std::os::raw::c_int,
    pub wrap_xpos: *mut mjtNum,
    pub actuator_length: *mut mjtNum,
    pub moment_rownnz: *mut ::std::os::raw::c_int,
    pub moment_rowadr: *mut ::std::os::raw::c_int,
    pub moment_colind: *mut ::std::os::raw::c_int,
    pub actuator_moment: *mut mjtNum,
    pub crb: *mut mjtNum,
    pub qM: *mut mjtNum,
    pub qLD: *mut mjtNum,
    pub qLDiagInv: *mut mjtNum,
    pub bvh_aabb_dyn: *mut mjtNum,
    pub bvh_active: *mut mjtByte,
    pub flexedge_velocity: *mut mjtNum,
    pub ten_velocity: *mut mjtNum,
    pub actuator_velocity: *mut mjtNum,
    pub cvel: *mut mjtNum,
    pub cdof_dot: *mut mjtNum,
    pub qfrc_bias: *mut mjtNum,
    pub qfrc_spring: *mut mjtNum,
    pub qfrc_damper: *mut mjtNum,
    pub qfrc_gravcomp: *mut mjtNum,
    pub qfrc_fluid: *mut mjtNum,
    pub qfrc_passive: *mut mjtNum,
    pub subtree_linvel: *mut mjtNum,
    pub subtree_angmom: *mut mjtNum,
    pub qH: *mut mjtNum,
    pub qHDiagInv: *mut mjtNum,
    pub B_rownnz: *mut ::std::os::raw::c_int,
    pub B_rowadr: *mut ::std::os::raw::c_int,
    pub B_colind: *mut ::std::os::raw::c_int,
    pub C_rownnz: *mut ::std::os::raw::c_int,
    pub C_rowadr: *mut ::std::os::raw::c_int,
    pub C_colind: *mut ::std::os::raw::c_int,
    pub mapM2C: *mut ::std::os::raw::c_int,
    pub D_rownnz: *mut ::std::os::raw::c_int,
    pub D_rowadr: *mut ::std::os::raw::c_int,
    pub D_diag: *mut ::std::os::raw::c_int,
    pub D_colind: *mut ::std::os::raw::c_int,
    pub mapM2D: *mut ::std::os::raw::c_int,
    pub mapD2M: *mut ::std::os::raw::c_int,
    pub qDeriv: *mut mjtNum,
    pub qLU: *mut mjtNum,
    pub actuator_force: *mut mjtNum,
    pub qfrc_actuator: *mut mjtNum,
    pub qfrc_smooth: *mut mjtNum,
    pub qacc_smooth: *mut mjtNum,
    pub qfrc_constraint: *mut mjtNum,
    pub qfrc_inverse: *mut mjtNum,
    pub cacc: *mut mjtNum,
    pub cfrc_int: *mut mjtNum,
    pub cfrc_ext: *mut mjtNum,
    pub contact: *mut mjContact,
    pub efc_type: *mut ::std::os::raw::c_int,
    pub efc_id: *mut ::std::os::raw::c_int,
    pub efc_J_rownnz: *mut ::std::os::raw::c_int,
    pub efc_J_rowadr: *mut ::std::os::raw::c_int,
    pub efc_J_rowsuper: *mut ::std::os::raw::c_int,
    pub efc_J_colind: *mut ::std::os::raw::c_int,
    pub efc_JT_rownnz: *mut ::std::os::raw::c_int,
    pub efc_JT_rowadr: *mut ::std::os::raw::c_int,
    pub efc_JT_rowsuper: *mut ::std::os::raw::c_int,
    pub efc_JT_colind: *mut ::std::os::raw::c_int,
    pub efc_J: *mut mjtNum,
    pub efc_JT: *mut mjtNum,
    pub efc_pos: *mut mjtNum,
    pub efc_margin: *mut mjtNum,
    pub efc_frictionloss: *mut mjtNum,
    pub efc_diagApprox: *mut mjtNum,
    pub efc_KBIP: *mut mjtNum,
    pub efc_D: *mut mjtNum,
    pub efc_R: *mut mjtNum,
    pub tendon_efcadr: *mut ::std::os::raw::c_int,
    pub dof_island: *mut ::std::os::raw::c_int,
    pub island_dofnum: *mut ::std::os::raw::c_int,
    pub island_dofadr: *mut ::std::os::raw::c_int,
    pub island_dofind: *mut ::std::os::raw::c_int,
    pub dof_islandind: *mut ::std::os::raw::c_int,
    pub efc_island: *mut ::std::os::raw::c_int,
    pub island_efcnum: *mut ::std::os::raw::c_int,
    pub island_efcadr: *mut ::std::os::raw::c_int,
    pub island_efcind: *mut ::std::os::raw::c_int,
    pub efc_AR_rownnz: *mut ::std::os::raw::c_int,
    pub efc_AR_rowadr: *mut ::std::os::raw::c_int,
    pub efc_AR_colind: *mut ::std::os::raw::c_int,
    pub efc_AR: *mut mjtNum,
    pub efc_vel: *mut mjtNum,
    pub efc_aref: *mut mjtNum,
    pub efc_b: *mut mjtNum,
    pub efc_force: *mut mjtNum,
    pub efc_state: *mut ::std::os::raw::c_int,
    pub threadpool: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjData_"][::std::mem::size_of::<mjData_>() - 162784usize];
    ["Alignment of mjData_"][::std::mem::align_of::<mjData_>() - 8usize];
    ["Offset of field: mjData_::narena"][::std::mem::offset_of!(mjData_, narena) - 0usize];
    ["Offset of field: mjData_::nbuffer"][::std::mem::offset_of!(mjData_, nbuffer) - 8usize];
    ["Offset of field: mjData_::nplugin"][::std::mem::offset_of!(mjData_, nplugin) - 16usize];
    ["Offset of field: mjData_::pstack"][::std::mem::offset_of!(mjData_, pstack) - 24usize];
    ["Offset of field: mjData_::pbase"][::std::mem::offset_of!(mjData_, pbase) - 32usize];
    ["Offset of field: mjData_::parena"][::std::mem::offset_of!(mjData_, parena) - 40usize];
    ["Offset of field: mjData_::maxuse_stack"]
        [::std::mem::offset_of!(mjData_, maxuse_stack) - 48usize];
    ["Offset of field: mjData_::maxuse_threadstack"]
        [::std::mem::offset_of!(mjData_, maxuse_threadstack) - 56usize];
    ["Offset of field: mjData_::maxuse_arena"]
        [::std::mem::offset_of!(mjData_, maxuse_arena) - 1080usize];
    ["Offset of field: mjData_::maxuse_con"]
        [::std::mem::offset_of!(mjData_, maxuse_con) - 1088usize];
    ["Offset of field: mjData_::maxuse_efc"]
        [::std::mem::offset_of!(mjData_, maxuse_efc) - 1092usize];
    ["Offset of field: mjData_::solver"][::std::mem::offset_of!(mjData_, solver) - 1096usize];
    ["Offset of field: mjData_::solver_nisland"]
        [::std::mem::offset_of!(mjData_, solver_nisland) - 161096usize];
    ["Offset of field: mjData_::solver_niter"]
        [::std::mem::offset_of!(mjData_, solver_niter) - 161100usize];
    ["Offset of field: mjData_::solver_nnz"]
        [::std::mem::offset_of!(mjData_, solver_nnz) - 161180usize];
    ["Offset of field: mjData_::solver_fwdinv"]
        [::std::mem::offset_of!(mjData_, solver_fwdinv) - 161264usize];
    ["Offset of field: mjData_::warning"][::std::mem::offset_of!(mjData_, warning) - 161280usize];
    ["Offset of field: mjData_::timer"][::std::mem::offset_of!(mjData_, timer) - 161344usize];
    ["Offset of field: mjData_::ncon"][::std::mem::offset_of!(mjData_, ncon) - 161584usize];
    ["Offset of field: mjData_::ne"][::std::mem::offset_of!(mjData_, ne) - 161588usize];
    ["Offset of field: mjData_::nf"][::std::mem::offset_of!(mjData_, nf) - 161592usize];
    ["Offset of field: mjData_::nl"][::std::mem::offset_of!(mjData_, nl) - 161596usize];
    ["Offset of field: mjData_::nefc"][::std::mem::offset_of!(mjData_, nefc) - 161600usize];
    ["Offset of field: mjData_::nJ"][::std::mem::offset_of!(mjData_, nJ) - 161604usize];
    ["Offset of field: mjData_::nA"][::std::mem::offset_of!(mjData_, nA) - 161608usize];
    ["Offset of field: mjData_::nisland"][::std::mem::offset_of!(mjData_, nisland) - 161612usize];
    ["Offset of field: mjData_::time"][::std::mem::offset_of!(mjData_, time) - 161616usize];
    ["Offset of field: mjData_::energy"][::std::mem::offset_of!(mjData_, energy) - 161624usize];
    ["Offset of field: mjData_::buffer"][::std::mem::offset_of!(mjData_, buffer) - 161640usize];
    ["Offset of field: mjData_::arena"][::std::mem::offset_of!(mjData_, arena) - 161648usize];
    ["Offset of field: mjData_::qpos"][::std::mem::offset_of!(mjData_, qpos) - 161656usize];
    ["Offset of field: mjData_::qvel"][::std::mem::offset_of!(mjData_, qvel) - 161664usize];
    ["Offset of field: mjData_::act"][::std::mem::offset_of!(mjData_, act) - 161672usize];
    ["Offset of field: mjData_::qacc_warmstart"]
        [::std::mem::offset_of!(mjData_, qacc_warmstart) - 161680usize];
    ["Offset of field: mjData_::plugin_state"]
        [::std::mem::offset_of!(mjData_, plugin_state) - 161688usize];
    ["Offset of field: mjData_::ctrl"][::std::mem::offset_of!(mjData_, ctrl) - 161696usize];
    ["Offset of field: mjData_::qfrc_applied"]
        [::std::mem::offset_of!(mjData_, qfrc_applied) - 161704usize];
    ["Offset of field: mjData_::xfrc_applied"]
        [::std::mem::offset_of!(mjData_, xfrc_applied) - 161712usize];
    ["Offset of field: mjData_::eq_active"]
        [::std::mem::offset_of!(mjData_, eq_active) - 161720usize];
    ["Offset of field: mjData_::mocap_pos"]
        [::std::mem::offset_of!(mjData_, mocap_pos) - 161728usize];
    ["Offset of field: mjData_::mocap_quat"]
        [::std::mem::offset_of!(mjData_, mocap_quat) - 161736usize];
    ["Offset of field: mjData_::qacc"][::std::mem::offset_of!(mjData_, qacc) - 161744usize];
    ["Offset of field: mjData_::act_dot"][::std::mem::offset_of!(mjData_, act_dot) - 161752usize];
    ["Offset of field: mjData_::userdata"][::std::mem::offset_of!(mjData_, userdata) - 161760usize];
    ["Offset of field: mjData_::sensordata"]
        [::std::mem::offset_of!(mjData_, sensordata) - 161768usize];
    ["Offset of field: mjData_::plugin"][::std::mem::offset_of!(mjData_, plugin) - 161776usize];
    ["Offset of field: mjData_::plugin_data"]
        [::std::mem::offset_of!(mjData_, plugin_data) - 161784usize];
    ["Offset of field: mjData_::xpos"][::std::mem::offset_of!(mjData_, xpos) - 161792usize];
    ["Offset of field: mjData_::xquat"][::std::mem::offset_of!(mjData_, xquat) - 161800usize];
    ["Offset of field: mjData_::xmat"][::std::mem::offset_of!(mjData_, xmat) - 161808usize];
    ["Offset of field: mjData_::xipos"][::std::mem::offset_of!(mjData_, xipos) - 161816usize];
    ["Offset of field: mjData_::ximat"][::std::mem::offset_of!(mjData_, ximat) - 161824usize];
    ["Offset of field: mjData_::xanchor"][::std::mem::offset_of!(mjData_, xanchor) - 161832usize];
    ["Offset of field: mjData_::xaxis"][::std::mem::offset_of!(mjData_, xaxis) - 161840usize];
    ["Offset of field: mjData_::geom_xpos"]
        [::std::mem::offset_of!(mjData_, geom_xpos) - 161848usize];
    ["Offset of field: mjData_::geom_xmat"]
        [::std::mem::offset_of!(mjData_, geom_xmat) - 161856usize];
    ["Offset of field: mjData_::site_xpos"]
        [::std::mem::offset_of!(mjData_, site_xpos) - 161864usize];
    ["Offset of field: mjData_::site_xmat"]
        [::std::mem::offset_of!(mjData_, site_xmat) - 161872usize];
    ["Offset of field: mjData_::cam_xpos"][::std::mem::offset_of!(mjData_, cam_xpos) - 161880usize];
    ["Offset of field: mjData_::cam_xmat"][::std::mem::offset_of!(mjData_, cam_xmat) - 161888usize];
    ["Offset of field: mjData_::light_xpos"]
        [::std::mem::offset_of!(mjData_, light_xpos) - 161896usize];
    ["Offset of field: mjData_::light_xdir"]
        [::std::mem::offset_of!(mjData_, light_xdir) - 161904usize];
    ["Offset of field: mjData_::subtree_com"]
        [::std::mem::offset_of!(mjData_, subtree_com) - 161912usize];
    ["Offset of field: mjData_::cdof"][::std::mem::offset_of!(mjData_, cdof) - 161920usize];
    ["Offset of field: mjData_::cinert"][::std::mem::offset_of!(mjData_, cinert) - 161928usize];
    ["Offset of field: mjData_::flexvert_xpos"]
        [::std::mem::offset_of!(mjData_, flexvert_xpos) - 161936usize];
    ["Offset of field: mjData_::flexelem_aabb"]
        [::std::mem::offset_of!(mjData_, flexelem_aabb) - 161944usize];
    ["Offset of field: mjData_::flexedge_J_rownnz"]
        [::std::mem::offset_of!(mjData_, flexedge_J_rownnz) - 161952usize];
    ["Offset of field: mjData_::flexedge_J_rowadr"]
        [::std::mem::offset_of!(mjData_, flexedge_J_rowadr) - 161960usize];
    ["Offset of field: mjData_::flexedge_J_colind"]
        [::std::mem::offset_of!(mjData_, flexedge_J_colind) - 161968usize];
    ["Offset of field: mjData_::flexedge_J"]
        [::std::mem::offset_of!(mjData_, flexedge_J) - 161976usize];
    ["Offset of field: mjData_::flexedge_length"]
        [::std::mem::offset_of!(mjData_, flexedge_length) - 161984usize];
    ["Offset of field: mjData_::ten_wrapadr"]
        [::std::mem::offset_of!(mjData_, ten_wrapadr) - 161992usize];
    ["Offset of field: mjData_::ten_wrapnum"]
        [::std::mem::offset_of!(mjData_, ten_wrapnum) - 162000usize];
    ["Offset of field: mjData_::ten_J_rownnz"]
        [::std::mem::offset_of!(mjData_, ten_J_rownnz) - 162008usize];
    ["Offset of field: mjData_::ten_J_rowadr"]
        [::std::mem::offset_of!(mjData_, ten_J_rowadr) - 162016usize];
    ["Offset of field: mjData_::ten_J_colind"]
        [::std::mem::offset_of!(mjData_, ten_J_colind) - 162024usize];
    ["Offset of field: mjData_::ten_J"][::std::mem::offset_of!(mjData_, ten_J) - 162032usize];
    ["Offset of field: mjData_::ten_length"]
        [::std::mem::offset_of!(mjData_, ten_length) - 162040usize];
    ["Offset of field: mjData_::wrap_obj"][::std::mem::offset_of!(mjData_, wrap_obj) - 162048usize];
    ["Offset of field: mjData_::wrap_xpos"]
        [::std::mem::offset_of!(mjData_, wrap_xpos) - 162056usize];
    ["Offset of field: mjData_::actuator_length"]
        [::std::mem::offset_of!(mjData_, actuator_length) - 162064usize];
    ["Offset of field: mjData_::moment_rownnz"]
        [::std::mem::offset_of!(mjData_, moment_rownnz) - 162072usize];
    ["Offset of field: mjData_::moment_rowadr"]
        [::std::mem::offset_of!(mjData_, moment_rowadr) - 162080usize];
    ["Offset of field: mjData_::moment_colind"]
        [::std::mem::offset_of!(mjData_, moment_colind) - 162088usize];
    ["Offset of field: mjData_::actuator_moment"]
        [::std::mem::offset_of!(mjData_, actuator_moment) - 162096usize];
    ["Offset of field: mjData_::crb"][::std::mem::offset_of!(mjData_, crb) - 162104usize];
    ["Offset of field: mjData_::qM"][::std::mem::offset_of!(mjData_, qM) - 162112usize];
    ["Offset of field: mjData_::qLD"][::std::mem::offset_of!(mjData_, qLD) - 162120usize];
    ["Offset of field: mjData_::qLDiagInv"]
        [::std::mem::offset_of!(mjData_, qLDiagInv) - 162128usize];
    ["Offset of field: mjData_::bvh_aabb_dyn"]
        [::std::mem::offset_of!(mjData_, bvh_aabb_dyn) - 162136usize];
    ["Offset of field: mjData_::bvh_active"]
        [::std::mem::offset_of!(mjData_, bvh_active) - 162144usize];
    ["Offset of field: mjData_::flexedge_velocity"]
        [::std::mem::offset_of!(mjData_, flexedge_velocity) - 162152usize];
    ["Offset of field: mjData_::ten_velocity"]
        [::std::mem::offset_of!(mjData_, ten_velocity) - 162160usize];
    ["Offset of field: mjData_::actuator_velocity"]
        [::std::mem::offset_of!(mjData_, actuator_velocity) - 162168usize];
    ["Offset of field: mjData_::cvel"][::std::mem::offset_of!(mjData_, cvel) - 162176usize];
    ["Offset of field: mjData_::cdof_dot"][::std::mem::offset_of!(mjData_, cdof_dot) - 162184usize];
    ["Offset of field: mjData_::qfrc_bias"]
        [::std::mem::offset_of!(mjData_, qfrc_bias) - 162192usize];
    ["Offset of field: mjData_::qfrc_spring"]
        [::std::mem::offset_of!(mjData_, qfrc_spring) - 162200usize];
    ["Offset of field: mjData_::qfrc_damper"]
        [::std::mem::offset_of!(mjData_, qfrc_damper) - 162208usize];
    ["Offset of field: mjData_::qfrc_gravcomp"]
        [::std::mem::offset_of!(mjData_, qfrc_gravcomp) - 162216usize];
    ["Offset of field: mjData_::qfrc_fluid"]
        [::std::mem::offset_of!(mjData_, qfrc_fluid) - 162224usize];
    ["Offset of field: mjData_::qfrc_passive"]
        [::std::mem::offset_of!(mjData_, qfrc_passive) - 162232usize];
    ["Offset of field: mjData_::subtree_linvel"]
        [::std::mem::offset_of!(mjData_, subtree_linvel) - 162240usize];
    ["Offset of field: mjData_::subtree_angmom"]
        [::std::mem::offset_of!(mjData_, subtree_angmom) - 162248usize];
    ["Offset of field: mjData_::qH"][::std::mem::offset_of!(mjData_, qH) - 162256usize];
    ["Offset of field: mjData_::qHDiagInv"]
        [::std::mem::offset_of!(mjData_, qHDiagInv) - 162264usize];
    ["Offset of field: mjData_::B_rownnz"][::std::mem::offset_of!(mjData_, B_rownnz) - 162272usize];
    ["Offset of field: mjData_::B_rowadr"][::std::mem::offset_of!(mjData_, B_rowadr) - 162280usize];
    ["Offset of field: mjData_::B_colind"][::std::mem::offset_of!(mjData_, B_colind) - 162288usize];
    ["Offset of field: mjData_::C_rownnz"][::std::mem::offset_of!(mjData_, C_rownnz) - 162296usize];
    ["Offset of field: mjData_::C_rowadr"][::std::mem::offset_of!(mjData_, C_rowadr) - 162304usize];
    ["Offset of field: mjData_::C_colind"][::std::mem::offset_of!(mjData_, C_colind) - 162312usize];
    ["Offset of field: mjData_::mapM2C"][::std::mem::offset_of!(mjData_, mapM2C) - 162320usize];
    ["Offset of field: mjData_::D_rownnz"][::std::mem::offset_of!(mjData_, D_rownnz) - 162328usize];
    ["Offset of field: mjData_::D_rowadr"][::std::mem::offset_of!(mjData_, D_rowadr) - 162336usize];
    ["Offset of field: mjData_::D_diag"][::std::mem::offset_of!(mjData_, D_diag) - 162344usize];
    ["Offset of field: mjData_::D_colind"][::std::mem::offset_of!(mjData_, D_colind) - 162352usize];
    ["Offset of field: mjData_::mapM2D"][::std::mem::offset_of!(mjData_, mapM2D) - 162360usize];
    ["Offset of field: mjData_::mapD2M"][::std::mem::offset_of!(mjData_, mapD2M) - 162368usize];
    ["Offset of field: mjData_::qDeriv"][::std::mem::offset_of!(mjData_, qDeriv) - 162376usize];
    ["Offset of field: mjData_::qLU"][::std::mem::offset_of!(mjData_, qLU) - 162384usize];
    ["Offset of field: mjData_::actuator_force"]
        [::std::mem::offset_of!(mjData_, actuator_force) - 162392usize];
    ["Offset of field: mjData_::qfrc_actuator"]
        [::std::mem::offset_of!(mjData_, qfrc_actuator) - 162400usize];
    ["Offset of field: mjData_::qfrc_smooth"]
        [::std::mem::offset_of!(mjData_, qfrc_smooth) - 162408usize];
    ["Offset of field: mjData_::qacc_smooth"]
        [::std::mem::offset_of!(mjData_, qacc_smooth) - 162416usize];
    ["Offset of field: mjData_::qfrc_constraint"]
        [::std::mem::offset_of!(mjData_, qfrc_constraint) - 162424usize];
    ["Offset of field: mjData_::qfrc_inverse"]
        [::std::mem::offset_of!(mjData_, qfrc_inverse) - 162432usize];
    ["Offset of field: mjData_::cacc"][::std::mem::offset_of!(mjData_, cacc) - 162440usize];
    ["Offset of field: mjData_::cfrc_int"][::std::mem::offset_of!(mjData_, cfrc_int) - 162448usize];
    ["Offset of field: mjData_::cfrc_ext"][::std::mem::offset_of!(mjData_, cfrc_ext) - 162456usize];
    ["Offset of field: mjData_::contact"][::std::mem::offset_of!(mjData_, contact) - 162464usize];
    ["Offset of field: mjData_::efc_type"][::std::mem::offset_of!(mjData_, efc_type) - 162472usize];
    ["Offset of field: mjData_::efc_id"][::std::mem::offset_of!(mjData_, efc_id) - 162480usize];
    ["Offset of field: mjData_::efc_J_rownnz"]
        [::std::mem::offset_of!(mjData_, efc_J_rownnz) - 162488usize];
    ["Offset of field: mjData_::efc_J_rowadr"]
        [::std::mem::offset_of!(mjData_, efc_J_rowadr) - 162496usize];
    ["Offset of field: mjData_::efc_J_rowsuper"]
        [::std::mem::offset_of!(mjData_, efc_J_rowsuper) - 162504usize];
    ["Offset of field: mjData_::efc_J_colind"]
        [::std::mem::offset_of!(mjData_, efc_J_colind) - 162512usize];
    ["Offset of field: mjData_::efc_JT_rownnz"]
        [::std::mem::offset_of!(mjData_, efc_JT_rownnz) - 162520usize];
    ["Offset of field: mjData_::efc_JT_rowadr"]
        [::std::mem::offset_of!(mjData_, efc_JT_rowadr) - 162528usize];
    ["Offset of field: mjData_::efc_JT_rowsuper"]
        [::std::mem::offset_of!(mjData_, efc_JT_rowsuper) - 162536usize];
    ["Offset of field: mjData_::efc_JT_colind"]
        [::std::mem::offset_of!(mjData_, efc_JT_colind) - 162544usize];
    ["Offset of field: mjData_::efc_J"][::std::mem::offset_of!(mjData_, efc_J) - 162552usize];
    ["Offset of field: mjData_::efc_JT"][::std::mem::offset_of!(mjData_, efc_JT) - 162560usize];
    ["Offset of field: mjData_::efc_pos"][::std::mem::offset_of!(mjData_, efc_pos) - 162568usize];
    ["Offset of field: mjData_::efc_margin"]
        [::std::mem::offset_of!(mjData_, efc_margin) - 162576usize];
    ["Offset of field: mjData_::efc_frictionloss"]
        [::std::mem::offset_of!(mjData_, efc_frictionloss) - 162584usize];
    ["Offset of field: mjData_::efc_diagApprox"]
        [::std::mem::offset_of!(mjData_, efc_diagApprox) - 162592usize];
    ["Offset of field: mjData_::efc_KBIP"][::std::mem::offset_of!(mjData_, efc_KBIP) - 162600usize];
    ["Offset of field: mjData_::efc_D"][::std::mem::offset_of!(mjData_, efc_D) - 162608usize];
    ["Offset of field: mjData_::efc_R"][::std::mem::offset_of!(mjData_, efc_R) - 162616usize];
    ["Offset of field: mjData_::tendon_efcadr"]
        [::std::mem::offset_of!(mjData_, tendon_efcadr) - 162624usize];
    ["Offset of field: mjData_::dof_island"]
        [::std::mem::offset_of!(mjData_, dof_island) - 162632usize];
    ["Offset of field: mjData_::island_dofnum"]
        [::std::mem::offset_of!(mjData_, island_dofnum) - 162640usize];
    ["Offset of field: mjData_::island_dofadr"]
        [::std::mem::offset_of!(mjData_, island_dofadr) - 162648usize];
    ["Offset of field: mjData_::island_dofind"]
        [::std::mem::offset_of!(mjData_, island_dofind) - 162656usize];
    ["Offset of field: mjData_::dof_islandind"]
        [::std::mem::offset_of!(mjData_, dof_islandind) - 162664usize];
    ["Offset of field: mjData_::efc_island"]
        [::std::mem::offset_of!(mjData_, efc_island) - 162672usize];
    ["Offset of field: mjData_::island_efcnum"]
        [::std::mem::offset_of!(mjData_, island_efcnum) - 162680usize];
    ["Offset of field: mjData_::island_efcadr"]
        [::std::mem::offset_of!(mjData_, island_efcadr) - 162688usize];
    ["Offset of field: mjData_::island_efcind"]
        [::std::mem::offset_of!(mjData_, island_efcind) - 162696usize];
    ["Offset of field: mjData_::efc_AR_rownnz"]
        [::std::mem::offset_of!(mjData_, efc_AR_rownnz) - 162704usize];
    ["Offset of field: mjData_::efc_AR_rowadr"]
        [::std::mem::offset_of!(mjData_, efc_AR_rowadr) - 162712usize];
    ["Offset of field: mjData_::efc_AR_colind"]
        [::std::mem::offset_of!(mjData_, efc_AR_colind) - 162720usize];
    ["Offset of field: mjData_::efc_AR"][::std::mem::offset_of!(mjData_, efc_AR) - 162728usize];
    ["Offset of field: mjData_::efc_vel"][::std::mem::offset_of!(mjData_, efc_vel) - 162736usize];
    ["Offset of field: mjData_::efc_aref"][::std::mem::offset_of!(mjData_, efc_aref) - 162744usize];
    ["Offset of field: mjData_::efc_b"][::std::mem::offset_of!(mjData_, efc_b) - 162752usize];
    ["Offset of field: mjData_::efc_force"]
        [::std::mem::offset_of!(mjData_, efc_force) - 162760usize];
    ["Offset of field: mjData_::efc_state"]
        [::std::mem::offset_of!(mjData_, efc_state) - 162768usize];
    ["Offset of field: mjData_::threadpool"]
        [::std::mem::offset_of!(mjData_, threadpool) - 162776usize];
};
impl Default for mjData_ {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mjData = mjData_;
pub type mjfGeneric =
    ::std::option::Option<unsafe extern "C" fn(m: *const mjModel, d: *mut mjData)>;
pub type mjfConFilt = ::std::option::Option<
    unsafe extern "C" fn(
        m: *const mjModel,
        d: *mut mjData,
        geom1: ::std::os::raw::c_int,
        geom2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type mjfSensor = ::std::option::Option<
    unsafe extern "C" fn(m: *const mjModel, d: *mut mjData, stage: ::std::os::raw::c_int),
>;
pub type mjfTime = ::std::option::Option<unsafe extern "C" fn() -> mjtNum>;
pub type mjfAct = ::std::option::Option<
    unsafe extern "C" fn(m: *const mjModel, d: *const mjData, id: ::std::os::raw::c_int) -> mjtNum,
>;
pub type mjfCollision = ::std::option::Option<
    unsafe extern "C" fn(
        m: *const mjModel,
        d: *const mjData,
        con: *mut mjContact,
        g1: ::std::os::raw::c_int,
        g2: ::std::os::raw::c_int,
        margin: mjtNum,
    ) -> ::std::os::raw::c_int,
>;
pub const mjtCatBit__mjCAT_STATIC: mjtCatBit_ = 1;
pub const mjtCatBit__mjCAT_DYNAMIC: mjtCatBit_ = 2;
pub const mjtCatBit__mjCAT_DECOR: mjtCatBit_ = 4;
pub const mjtCatBit__mjCAT_ALL: mjtCatBit_ = 7;
pub type mjtCatBit_ = ::std::os::raw::c_uint;
pub use self::mjtCatBit_ as mjtCatBit;
pub const mjtMouse__mjMOUSE_NONE: mjtMouse_ = 0;
pub const mjtMouse__mjMOUSE_ROTATE_V: mjtMouse_ = 1;
pub const mjtMouse__mjMOUSE_ROTATE_H: mjtMouse_ = 2;
pub const mjtMouse__mjMOUSE_MOVE_V: mjtMouse_ = 3;
pub const mjtMouse__mjMOUSE_MOVE_H: mjtMouse_ = 4;
pub const mjtMouse__mjMOUSE_ZOOM: mjtMouse_ = 5;
pub const mjtMouse__mjMOUSE_SELECT: mjtMouse_ = 6;
pub type mjtMouse_ = ::std::os::raw::c_uint;
pub use self::mjtMouse_ as mjtMouse;
pub const mjtPertBit__mjPERT_TRANSLATE: mjtPertBit_ = 1;
pub const mjtPertBit__mjPERT_ROTATE: mjtPertBit_ = 2;
pub type mjtPertBit_ = ::std::os::raw::c_uint;
pub use self::mjtPertBit_ as mjtPertBit;
pub const mjtCamera__mjCAMERA_FREE: mjtCamera_ = 0;
pub const mjtCamera__mjCAMERA_TRACKING: mjtCamera_ = 1;
pub const mjtCamera__mjCAMERA_FIXED: mjtCamera_ = 2;
pub const mjtCamera__mjCAMERA_USER: mjtCamera_ = 3;
pub type mjtCamera_ = ::std::os::raw::c_uint;
pub use self::mjtCamera_ as mjtCamera;
pub const mjtLabel__mjLABEL_NONE: mjtLabel_ = 0;
pub const mjtLabel__mjLABEL_BODY: mjtLabel_ = 1;
pub const mjtLabel__mjLABEL_JOINT: mjtLabel_ = 2;
pub const mjtLabel__mjLABEL_GEOM: mjtLabel_ = 3;
pub const mjtLabel__mjLABEL_SITE: mjtLabel_ = 4;
pub const mjtLabel__mjLABEL_CAMERA: mjtLabel_ = 5;
pub const mjtLabel__mjLABEL_LIGHT: mjtLabel_ = 6;
pub const mjtLabel__mjLABEL_TENDON: mjtLabel_ = 7;
pub const mjtLabel__mjLABEL_ACTUATOR: mjtLabel_ = 8;
pub const mjtLabel__mjLABEL_CONSTRAINT: mjtLabel_ = 9;
pub const mjtLabel__mjLABEL_FLEX: mjtLabel_ = 10;
pub const mjtLabel__mjLABEL_SKIN: mjtLabel_ = 11;
pub const mjtLabel__mjLABEL_SELECTION: mjtLabel_ = 12;
pub const mjtLabel__mjLABEL_SELPNT: mjtLabel_ = 13;
pub const mjtLabel__mjLABEL_CONTACTPOINT: mjtLabel_ = 14;
pub const mjtLabel__mjLABEL_CONTACTFORCE: mjtLabel_ = 15;
pub const mjtLabel__mjLABEL_ISLAND: mjtLabel_ = 16;
pub const mjtLabel__mjNLABEL: mjtLabel_ = 17;
pub type mjtLabel_ = ::std::os::raw::c_uint;
pub use self::mjtLabel_ as mjtLabel;
pub const mjtFrame__mjFRAME_NONE: mjtFrame_ = 0;
pub const mjtFrame__mjFRAME_BODY: mjtFrame_ = 1;
pub const mjtFrame__mjFRAME_GEOM: mjtFrame_ = 2;
pub const mjtFrame__mjFRAME_SITE: mjtFrame_ = 3;
pub const mjtFrame__mjFRAME_CAMERA: mjtFrame_ = 4;
pub const mjtFrame__mjFRAME_LIGHT: mjtFrame_ = 5;
pub const mjtFrame__mjFRAME_CONTACT: mjtFrame_ = 6;
pub const mjtFrame__mjFRAME_WORLD: mjtFrame_ = 7;
pub const mjtFrame__mjNFRAME: mjtFrame_ = 8;
pub type mjtFrame_ = ::std::os::raw::c_uint;
pub use self::mjtFrame_ as mjtFrame;
pub const mjtVisFlag__mjVIS_CONVEXHULL: mjtVisFlag_ = 0;
pub const mjtVisFlag__mjVIS_TEXTURE: mjtVisFlag_ = 1;
pub const mjtVisFlag__mjVIS_JOINT: mjtVisFlag_ = 2;
pub const mjtVisFlag__mjVIS_CAMERA: mjtVisFlag_ = 3;
pub const mjtVisFlag__mjVIS_ACTUATOR: mjtVisFlag_ = 4;
pub const mjtVisFlag__mjVIS_ACTIVATION: mjtVisFlag_ = 5;
pub const mjtVisFlag__mjVIS_LIGHT: mjtVisFlag_ = 6;
pub const mjtVisFlag__mjVIS_TENDON: mjtVisFlag_ = 7;
pub const mjtVisFlag__mjVIS_RANGEFINDER: mjtVisFlag_ = 8;
pub const mjtVisFlag__mjVIS_CONSTRAINT: mjtVisFlag_ = 9;
pub const mjtVisFlag__mjVIS_INERTIA: mjtVisFlag_ = 10;
pub const mjtVisFlag__mjVIS_SCLINERTIA: mjtVisFlag_ = 11;
pub const mjtVisFlag__mjVIS_PERTFORCE: mjtVisFlag_ = 12;
pub const mjtVisFlag__mjVIS_PERTOBJ: mjtVisFlag_ = 13;
pub const mjtVisFlag__mjVIS_CONTACTPOINT: mjtVisFlag_ = 14;
pub const mjtVisFlag__mjVIS_ISLAND: mjtVisFlag_ = 15;
pub const mjtVisFlag__mjVIS_CONTACTFORCE: mjtVisFlag_ = 16;
pub const mjtVisFlag__mjVIS_CONTACTSPLIT: mjtVisFlag_ = 17;
pub const mjtVisFlag__mjVIS_TRANSPARENT: mjtVisFlag_ = 18;
pub const mjtVisFlag__mjVIS_AUTOCONNECT: mjtVisFlag_ = 19;
pub const mjtVisFlag__mjVIS_COM: mjtVisFlag_ = 20;
pub const mjtVisFlag__mjVIS_SELECT: mjtVisFlag_ = 21;
pub const mjtVisFlag__mjVIS_STATIC: mjtVisFlag_ = 22;
pub const mjtVisFlag__mjVIS_SKIN: mjtVisFlag_ = 23;
pub const mjtVisFlag__mjVIS_FLEXVERT: mjtVisFlag_ = 24;
pub const mjtVisFlag__mjVIS_FLEXEDGE: mjtVisFlag_ = 25;
pub const mjtVisFlag__mjVIS_FLEXFACE: mjtVisFlag_ = 26;
pub const mjtVisFlag__mjVIS_FLEXSKIN: mjtVisFlag_ = 27;
pub const mjtVisFlag__mjVIS_BODYBVH: mjtVisFlag_ = 28;
pub const mjtVisFlag__mjVIS_FLEXBVH: mjtVisFlag_ = 29;
pub const mjtVisFlag__mjVIS_MESHBVH: mjtVisFlag_ = 30;
pub const mjtVisFlag__mjVIS_SDFITER: mjtVisFlag_ = 31;
pub const mjtVisFlag__mjNVISFLAG: mjtVisFlag_ = 32;
pub type mjtVisFlag_ = ::std::os::raw::c_uint;
pub use self::mjtVisFlag_ as mjtVisFlag;
pub const mjtRndFlag__mjRND_SHADOW: mjtRndFlag_ = 0;
pub const mjtRndFlag__mjRND_WIREFRAME: mjtRndFlag_ = 1;
pub const mjtRndFlag__mjRND_REFLECTION: mjtRndFlag_ = 2;
pub const mjtRndFlag__mjRND_ADDITIVE: mjtRndFlag_ = 3;
pub const mjtRndFlag__mjRND_SKYBOX: mjtRndFlag_ = 4;
pub const mjtRndFlag__mjRND_FOG: mjtRndFlag_ = 5;
pub const mjtRndFlag__mjRND_HAZE: mjtRndFlag_ = 6;
pub const mjtRndFlag__mjRND_SEGMENT: mjtRndFlag_ = 7;
pub const mjtRndFlag__mjRND_IDCOLOR: mjtRndFlag_ = 8;
pub const mjtRndFlag__mjRND_CULL_FACE: mjtRndFlag_ = 9;
pub const mjtRndFlag__mjNRNDFLAG: mjtRndFlag_ = 10;
pub type mjtRndFlag_ = ::std::os::raw::c_uint;
pub use self::mjtRndFlag_ as mjtRndFlag;
pub const mjtStereo__mjSTEREO_NONE: mjtStereo_ = 0;
pub const mjtStereo__mjSTEREO_QUADBUFFERED: mjtStereo_ = 1;
pub const mjtStereo__mjSTEREO_SIDEBYSIDE: mjtStereo_ = 2;
pub type mjtStereo_ = ::std::os::raw::c_uint;
pub use self::mjtStereo_ as mjtStereo;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mjvPerturb_ {
    pub select: ::std::os::raw::c_int,
    pub flexselect: ::std::os::raw::c_int,
    pub skinselect: ::std::os::raw::c_int,
    pub active: ::std::os::raw::c_int,
    pub active2: ::std::os::raw::c_int,
    pub refpos: [mjtNum; 3usize],
    pub refquat: [mjtNum; 4usize],
    pub refselpos: [mjtNum; 3usize],
    pub localpos: [mjtNum; 3usize],
    pub localmass: mjtNum,
    pub scale: mjtNum,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjvPerturb_"][::std::mem::size_of::<mjvPerturb_>() - 144usize];
    ["Alignment of mjvPerturb_"][::std::mem::align_of::<mjvPerturb_>() - 8usize];
    ["Offset of field: mjvPerturb_::select"][::std::mem::offset_of!(mjvPerturb_, select) - 0usize];
    ["Offset of field: mjvPerturb_::flexselect"]
        [::std::mem::offset_of!(mjvPerturb_, flexselect) - 4usize];
    ["Offset of field: mjvPerturb_::skinselect"]
        [::std::mem::offset_of!(mjvPerturb_, skinselect) - 8usize];
    ["Offset of field: mjvPerturb_::active"][::std::mem::offset_of!(mjvPerturb_, active) - 12usize];
    ["Offset of field: mjvPerturb_::active2"]
        [::std::mem::offset_of!(mjvPerturb_, active2) - 16usize];
    ["Offset of field: mjvPerturb_::refpos"][::std::mem::offset_of!(mjvPerturb_, refpos) - 24usize];
    ["Offset of field: mjvPerturb_::refquat"]
        [::std::mem::offset_of!(mjvPerturb_, refquat) - 48usize];
    ["Offset of field: mjvPerturb_::refselpos"]
        [::std::mem::offset_of!(mjvPerturb_, refselpos) - 80usize];
    ["Offset of field: mjvPerturb_::localpos"]
        [::std::mem::offset_of!(mjvPerturb_, localpos) - 104usize];
    ["Offset of field: mjvPerturb_::localmass"]
        [::std::mem::offset_of!(mjvPerturb_, localmass) - 128usize];
    ["Offset of field: mjvPerturb_::scale"][::std::mem::offset_of!(mjvPerturb_, scale) - 136usize];
};
pub type mjvPerturb = mjvPerturb_;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mjvCamera_ {
    pub type_: ::std::os::raw::c_int,
    pub fixedcamid: ::std::os::raw::c_int,
    pub trackbodyid: ::std::os::raw::c_int,
    pub lookat: [mjtNum; 3usize],
    pub distance: mjtNum,
    pub azimuth: mjtNum,
    pub elevation: mjtNum,
    pub orthographic: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjvCamera_"][::std::mem::size_of::<mjvCamera_>() - 72usize];
    ["Alignment of mjvCamera_"][::std::mem::align_of::<mjvCamera_>() - 8usize];
    ["Offset of field: mjvCamera_::type_"][::std::mem::offset_of!(mjvCamera_, type_) - 0usize];
    ["Offset of field: mjvCamera_::fixedcamid"]
        [::std::mem::offset_of!(mjvCamera_, fixedcamid) - 4usize];
    ["Offset of field: mjvCamera_::trackbodyid"]
        [::std::mem::offset_of!(mjvCamera_, trackbodyid) - 8usize];
    ["Offset of field: mjvCamera_::lookat"][::std::mem::offset_of!(mjvCamera_, lookat) - 16usize];
    ["Offset of field: mjvCamera_::distance"]
        [::std::mem::offset_of!(mjvCamera_, distance) - 40usize];
    ["Offset of field: mjvCamera_::azimuth"][::std::mem::offset_of!(mjvCamera_, azimuth) - 48usize];
    ["Offset of field: mjvCamera_::elevation"]
        [::std::mem::offset_of!(mjvCamera_, elevation) - 56usize];
    ["Offset of field: mjvCamera_::orthographic"]
        [::std::mem::offset_of!(mjvCamera_, orthographic) - 64usize];
};
pub type mjvCamera = mjvCamera_;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mjvGLCamera_ {
    pub pos: [f32; 3usize],
    pub forward: [f32; 3usize],
    pub up: [f32; 3usize],
    pub frustum_center: f32,
    pub frustum_width: f32,
    pub frustum_bottom: f32,
    pub frustum_top: f32,
    pub frustum_near: f32,
    pub frustum_far: f32,
    pub orthographic: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjvGLCamera_"][::std::mem::size_of::<mjvGLCamera_>() - 64usize];
    ["Alignment of mjvGLCamera_"][::std::mem::align_of::<mjvGLCamera_>() - 4usize];
    ["Offset of field: mjvGLCamera_::pos"][::std::mem::offset_of!(mjvGLCamera_, pos) - 0usize];
    ["Offset of field: mjvGLCamera_::forward"]
        [::std::mem::offset_of!(mjvGLCamera_, forward) - 12usize];
    ["Offset of field: mjvGLCamera_::up"][::std::mem::offset_of!(mjvGLCamera_, up) - 24usize];
    ["Offset of field: mjvGLCamera_::frustum_center"]
        [::std::mem::offset_of!(mjvGLCamera_, frustum_center) - 36usize];
    ["Offset of field: mjvGLCamera_::frustum_width"]
        [::std::mem::offset_of!(mjvGLCamera_, frustum_width) - 40usize];
    ["Offset of field: mjvGLCamera_::frustum_bottom"]
        [::std::mem::offset_of!(mjvGLCamera_, frustum_bottom) - 44usize];
    ["Offset of field: mjvGLCamera_::frustum_top"]
        [::std::mem::offset_of!(mjvGLCamera_, frustum_top) - 48usize];
    ["Offset of field: mjvGLCamera_::frustum_near"]
        [::std::mem::offset_of!(mjvGLCamera_, frustum_near) - 52usize];
    ["Offset of field: mjvGLCamera_::frustum_far"]
        [::std::mem::offset_of!(mjvGLCamera_, frustum_far) - 56usize];
    ["Offset of field: mjvGLCamera_::orthographic"]
        [::std::mem::offset_of!(mjvGLCamera_, orthographic) - 60usize];
};
pub type mjvGLCamera = mjvGLCamera_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mjvGeom_ {
    pub type_: ::std::os::raw::c_int,
    pub dataid: ::std::os::raw::c_int,
    pub objtype: ::std::os::raw::c_int,
    pub objid: ::std::os::raw::c_int,
    pub category: ::std::os::raw::c_int,
    pub matid: ::std::os::raw::c_int,
    pub texcoord: ::std::os::raw::c_int,
    pub segid: ::std::os::raw::c_int,
    pub size: [f32; 3usize],
    pub pos: [f32; 3usize],
    pub mat: [f32; 9usize],
    pub rgba: [f32; 4usize],
    pub emission: f32,
    pub specular: f32,
    pub shininess: f32,
    pub reflectance: f32,
    pub label: [::std::os::raw::c_char; 100usize],
    pub camdist: f32,
    pub modelrbound: f32,
    pub transparent: mjtByte,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjvGeom_"][::std::mem::size_of::<mjvGeom_>() - 236usize];
    ["Alignment of mjvGeom_"][::std::mem::align_of::<mjvGeom_>() - 4usize];
    ["Offset of field: mjvGeom_::type_"][::std::mem::offset_of!(mjvGeom_, type_) - 0usize];
    ["Offset of field: mjvGeom_::dataid"][::std::mem::offset_of!(mjvGeom_, dataid) - 4usize];
    ["Offset of field: mjvGeom_::objtype"][::std::mem::offset_of!(mjvGeom_, objtype) - 8usize];
    ["Offset of field: mjvGeom_::objid"][::std::mem::offset_of!(mjvGeom_, objid) - 12usize];
    ["Offset of field: mjvGeom_::category"][::std::mem::offset_of!(mjvGeom_, category) - 16usize];
    ["Offset of field: mjvGeom_::matid"][::std::mem::offset_of!(mjvGeom_, matid) - 20usize];
    ["Offset of field: mjvGeom_::texcoord"][::std::mem::offset_of!(mjvGeom_, texcoord) - 24usize];
    ["Offset of field: mjvGeom_::segid"][::std::mem::offset_of!(mjvGeom_, segid) - 28usize];
    ["Offset of field: mjvGeom_::size"][::std::mem::offset_of!(mjvGeom_, size) - 32usize];
    ["Offset of field: mjvGeom_::pos"][::std::mem::offset_of!(mjvGeom_, pos) - 44usize];
    ["Offset of field: mjvGeom_::mat"][::std::mem::offset_of!(mjvGeom_, mat) - 56usize];
    ["Offset of field: mjvGeom_::rgba"][::std::mem::offset_of!(mjvGeom_, rgba) - 92usize];
    ["Offset of field: mjvGeom_::emission"][::std::mem::offset_of!(mjvGeom_, emission) - 108usize];
    ["Offset of field: mjvGeom_::specular"][::std::mem::offset_of!(mjvGeom_, specular) - 112usize];
    ["Offset of field: mjvGeom_::shininess"]
        [::std::mem::offset_of!(mjvGeom_, shininess) - 116usize];
    ["Offset of field: mjvGeom_::reflectance"]
        [::std::mem::offset_of!(mjvGeom_, reflectance) - 120usize];
    ["Offset of field: mjvGeom_::label"][::std::mem::offset_of!(mjvGeom_, label) - 124usize];
    ["Offset of field: mjvGeom_::camdist"][::std::mem::offset_of!(mjvGeom_, camdist) - 224usize];
    ["Offset of field: mjvGeom_::modelrbound"]
        [::std::mem::offset_of!(mjvGeom_, modelrbound) - 228usize];
    ["Offset of field: mjvGeom_::transparent"]
        [::std::mem::offset_of!(mjvGeom_, transparent) - 232usize];
};
impl Default for mjvGeom_ {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mjvGeom = mjvGeom_;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mjvLight_ {
    pub pos: [f32; 3usize],
    pub dir: [f32; 3usize],
    pub attenuation: [f32; 3usize],
    pub cutoff: f32,
    pub exponent: f32,
    pub ambient: [f32; 3usize],
    pub diffuse: [f32; 3usize],
    pub specular: [f32; 3usize],
    pub headlight: mjtByte,
    pub directional: mjtByte,
    pub castshadow: mjtByte,
    pub bulbradius: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjvLight_"][::std::mem::size_of::<mjvLight_>() - 88usize];
    ["Alignment of mjvLight_"][::std::mem::align_of::<mjvLight_>() - 4usize];
    ["Offset of field: mjvLight_::pos"][::std::mem::offset_of!(mjvLight_, pos) - 0usize];
    ["Offset of field: mjvLight_::dir"][::std::mem::offset_of!(mjvLight_, dir) - 12usize];
    ["Offset of field: mjvLight_::attenuation"]
        [::std::mem::offset_of!(mjvLight_, attenuation) - 24usize];
    ["Offset of field: mjvLight_::cutoff"][::std::mem::offset_of!(mjvLight_, cutoff) - 36usize];
    ["Offset of field: mjvLight_::exponent"][::std::mem::offset_of!(mjvLight_, exponent) - 40usize];
    ["Offset of field: mjvLight_::ambient"][::std::mem::offset_of!(mjvLight_, ambient) - 44usize];
    ["Offset of field: mjvLight_::diffuse"][::std::mem::offset_of!(mjvLight_, diffuse) - 56usize];
    ["Offset of field: mjvLight_::specular"][::std::mem::offset_of!(mjvLight_, specular) - 68usize];
    ["Offset of field: mjvLight_::headlight"]
        [::std::mem::offset_of!(mjvLight_, headlight) - 80usize];
    ["Offset of field: mjvLight_::directional"]
        [::std::mem::offset_of!(mjvLight_, directional) - 81usize];
    ["Offset of field: mjvLight_::castshadow"]
        [::std::mem::offset_of!(mjvLight_, castshadow) - 82usize];
    ["Offset of field: mjvLight_::bulbradius"]
        [::std::mem::offset_of!(mjvLight_, bulbradius) - 84usize];
};
pub type mjvLight = mjvLight_;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mjvOption_ {
    pub label: ::std::os::raw::c_int,
    pub frame: ::std::os::raw::c_int,
    pub geomgroup: [mjtByte; 6usize],
    pub sitegroup: [mjtByte; 6usize],
    pub jointgroup: [mjtByte; 6usize],
    pub tendongroup: [mjtByte; 6usize],
    pub actuatorgroup: [mjtByte; 6usize],
    pub flexgroup: [mjtByte; 6usize],
    pub skingroup: [mjtByte; 6usize],
    pub flags: [mjtByte; 32usize],
    pub bvh_depth: ::std::os::raw::c_int,
    pub flex_layer: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjvOption_"][::std::mem::size_of::<mjvOption_>() - 92usize];
    ["Alignment of mjvOption_"][::std::mem::align_of::<mjvOption_>() - 4usize];
    ["Offset of field: mjvOption_::label"][::std::mem::offset_of!(mjvOption_, label) - 0usize];
    ["Offset of field: mjvOption_::frame"][::std::mem::offset_of!(mjvOption_, frame) - 4usize];
    ["Offset of field: mjvOption_::geomgroup"]
        [::std::mem::offset_of!(mjvOption_, geomgroup) - 8usize];
    ["Offset of field: mjvOption_::sitegroup"]
        [::std::mem::offset_of!(mjvOption_, sitegroup) - 14usize];
    ["Offset of field: mjvOption_::jointgroup"]
        [::std::mem::offset_of!(mjvOption_, jointgroup) - 20usize];
    ["Offset of field: mjvOption_::tendongroup"]
        [::std::mem::offset_of!(mjvOption_, tendongroup) - 26usize];
    ["Offset of field: mjvOption_::actuatorgroup"]
        [::std::mem::offset_of!(mjvOption_, actuatorgroup) - 32usize];
    ["Offset of field: mjvOption_::flexgroup"]
        [::std::mem::offset_of!(mjvOption_, flexgroup) - 38usize];
    ["Offset of field: mjvOption_::skingroup"]
        [::std::mem::offset_of!(mjvOption_, skingroup) - 44usize];
    ["Offset of field: mjvOption_::flags"][::std::mem::offset_of!(mjvOption_, flags) - 50usize];
    ["Offset of field: mjvOption_::bvh_depth"]
        [::std::mem::offset_of!(mjvOption_, bvh_depth) - 84usize];
    ["Offset of field: mjvOption_::flex_layer"]
        [::std::mem::offset_of!(mjvOption_, flex_layer) - 88usize];
};
pub type mjvOption = mjvOption_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mjvScene_ {
    pub maxgeom: ::std::os::raw::c_int,
    pub ngeom: ::std::os::raw::c_int,
    pub geoms: *mut mjvGeom,
    pub geomorder: *mut ::std::os::raw::c_int,
    pub nflex: ::std::os::raw::c_int,
    pub flexedgeadr: *mut ::std::os::raw::c_int,
    pub flexedgenum: *mut ::std::os::raw::c_int,
    pub flexvertadr: *mut ::std::os::raw::c_int,
    pub flexvertnum: *mut ::std::os::raw::c_int,
    pub flexfaceadr: *mut ::std::os::raw::c_int,
    pub flexfacenum: *mut ::std::os::raw::c_int,
    pub flexfaceused: *mut ::std::os::raw::c_int,
    pub flexedge: *mut ::std::os::raw::c_int,
    pub flexvert: *mut f32,
    pub flexface: *mut f32,
    pub flexnormal: *mut f32,
    pub flextexcoord: *mut f32,
    pub flexvertopt: mjtByte,
    pub flexedgeopt: mjtByte,
    pub flexfaceopt: mjtByte,
    pub flexskinopt: mjtByte,
    pub nskin: ::std::os::raw::c_int,
    pub skinfacenum: *mut ::std::os::raw::c_int,
    pub skinvertadr: *mut ::std::os::raw::c_int,
    pub skinvertnum: *mut ::std::os::raw::c_int,
    pub skinvert: *mut f32,
    pub skinnormal: *mut f32,
    pub nlight: ::std::os::raw::c_int,
    pub lights: [mjvLight; 100usize],
    pub camera: [mjvGLCamera; 2usize],
    pub enabletransform: mjtByte,
    pub translate: [f32; 3usize],
    pub rotate: [f32; 4usize],
    pub scale: f32,
    pub stereo: ::std::os::raw::c_int,
    pub flags: [mjtByte; 10usize],
    pub framewidth: ::std::os::raw::c_int,
    pub framergb: [f32; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjvScene_"][::std::mem::size_of::<mjvScene_>() - 9176usize];
    ["Alignment of mjvScene_"][::std::mem::align_of::<mjvScene_>() - 8usize];
    ["Offset of field: mjvScene_::maxgeom"][::std::mem::offset_of!(mjvScene_, maxgeom) - 0usize];
    ["Offset of field: mjvScene_::ngeom"][::std::mem::offset_of!(mjvScene_, ngeom) - 4usize];
    ["Offset of field: mjvScene_::geoms"][::std::mem::offset_of!(mjvScene_, geoms) - 8usize];
    ["Offset of field: mjvScene_::geomorder"]
        [::std::mem::offset_of!(mjvScene_, geomorder) - 16usize];
    ["Offset of field: mjvScene_::nflex"][::std::mem::offset_of!(mjvScene_, nflex) - 24usize];
    ["Offset of field: mjvScene_::flexedgeadr"]
        [::std::mem::offset_of!(mjvScene_, flexedgeadr) - 32usize];
    ["Offset of field: mjvScene_::flexedgenum"]
        [::std::mem::offset_of!(mjvScene_, flexedgenum) - 40usize];
    ["Offset of field: mjvScene_::flexvertadr"]
        [::std::mem::offset_of!(mjvScene_, flexvertadr) - 48usize];
    ["Offset of field: mjvScene_::flexvertnum"]
        [::std::mem::offset_of!(mjvScene_, flexvertnum) - 56usize];
    ["Offset of field: mjvScene_::flexfaceadr"]
        [::std::mem::offset_of!(mjvScene_, flexfaceadr) - 64usize];
    ["Offset of field: mjvScene_::flexfacenum"]
        [::std::mem::offset_of!(mjvScene_, flexfacenum) - 72usize];
    ["Offset of field: mjvScene_::flexfaceused"]
        [::std::mem::offset_of!(mjvScene_, flexfaceused) - 80usize];
    ["Offset of field: mjvScene_::flexedge"][::std::mem::offset_of!(mjvScene_, flexedge) - 88usize];
    ["Offset of field: mjvScene_::flexvert"][::std::mem::offset_of!(mjvScene_, flexvert) - 96usize];
    ["Offset of field: mjvScene_::flexface"]
        [::std::mem::offset_of!(mjvScene_, flexface) - 104usize];
    ["Offset of field: mjvScene_::flexnormal"]
        [::std::mem::offset_of!(mjvScene_, flexnormal) - 112usize];
    ["Offset of field: mjvScene_::flextexcoord"]
        [::std::mem::offset_of!(mjvScene_, flextexcoord) - 120usize];
    ["Offset of field: mjvScene_::flexvertopt"]
        [::std::mem::offset_of!(mjvScene_, flexvertopt) - 128usize];
    ["Offset of field: mjvScene_::flexedgeopt"]
        [::std::mem::offset_of!(mjvScene_, flexedgeopt) - 129usize];
    ["Offset of field: mjvScene_::flexfaceopt"]
        [::std::mem::offset_of!(mjvScene_, flexfaceopt) - 130usize];
    ["Offset of field: mjvScene_::flexskinopt"]
        [::std::mem::offset_of!(mjvScene_, flexskinopt) - 131usize];
    ["Offset of field: mjvScene_::nskin"][::std::mem::offset_of!(mjvScene_, nskin) - 132usize];
    ["Offset of field: mjvScene_::skinfacenum"]
        [::std::mem::offset_of!(mjvScene_, skinfacenum) - 136usize];
    ["Offset of field: mjvScene_::skinvertadr"]
        [::std::mem::offset_of!(mjvScene_, skinvertadr) - 144usize];
    ["Offset of field: mjvScene_::skinvertnum"]
        [::std::mem::offset_of!(mjvScene_, skinvertnum) - 152usize];
    ["Offset of field: mjvScene_::skinvert"]
        [::std::mem::offset_of!(mjvScene_, skinvert) - 160usize];
    ["Offset of field: mjvScene_::skinnormal"]
        [::std::mem::offset_of!(mjvScene_, skinnormal) - 168usize];
    ["Offset of field: mjvScene_::nlight"][::std::mem::offset_of!(mjvScene_, nlight) - 176usize];
    ["Offset of field: mjvScene_::lights"][::std::mem::offset_of!(mjvScene_, lights) - 180usize];
    ["Offset of field: mjvScene_::camera"][::std::mem::offset_of!(mjvScene_, camera) - 8980usize];
    ["Offset of field: mjvScene_::enabletransform"]
        [::std::mem::offset_of!(mjvScene_, enabletransform) - 9108usize];
    ["Offset of field: mjvScene_::translate"]
        [::std::mem::offset_of!(mjvScene_, translate) - 9112usize];
    ["Offset of field: mjvScene_::rotate"][::std::mem::offset_of!(mjvScene_, rotate) - 9124usize];
    ["Offset of field: mjvScene_::scale"][::std::mem::offset_of!(mjvScene_, scale) - 9140usize];
    ["Offset of field: mjvScene_::stereo"][::std::mem::offset_of!(mjvScene_, stereo) - 9144usize];
    ["Offset of field: mjvScene_::flags"][::std::mem::offset_of!(mjvScene_, flags) - 9148usize];
    ["Offset of field: mjvScene_::framewidth"]
        [::std::mem::offset_of!(mjvScene_, framewidth) - 9160usize];
    ["Offset of field: mjvScene_::framergb"]
        [::std::mem::offset_of!(mjvScene_, framergb) - 9164usize];
};
impl Default for mjvScene_ {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mjvScene = mjvScene_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mjvFigure_ {
    pub flg_legend: ::std::os::raw::c_int,
    pub flg_ticklabel: [::std::os::raw::c_int; 2usize],
    pub flg_extend: ::std::os::raw::c_int,
    pub flg_barplot: ::std::os::raw::c_int,
    pub flg_selection: ::std::os::raw::c_int,
    pub flg_symmetric: ::std::os::raw::c_int,
    pub linewidth: f32,
    pub gridwidth: f32,
    pub gridsize: [::std::os::raw::c_int; 2usize],
    pub gridrgb: [f32; 3usize],
    pub figurergba: [f32; 4usize],
    pub panergba: [f32; 4usize],
    pub legendrgba: [f32; 4usize],
    pub textrgb: [f32; 3usize],
    pub linergb: [[f32; 3usize]; 100usize],
    pub range: [[f32; 2usize]; 2usize],
    pub xformat: [::std::os::raw::c_char; 20usize],
    pub yformat: [::std::os::raw::c_char; 20usize],
    pub minwidth: [::std::os::raw::c_char; 20usize],
    pub title: [::std::os::raw::c_char; 1000usize],
    pub xlabel: [::std::os::raw::c_char; 100usize],
    pub linename: [[::std::os::raw::c_char; 100usize]; 100usize],
    pub legendoffset: ::std::os::raw::c_int,
    pub subplot: ::std::os::raw::c_int,
    pub highlight: [::std::os::raw::c_int; 2usize],
    pub highlightid: ::std::os::raw::c_int,
    pub selection: f32,
    pub linepnt: [::std::os::raw::c_int; 100usize],
    pub linedata: [[f32; 2000usize]; 100usize],
    pub xaxispixel: [::std::os::raw::c_int; 2usize],
    pub yaxispixel: [::std::os::raw::c_int; 2usize],
    pub xaxisdata: [f32; 2usize],
    pub yaxisdata: [f32; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjvFigure_"][::std::mem::size_of::<mjvFigure_>() - 812948usize];
    ["Alignment of mjvFigure_"][::std::mem::align_of::<mjvFigure_>() - 4usize];
    ["Offset of field: mjvFigure_::flg_legend"]
        [::std::mem::offset_of!(mjvFigure_, flg_legend) - 0usize];
    ["Offset of field: mjvFigure_::flg_ticklabel"]
        [::std::mem::offset_of!(mjvFigure_, flg_ticklabel) - 4usize];
    ["Offset of field: mjvFigure_::flg_extend"]
        [::std::mem::offset_of!(mjvFigure_, flg_extend) - 12usize];
    ["Offset of field: mjvFigure_::flg_barplot"]
        [::std::mem::offset_of!(mjvFigure_, flg_barplot) - 16usize];
    ["Offset of field: mjvFigure_::flg_selection"]
        [::std::mem::offset_of!(mjvFigure_, flg_selection) - 20usize];
    ["Offset of field: mjvFigure_::flg_symmetric"]
        [::std::mem::offset_of!(mjvFigure_, flg_symmetric) - 24usize];
    ["Offset of field: mjvFigure_::linewidth"]
        [::std::mem::offset_of!(mjvFigure_, linewidth) - 28usize];
    ["Offset of field: mjvFigure_::gridwidth"]
        [::std::mem::offset_of!(mjvFigure_, gridwidth) - 32usize];
    ["Offset of field: mjvFigure_::gridsize"]
        [::std::mem::offset_of!(mjvFigure_, gridsize) - 36usize];
    ["Offset of field: mjvFigure_::gridrgb"][::std::mem::offset_of!(mjvFigure_, gridrgb) - 44usize];
    ["Offset of field: mjvFigure_::figurergba"]
        [::std::mem::offset_of!(mjvFigure_, figurergba) - 56usize];
    ["Offset of field: mjvFigure_::panergba"]
        [::std::mem::offset_of!(mjvFigure_, panergba) - 72usize];
    ["Offset of field: mjvFigure_::legendrgba"]
        [::std::mem::offset_of!(mjvFigure_, legendrgba) - 88usize];
    ["Offset of field: mjvFigure_::textrgb"]
        [::std::mem::offset_of!(mjvFigure_, textrgb) - 104usize];
    ["Offset of field: mjvFigure_::linergb"]
        [::std::mem::offset_of!(mjvFigure_, linergb) - 116usize];
    ["Offset of field: mjvFigure_::range"][::std::mem::offset_of!(mjvFigure_, range) - 1316usize];
    ["Offset of field: mjvFigure_::xformat"]
        [::std::mem::offset_of!(mjvFigure_, xformat) - 1332usize];
    ["Offset of field: mjvFigure_::yformat"]
        [::std::mem::offset_of!(mjvFigure_, yformat) - 1352usize];
    ["Offset of field: mjvFigure_::minwidth"]
        [::std::mem::offset_of!(mjvFigure_, minwidth) - 1372usize];
    ["Offset of field: mjvFigure_::title"][::std::mem::offset_of!(mjvFigure_, title) - 1392usize];
    ["Offset of field: mjvFigure_::xlabel"][::std::mem::offset_of!(mjvFigure_, xlabel) - 2392usize];
    ["Offset of field: mjvFigure_::linename"]
        [::std::mem::offset_of!(mjvFigure_, linename) - 2492usize];
    ["Offset of field: mjvFigure_::legendoffset"]
        [::std::mem::offset_of!(mjvFigure_, legendoffset) - 12492usize];
    ["Offset of field: mjvFigure_::subplot"]
        [::std::mem::offset_of!(mjvFigure_, subplot) - 12496usize];
    ["Offset of field: mjvFigure_::highlight"]
        [::std::mem::offset_of!(mjvFigure_, highlight) - 12500usize];
    ["Offset of field: mjvFigure_::highlightid"]
        [::std::mem::offset_of!(mjvFigure_, highlightid) - 12508usize];
    ["Offset of field: mjvFigure_::selection"]
        [::std::mem::offset_of!(mjvFigure_, selection) - 12512usize];
    ["Offset of field: mjvFigure_::linepnt"]
        [::std::mem::offset_of!(mjvFigure_, linepnt) - 12516usize];
    ["Offset of field: mjvFigure_::linedata"]
        [::std::mem::offset_of!(mjvFigure_, linedata) - 12916usize];
    ["Offset of field: mjvFigure_::xaxispixel"]
        [::std::mem::offset_of!(mjvFigure_, xaxispixel) - 812916usize];
    ["Offset of field: mjvFigure_::yaxispixel"]
        [::std::mem::offset_of!(mjvFigure_, yaxispixel) - 812924usize];
    ["Offset of field: mjvFigure_::xaxisdata"]
        [::std::mem::offset_of!(mjvFigure_, xaxisdata) - 812932usize];
    ["Offset of field: mjvFigure_::yaxisdata"]
        [::std::mem::offset_of!(mjvFigure_, yaxisdata) - 812940usize];
};
impl Default for mjvFigure_ {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mjvFigure = mjvFigure_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mjvSceneState_ {
    pub nbuffer: ::std::os::raw::c_int,
    pub buffer: *mut ::std::os::raw::c_void,
    pub maxgeom: ::std::os::raw::c_int,
    pub scratch: mjvScene,
    pub model: mjvSceneState___bindgen_ty_1,
    pub data: mjvSceneState___bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mjvSceneState___bindgen_ty_1 {
    pub nv: ::std::os::raw::c_int,
    pub nu: ::std::os::raw::c_int,
    pub na: ::std::os::raw::c_int,
    pub nbody: ::std::os::raw::c_int,
    pub nbvh: ::std::os::raw::c_int,
    pub nbvhstatic: ::std::os::raw::c_int,
    pub njnt: ::std::os::raw::c_int,
    pub ngeom: ::std::os::raw::c_int,
    pub nsite: ::std::os::raw::c_int,
    pub ncam: ::std::os::raw::c_int,
    pub nlight: ::std::os::raw::c_int,
    pub nmesh: ::std::os::raw::c_int,
    pub nskin: ::std::os::raw::c_int,
    pub nflex: ::std::os::raw::c_int,
    pub nflexvert: ::std::os::raw::c_int,
    pub nflextexcoord: ::std::os::raw::c_int,
    pub nskinvert: ::std::os::raw::c_int,
    pub nskinface: ::std::os::raw::c_int,
    pub nskinbone: ::std::os::raw::c_int,
    pub nskinbonevert: ::std::os::raw::c_int,
    pub nmat: ::std::os::raw::c_int,
    pub neq: ::std::os::raw::c_int,
    pub ntendon: ::std::os::raw::c_int,
    pub ntree: ::std::os::raw::c_int,
    pub nwrap: ::std::os::raw::c_int,
    pub nsensor: ::std::os::raw::c_int,
    pub nnames: ::std::os::raw::c_int,
    pub npaths: ::std::os::raw::c_int,
    pub nsensordata: ::std::os::raw::c_int,
    pub narena: ::std::os::raw::c_int,
    pub opt: mjOption,
    pub vis: mjVisual,
    pub stat: mjStatistic,
    pub body_parentid: *mut ::std::os::raw::c_int,
    pub body_rootid: *mut ::std::os::raw::c_int,
    pub body_weldid: *mut ::std::os::raw::c_int,
    pub body_mocapid: *mut ::std::os::raw::c_int,
    pub body_jntnum: *mut ::std::os::raw::c_int,
    pub body_jntadr: *mut ::std::os::raw::c_int,
    pub body_dofnum: *mut ::std::os::raw::c_int,
    pub body_dofadr: *mut ::std::os::raw::c_int,
    pub body_geomnum: *mut ::std::os::raw::c_int,
    pub body_geomadr: *mut ::std::os::raw::c_int,
    pub body_iquat: *mut mjtNum,
    pub body_mass: *mut mjtNum,
    pub body_inertia: *mut mjtNum,
    pub body_bvhadr: *mut ::std::os::raw::c_int,
    pub body_bvhnum: *mut ::std::os::raw::c_int,
    pub bvh_depth: *mut ::std::os::raw::c_int,
    pub bvh_child: *mut ::std::os::raw::c_int,
    pub bvh_nodeid: *mut ::std::os::raw::c_int,
    pub bvh_aabb: *mut mjtNum,
    pub jnt_type: *mut ::std::os::raw::c_int,
    pub jnt_bodyid: *mut ::std::os::raw::c_int,
    pub jnt_group: *mut ::std::os::raw::c_int,
    pub geom_type: *mut ::std::os::raw::c_int,
    pub geom_bodyid: *mut ::std::os::raw::c_int,
    pub geom_contype: *mut ::std::os::raw::c_int,
    pub geom_conaffinity: *mut ::std::os::raw::c_int,
    pub geom_dataid: *mut ::std::os::raw::c_int,
    pub geom_matid: *mut ::std::os::raw::c_int,
    pub geom_group: *mut ::std::os::raw::c_int,
    pub geom_size: *mut mjtNum,
    pub geom_aabb: *mut mjtNum,
    pub geom_rbound: *mut mjtNum,
    pub geom_rgba: *mut f32,
    pub site_type: *mut ::std::os::raw::c_int,
    pub site_bodyid: *mut ::std::os::raw::c_int,
    pub site_matid: *mut ::std::os::raw::c_int,
    pub site_group: *mut ::std::os::raw::c_int,
    pub site_size: *mut mjtNum,
    pub site_rgba: *mut f32,
    pub cam_orthographic: *mut ::std::os::raw::c_int,
    pub cam_fovy: *mut mjtNum,
    pub cam_ipd: *mut mjtNum,
    pub cam_resolution: *mut ::std::os::raw::c_int,
    pub cam_sensorsize: *mut f32,
    pub cam_intrinsic: *mut f32,
    pub light_directional: *mut mjtByte,
    pub light_castshadow: *mut mjtByte,
    pub light_bulbradius: *mut f32,
    pub light_active: *mut mjtByte,
    pub light_attenuation: *mut f32,
    pub light_cutoff: *mut f32,
    pub light_exponent: *mut f32,
    pub light_ambient: *mut f32,
    pub light_diffuse: *mut f32,
    pub light_specular: *mut f32,
    pub flex_flatskin: *mut mjtByte,
    pub flex_dim: *mut ::std::os::raw::c_int,
    pub flex_matid: *mut ::std::os::raw::c_int,
    pub flex_group: *mut ::std::os::raw::c_int,
    pub flex_vertadr: *mut ::std::os::raw::c_int,
    pub flex_vertnum: *mut ::std::os::raw::c_int,
    pub flex_elem: *mut ::std::os::raw::c_int,
    pub flex_elemlayer: *mut ::std::os::raw::c_int,
    pub flex_elemadr: *mut ::std::os::raw::c_int,
    pub flex_elemnum: *mut ::std::os::raw::c_int,
    pub flex_elemdataadr: *mut ::std::os::raw::c_int,
    pub flex_shell: *mut ::std::os::raw::c_int,
    pub flex_shellnum: *mut ::std::os::raw::c_int,
    pub flex_shelldataadr: *mut ::std::os::raw::c_int,
    pub flex_texcoordadr: *mut ::std::os::raw::c_int,
    pub flex_bvhadr: *mut ::std::os::raw::c_int,
    pub flex_bvhnum: *mut ::std::os::raw::c_int,
    pub flex_radius: *mut mjtNum,
    pub flex_rgba: *mut f32,
    pub hfield_pathadr: *mut ::std::os::raw::c_int,
    pub mesh_bvhadr: *mut ::std::os::raw::c_int,
    pub mesh_bvhnum: *mut ::std::os::raw::c_int,
    pub mesh_texcoordadr: *mut ::std::os::raw::c_int,
    pub mesh_graphadr: *mut ::std::os::raw::c_int,
    pub mesh_pathadr: *mut ::std::os::raw::c_int,
    pub skin_matid: *mut ::std::os::raw::c_int,
    pub skin_group: *mut ::std::os::raw::c_int,
    pub skin_rgba: *mut f32,
    pub skin_inflate: *mut f32,
    pub skin_vertadr: *mut ::std::os::raw::c_int,
    pub skin_vertnum: *mut ::std::os::raw::c_int,
    pub skin_texcoordadr: *mut ::std::os::raw::c_int,
    pub skin_faceadr: *mut ::std::os::raw::c_int,
    pub skin_facenum: *mut ::std::os::raw::c_int,
    pub skin_boneadr: *mut ::std::os::raw::c_int,
    pub skin_bonenum: *mut ::std::os::raw::c_int,
    pub skin_vert: *mut f32,
    pub skin_face: *mut ::std::os::raw::c_int,
    pub skin_bonevertadr: *mut ::std::os::raw::c_int,
    pub skin_bonevertnum: *mut ::std::os::raw::c_int,
    pub skin_bonebindpos: *mut f32,
    pub skin_bonebindquat: *mut f32,
    pub skin_bonebodyid: *mut ::std::os::raw::c_int,
    pub skin_bonevertid: *mut ::std::os::raw::c_int,
    pub skin_bonevertweight: *mut f32,
    pub skin_pathadr: *mut ::std::os::raw::c_int,
    pub tex_pathadr: *mut ::std::os::raw::c_int,
    pub mat_texid: *mut ::std::os::raw::c_int,
    pub mat_texuniform: *mut mjtByte,
    pub mat_texrepeat: *mut f32,
    pub mat_emission: *mut f32,
    pub mat_specular: *mut f32,
    pub mat_shininess: *mut f32,
    pub mat_reflectance: *mut f32,
    pub mat_metallic: *mut f32,
    pub mat_roughness: *mut f32,
    pub mat_rgba: *mut f32,
    pub eq_type: *mut ::std::os::raw::c_int,
    pub eq_obj1id: *mut ::std::os::raw::c_int,
    pub eq_obj2id: *mut ::std::os::raw::c_int,
    pub eq_objtype: *mut ::std::os::raw::c_int,
    pub eq_data: *mut mjtNum,
    pub tendon_num: *mut ::std::os::raw::c_int,
    pub tendon_matid: *mut ::std::os::raw::c_int,
    pub tendon_group: *mut ::std::os::raw::c_int,
    pub tendon_limited: *mut mjtByte,
    pub tendon_width: *mut mjtNum,
    pub tendon_range: *mut mjtNum,
    pub tendon_stiffness: *mut mjtNum,
    pub tendon_damping: *mut mjtNum,
    pub tendon_frictionloss: *mut mjtNum,
    pub tendon_lengthspring: *mut mjtNum,
    pub tendon_rgba: *mut f32,
    pub actuator_trntype: *mut ::std::os::raw::c_int,
    pub actuator_dyntype: *mut ::std::os::raw::c_int,
    pub actuator_trnid: *mut ::std::os::raw::c_int,
    pub actuator_actadr: *mut ::std::os::raw::c_int,
    pub actuator_actnum: *mut ::std::os::raw::c_int,
    pub actuator_group: *mut ::std::os::raw::c_int,
    pub actuator_ctrllimited: *mut mjtByte,
    pub actuator_actlimited: *mut mjtByte,
    pub actuator_ctrlrange: *mut mjtNum,
    pub actuator_actrange: *mut mjtNum,
    pub actuator_cranklength: *mut mjtNum,
    pub sensor_type: *mut ::std::os::raw::c_int,
    pub sensor_objid: *mut ::std::os::raw::c_int,
    pub sensor_adr: *mut ::std::os::raw::c_int,
    pub name_bodyadr: *mut ::std::os::raw::c_int,
    pub name_jntadr: *mut ::std::os::raw::c_int,
    pub name_geomadr: *mut ::std::os::raw::c_int,
    pub name_siteadr: *mut ::std::os::raw::c_int,
    pub name_camadr: *mut ::std::os::raw::c_int,
    pub name_lightadr: *mut ::std::os::raw::c_int,
    pub name_eqadr: *mut ::std::os::raw::c_int,
    pub name_tendonadr: *mut ::std::os::raw::c_int,
    pub name_actuatoradr: *mut ::std::os::raw::c_int,
    pub names: *mut ::std::os::raw::c_char,
    pub paths: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjvSceneState___bindgen_ty_1"]
        [::std::mem::size_of::<mjvSceneState___bindgen_ty_1>() - 2336usize];
    ["Alignment of mjvSceneState___bindgen_ty_1"]
        [::std::mem::align_of::<mjvSceneState___bindgen_ty_1>() - 8usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::nv"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, nv) - 0usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::nu"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, nu) - 4usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::na"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, na) - 8usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::nbody"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, nbody) - 12usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::nbvh"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, nbvh) - 16usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::nbvhstatic"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, nbvhstatic) - 20usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::njnt"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, njnt) - 24usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::ngeom"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, ngeom) - 28usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::nsite"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, nsite) - 32usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::ncam"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, ncam) - 36usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::nlight"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, nlight) - 40usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::nmesh"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, nmesh) - 44usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::nskin"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, nskin) - 48usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::nflex"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, nflex) - 52usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::nflexvert"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, nflexvert) - 56usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::nflextexcoord"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, nflextexcoord) - 60usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::nskinvert"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, nskinvert) - 64usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::nskinface"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, nskinface) - 68usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::nskinbone"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, nskinbone) - 72usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::nskinbonevert"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, nskinbonevert) - 76usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::nmat"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, nmat) - 80usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::neq"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, neq) - 84usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::ntendon"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, ntendon) - 88usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::ntree"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, ntree) - 92usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::nwrap"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, nwrap) - 96usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::nsensor"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, nsensor) - 100usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::nnames"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, nnames) - 104usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::npaths"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, npaths) - 108usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::nsensordata"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, nsensordata) - 112usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::narena"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, narena) - 116usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::opt"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, opt) - 120usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::vis"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, vis) - 424usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::stat"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, stat) - 1056usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::body_parentid"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, body_parentid) - 1112usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::body_rootid"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, body_rootid) - 1120usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::body_weldid"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, body_weldid) - 1128usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::body_mocapid"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, body_mocapid) - 1136usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::body_jntnum"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, body_jntnum) - 1144usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::body_jntadr"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, body_jntadr) - 1152usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::body_dofnum"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, body_dofnum) - 1160usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::body_dofadr"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, body_dofadr) - 1168usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::body_geomnum"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, body_geomnum) - 1176usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::body_geomadr"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, body_geomadr) - 1184usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::body_iquat"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, body_iquat) - 1192usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::body_mass"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, body_mass) - 1200usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::body_inertia"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, body_inertia) - 1208usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::body_bvhadr"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, body_bvhadr) - 1216usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::body_bvhnum"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, body_bvhnum) - 1224usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::bvh_depth"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, bvh_depth) - 1232usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::bvh_child"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, bvh_child) - 1240usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::bvh_nodeid"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, bvh_nodeid) - 1248usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::bvh_aabb"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, bvh_aabb) - 1256usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::jnt_type"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, jnt_type) - 1264usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::jnt_bodyid"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, jnt_bodyid) - 1272usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::jnt_group"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, jnt_group) - 1280usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::geom_type"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, geom_type) - 1288usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::geom_bodyid"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, geom_bodyid) - 1296usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::geom_contype"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, geom_contype) - 1304usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::geom_conaffinity"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, geom_conaffinity) - 1312usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::geom_dataid"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, geom_dataid) - 1320usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::geom_matid"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, geom_matid) - 1328usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::geom_group"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, geom_group) - 1336usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::geom_size"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, geom_size) - 1344usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::geom_aabb"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, geom_aabb) - 1352usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::geom_rbound"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, geom_rbound) - 1360usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::geom_rgba"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, geom_rgba) - 1368usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::site_type"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, site_type) - 1376usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::site_bodyid"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, site_bodyid) - 1384usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::site_matid"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, site_matid) - 1392usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::site_group"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, site_group) - 1400usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::site_size"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, site_size) - 1408usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::site_rgba"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, site_rgba) - 1416usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::cam_orthographic"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, cam_orthographic) - 1424usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::cam_fovy"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, cam_fovy) - 1432usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::cam_ipd"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, cam_ipd) - 1440usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::cam_resolution"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, cam_resolution) - 1448usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::cam_sensorsize"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, cam_sensorsize) - 1456usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::cam_intrinsic"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, cam_intrinsic) - 1464usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::light_directional"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, light_directional) - 1472usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::light_castshadow"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, light_castshadow) - 1480usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::light_bulbradius"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, light_bulbradius) - 1488usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::light_active"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, light_active) - 1496usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::light_attenuation"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, light_attenuation) - 1504usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::light_cutoff"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, light_cutoff) - 1512usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::light_exponent"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, light_exponent) - 1520usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::light_ambient"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, light_ambient) - 1528usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::light_diffuse"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, light_diffuse) - 1536usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::light_specular"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, light_specular) - 1544usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::flex_flatskin"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, flex_flatskin) - 1552usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::flex_dim"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, flex_dim) - 1560usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::flex_matid"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, flex_matid) - 1568usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::flex_group"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, flex_group) - 1576usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::flex_vertadr"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, flex_vertadr) - 1584usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::flex_vertnum"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, flex_vertnum) - 1592usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::flex_elem"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, flex_elem) - 1600usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::flex_elemlayer"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, flex_elemlayer) - 1608usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::flex_elemadr"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, flex_elemadr) - 1616usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::flex_elemnum"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, flex_elemnum) - 1624usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::flex_elemdataadr"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, flex_elemdataadr) - 1632usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::flex_shell"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, flex_shell) - 1640usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::flex_shellnum"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, flex_shellnum) - 1648usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::flex_shelldataadr"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, flex_shelldataadr) - 1656usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::flex_texcoordadr"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, flex_texcoordadr) - 1664usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::flex_bvhadr"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, flex_bvhadr) - 1672usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::flex_bvhnum"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, flex_bvhnum) - 1680usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::flex_radius"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, flex_radius) - 1688usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::flex_rgba"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, flex_rgba) - 1696usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::hfield_pathadr"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, hfield_pathadr) - 1704usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::mesh_bvhadr"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, mesh_bvhadr) - 1712usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::mesh_bvhnum"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, mesh_bvhnum) - 1720usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::mesh_texcoordadr"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, mesh_texcoordadr) - 1728usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::mesh_graphadr"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, mesh_graphadr) - 1736usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::mesh_pathadr"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, mesh_pathadr) - 1744usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::skin_matid"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, skin_matid) - 1752usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::skin_group"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, skin_group) - 1760usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::skin_rgba"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, skin_rgba) - 1768usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::skin_inflate"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, skin_inflate) - 1776usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::skin_vertadr"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, skin_vertadr) - 1784usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::skin_vertnum"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, skin_vertnum) - 1792usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::skin_texcoordadr"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, skin_texcoordadr) - 1800usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::skin_faceadr"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, skin_faceadr) - 1808usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::skin_facenum"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, skin_facenum) - 1816usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::skin_boneadr"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, skin_boneadr) - 1824usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::skin_bonenum"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, skin_bonenum) - 1832usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::skin_vert"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, skin_vert) - 1840usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::skin_face"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, skin_face) - 1848usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::skin_bonevertadr"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, skin_bonevertadr) - 1856usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::skin_bonevertnum"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, skin_bonevertnum) - 1864usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::skin_bonebindpos"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, skin_bonebindpos) - 1872usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::skin_bonebindquat"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, skin_bonebindquat) - 1880usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::skin_bonebodyid"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, skin_bonebodyid) - 1888usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::skin_bonevertid"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, skin_bonevertid) - 1896usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::skin_bonevertweight"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, skin_bonevertweight) - 1904usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::skin_pathadr"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, skin_pathadr) - 1912usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::tex_pathadr"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, tex_pathadr) - 1920usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::mat_texid"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, mat_texid) - 1928usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::mat_texuniform"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, mat_texuniform) - 1936usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::mat_texrepeat"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, mat_texrepeat) - 1944usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::mat_emission"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, mat_emission) - 1952usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::mat_specular"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, mat_specular) - 1960usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::mat_shininess"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, mat_shininess) - 1968usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::mat_reflectance"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, mat_reflectance) - 1976usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::mat_metallic"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, mat_metallic) - 1984usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::mat_roughness"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, mat_roughness) - 1992usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::mat_rgba"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, mat_rgba) - 2000usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::eq_type"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, eq_type) - 2008usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::eq_obj1id"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, eq_obj1id) - 2016usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::eq_obj2id"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, eq_obj2id) - 2024usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::eq_objtype"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, eq_objtype) - 2032usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::eq_data"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, eq_data) - 2040usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::tendon_num"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, tendon_num) - 2048usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::tendon_matid"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, tendon_matid) - 2056usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::tendon_group"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, tendon_group) - 2064usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::tendon_limited"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, tendon_limited) - 2072usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::tendon_width"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, tendon_width) - 2080usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::tendon_range"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, tendon_range) - 2088usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::tendon_stiffness"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, tendon_stiffness) - 2096usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::tendon_damping"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, tendon_damping) - 2104usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::tendon_frictionloss"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, tendon_frictionloss) - 2112usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::tendon_lengthspring"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, tendon_lengthspring) - 2120usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::tendon_rgba"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, tendon_rgba) - 2128usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::actuator_trntype"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, actuator_trntype) - 2136usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::actuator_dyntype"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, actuator_dyntype) - 2144usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::actuator_trnid"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, actuator_trnid) - 2152usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::actuator_actadr"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, actuator_actadr) - 2160usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::actuator_actnum"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, actuator_actnum) - 2168usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::actuator_group"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, actuator_group) - 2176usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::actuator_ctrllimited"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, actuator_ctrllimited) - 2184usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::actuator_actlimited"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, actuator_actlimited) - 2192usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::actuator_ctrlrange"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, actuator_ctrlrange) - 2200usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::actuator_actrange"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, actuator_actrange) - 2208usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::actuator_cranklength"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, actuator_cranklength) - 2216usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::sensor_type"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, sensor_type) - 2224usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::sensor_objid"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, sensor_objid) - 2232usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::sensor_adr"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, sensor_adr) - 2240usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::name_bodyadr"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, name_bodyadr) - 2248usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::name_jntadr"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, name_jntadr) - 2256usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::name_geomadr"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, name_geomadr) - 2264usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::name_siteadr"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, name_siteadr) - 2272usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::name_camadr"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, name_camadr) - 2280usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::name_lightadr"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, name_lightadr) - 2288usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::name_eqadr"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, name_eqadr) - 2296usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::name_tendonadr"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, name_tendonadr) - 2304usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::name_actuatoradr"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, name_actuatoradr) - 2312usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::names"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, names) - 2320usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::paths"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_1, paths) - 2328usize];
};
impl Default for mjvSceneState___bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mjvSceneState___bindgen_ty_2 {
    pub warning: [mjWarningStat; 8usize],
    pub nefc: ::std::os::raw::c_int,
    pub ncon: ::std::os::raw::c_int,
    pub nisland: ::std::os::raw::c_int,
    pub time: mjtNum,
    pub act: *mut mjtNum,
    pub ctrl: *mut mjtNum,
    pub xfrc_applied: *mut mjtNum,
    pub eq_active: *mut mjtByte,
    pub sensordata: *mut mjtNum,
    pub xpos: *mut mjtNum,
    pub xquat: *mut mjtNum,
    pub xmat: *mut mjtNum,
    pub xipos: *mut mjtNum,
    pub ximat: *mut mjtNum,
    pub xanchor: *mut mjtNum,
    pub xaxis: *mut mjtNum,
    pub geom_xpos: *mut mjtNum,
    pub geom_xmat: *mut mjtNum,
    pub site_xpos: *mut mjtNum,
    pub site_xmat: *mut mjtNum,
    pub cam_xpos: *mut mjtNum,
    pub cam_xmat: *mut mjtNum,
    pub light_xpos: *mut mjtNum,
    pub light_xdir: *mut mjtNum,
    pub subtree_com: *mut mjtNum,
    pub ten_wrapadr: *mut ::std::os::raw::c_int,
    pub ten_wrapnum: *mut ::std::os::raw::c_int,
    pub wrap_obj: *mut ::std::os::raw::c_int,
    pub ten_length: *mut mjtNum,
    pub wrap_xpos: *mut mjtNum,
    pub bvh_aabb_dyn: *mut mjtNum,
    pub bvh_active: *mut mjtByte,
    pub island_dofadr: *mut ::std::os::raw::c_int,
    pub island_dofind: *mut ::std::os::raw::c_int,
    pub dof_island: *mut ::std::os::raw::c_int,
    pub efc_island: *mut ::std::os::raw::c_int,
    pub tendon_efcadr: *mut ::std::os::raw::c_int,
    pub flexvert_xpos: *mut mjtNum,
    pub contact: *mut mjContact,
    pub efc_force: *mut mjtNum,
    pub arena: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjvSceneState___bindgen_ty_2"]
        [::std::mem::size_of::<mjvSceneState___bindgen_ty_2>() - 384usize];
    ["Alignment of mjvSceneState___bindgen_ty_2"]
        [::std::mem::align_of::<mjvSceneState___bindgen_ty_2>() - 8usize];
    ["Offset of field: mjvSceneState___bindgen_ty_2::warning"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_2, warning) - 0usize];
    ["Offset of field: mjvSceneState___bindgen_ty_2::nefc"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_2, nefc) - 64usize];
    ["Offset of field: mjvSceneState___bindgen_ty_2::ncon"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_2, ncon) - 68usize];
    ["Offset of field: mjvSceneState___bindgen_ty_2::nisland"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_2, nisland) - 72usize];
    ["Offset of field: mjvSceneState___bindgen_ty_2::time"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_2, time) - 80usize];
    ["Offset of field: mjvSceneState___bindgen_ty_2::act"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_2, act) - 88usize];
    ["Offset of field: mjvSceneState___bindgen_ty_2::ctrl"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_2, ctrl) - 96usize];
    ["Offset of field: mjvSceneState___bindgen_ty_2::xfrc_applied"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_2, xfrc_applied) - 104usize];
    ["Offset of field: mjvSceneState___bindgen_ty_2::eq_active"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_2, eq_active) - 112usize];
    ["Offset of field: mjvSceneState___bindgen_ty_2::sensordata"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_2, sensordata) - 120usize];
    ["Offset of field: mjvSceneState___bindgen_ty_2::xpos"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_2, xpos) - 128usize];
    ["Offset of field: mjvSceneState___bindgen_ty_2::xquat"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_2, xquat) - 136usize];
    ["Offset of field: mjvSceneState___bindgen_ty_2::xmat"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_2, xmat) - 144usize];
    ["Offset of field: mjvSceneState___bindgen_ty_2::xipos"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_2, xipos) - 152usize];
    ["Offset of field: mjvSceneState___bindgen_ty_2::ximat"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_2, ximat) - 160usize];
    ["Offset of field: mjvSceneState___bindgen_ty_2::xanchor"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_2, xanchor) - 168usize];
    ["Offset of field: mjvSceneState___bindgen_ty_2::xaxis"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_2, xaxis) - 176usize];
    ["Offset of field: mjvSceneState___bindgen_ty_2::geom_xpos"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_2, geom_xpos) - 184usize];
    ["Offset of field: mjvSceneState___bindgen_ty_2::geom_xmat"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_2, geom_xmat) - 192usize];
    ["Offset of field: mjvSceneState___bindgen_ty_2::site_xpos"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_2, site_xpos) - 200usize];
    ["Offset of field: mjvSceneState___bindgen_ty_2::site_xmat"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_2, site_xmat) - 208usize];
    ["Offset of field: mjvSceneState___bindgen_ty_2::cam_xpos"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_2, cam_xpos) - 216usize];
    ["Offset of field: mjvSceneState___bindgen_ty_2::cam_xmat"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_2, cam_xmat) - 224usize];
    ["Offset of field: mjvSceneState___bindgen_ty_2::light_xpos"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_2, light_xpos) - 232usize];
    ["Offset of field: mjvSceneState___bindgen_ty_2::light_xdir"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_2, light_xdir) - 240usize];
    ["Offset of field: mjvSceneState___bindgen_ty_2::subtree_com"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_2, subtree_com) - 248usize];
    ["Offset of field: mjvSceneState___bindgen_ty_2::ten_wrapadr"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_2, ten_wrapadr) - 256usize];
    ["Offset of field: mjvSceneState___bindgen_ty_2::ten_wrapnum"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_2, ten_wrapnum) - 264usize];
    ["Offset of field: mjvSceneState___bindgen_ty_2::wrap_obj"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_2, wrap_obj) - 272usize];
    ["Offset of field: mjvSceneState___bindgen_ty_2::ten_length"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_2, ten_length) - 280usize];
    ["Offset of field: mjvSceneState___bindgen_ty_2::wrap_xpos"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_2, wrap_xpos) - 288usize];
    ["Offset of field: mjvSceneState___bindgen_ty_2::bvh_aabb_dyn"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_2, bvh_aabb_dyn) - 296usize];
    ["Offset of field: mjvSceneState___bindgen_ty_2::bvh_active"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_2, bvh_active) - 304usize];
    ["Offset of field: mjvSceneState___bindgen_ty_2::island_dofadr"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_2, island_dofadr) - 312usize];
    ["Offset of field: mjvSceneState___bindgen_ty_2::island_dofind"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_2, island_dofind) - 320usize];
    ["Offset of field: mjvSceneState___bindgen_ty_2::dof_island"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_2, dof_island) - 328usize];
    ["Offset of field: mjvSceneState___bindgen_ty_2::efc_island"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_2, efc_island) - 336usize];
    ["Offset of field: mjvSceneState___bindgen_ty_2::tendon_efcadr"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_2, tendon_efcadr) - 344usize];
    ["Offset of field: mjvSceneState___bindgen_ty_2::flexvert_xpos"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_2, flexvert_xpos) - 352usize];
    ["Offset of field: mjvSceneState___bindgen_ty_2::contact"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_2, contact) - 360usize];
    ["Offset of field: mjvSceneState___bindgen_ty_2::efc_force"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_2, efc_force) - 368usize];
    ["Offset of field: mjvSceneState___bindgen_ty_2::arena"]
        [::std::mem::offset_of!(mjvSceneState___bindgen_ty_2, arena) - 376usize];
};
impl Default for mjvSceneState___bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjvSceneState_"][::std::mem::size_of::<mjvSceneState_>() - 11920usize];
    ["Alignment of mjvSceneState_"][::std::mem::align_of::<mjvSceneState_>() - 8usize];
    ["Offset of field: mjvSceneState_::nbuffer"]
        [::std::mem::offset_of!(mjvSceneState_, nbuffer) - 0usize];
    ["Offset of field: mjvSceneState_::buffer"]
        [::std::mem::offset_of!(mjvSceneState_, buffer) - 8usize];
    ["Offset of field: mjvSceneState_::maxgeom"]
        [::std::mem::offset_of!(mjvSceneState_, maxgeom) - 16usize];
    ["Offset of field: mjvSceneState_::scratch"]
        [::std::mem::offset_of!(mjvSceneState_, scratch) - 24usize];
    ["Offset of field: mjvSceneState_::model"]
        [::std::mem::offset_of!(mjvSceneState_, model) - 9200usize];
    ["Offset of field: mjvSceneState_::data"]
        [::std::mem::offset_of!(mjvSceneState_, data) - 11536usize];
};
impl Default for mjvSceneState_ {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mjvSceneState = mjvSceneState_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mjResource_ {
    pub name: *mut ::std::os::raw::c_char,
    pub data: *mut ::std::os::raw::c_void,
    pub timestamp: [::std::os::raw::c_char; 512usize],
    pub provider: *const mjpResourceProvider,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjResource_"][::std::mem::size_of::<mjResource_>() - 536usize];
    ["Alignment of mjResource_"][::std::mem::align_of::<mjResource_>() - 8usize];
    ["Offset of field: mjResource_::name"][::std::mem::offset_of!(mjResource_, name) - 0usize];
    ["Offset of field: mjResource_::data"][::std::mem::offset_of!(mjResource_, data) - 8usize];
    ["Offset of field: mjResource_::timestamp"]
        [::std::mem::offset_of!(mjResource_, timestamp) - 16usize];
    ["Offset of field: mjResource_::provider"]
        [::std::mem::offset_of!(mjResource_, provider) - 528usize];
};
impl Default for mjResource_ {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mjResource = mjResource_;
pub type mjfOpenResource =
    ::std::option::Option<unsafe extern "C" fn(resource: *mut mjResource) -> ::std::os::raw::c_int>;
pub type mjfReadResource = ::std::option::Option<
    unsafe extern "C" fn(
        resource: *mut mjResource,
        buffer: *mut *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type mjfCloseResource = ::std::option::Option<unsafe extern "C" fn(resource: *mut mjResource)>;
pub type mjfGetResourceDir = ::std::option::Option<
    unsafe extern "C" fn(
        resource: *mut mjResource,
        dir: *mut *const ::std::os::raw::c_char,
        ndir: *mut ::std::os::raw::c_int,
    ),
>;
pub type mjfResourceModified = ::std::option::Option<
    unsafe extern "C" fn(
        resource: *const mjResource,
        timestamp: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mjpResourceProvider {
    pub prefix: *const ::std::os::raw::c_char,
    pub open: mjfOpenResource,
    pub read: mjfReadResource,
    pub close: mjfCloseResource,
    pub getdir: mjfGetResourceDir,
    pub modified: mjfResourceModified,
    pub data: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjpResourceProvider"][::std::mem::size_of::<mjpResourceProvider>() - 56usize];
    ["Alignment of mjpResourceProvider"][::std::mem::align_of::<mjpResourceProvider>() - 8usize];
    ["Offset of field: mjpResourceProvider::prefix"]
        [::std::mem::offset_of!(mjpResourceProvider, prefix) - 0usize];
    ["Offset of field: mjpResourceProvider::open"]
        [::std::mem::offset_of!(mjpResourceProvider, open) - 8usize];
    ["Offset of field: mjpResourceProvider::read"]
        [::std::mem::offset_of!(mjpResourceProvider, read) - 16usize];
    ["Offset of field: mjpResourceProvider::close"]
        [::std::mem::offset_of!(mjpResourceProvider, close) - 24usize];
    ["Offset of field: mjpResourceProvider::getdir"]
        [::std::mem::offset_of!(mjpResourceProvider, getdir) - 32usize];
    ["Offset of field: mjpResourceProvider::modified"]
        [::std::mem::offset_of!(mjpResourceProvider, modified) - 40usize];
    ["Offset of field: mjpResourceProvider::data"]
        [::std::mem::offset_of!(mjpResourceProvider, data) - 48usize];
};
impl Default for mjpResourceProvider {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const mjtPluginCapabilityBit__mjPLUGIN_ACTUATOR: mjtPluginCapabilityBit_ = 1;
pub const mjtPluginCapabilityBit__mjPLUGIN_SENSOR: mjtPluginCapabilityBit_ = 2;
pub const mjtPluginCapabilityBit__mjPLUGIN_PASSIVE: mjtPluginCapabilityBit_ = 4;
pub const mjtPluginCapabilityBit__mjPLUGIN_SDF: mjtPluginCapabilityBit_ = 8;
pub type mjtPluginCapabilityBit_ = ::std::os::raw::c_uint;
pub use self::mjtPluginCapabilityBit_ as mjtPluginCapabilityBit;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mjpPlugin_ {
    pub name: *const ::std::os::raw::c_char,
    pub nattribute: ::std::os::raw::c_int,
    pub attributes: *const *const ::std::os::raw::c_char,
    pub capabilityflags: ::std::os::raw::c_int,
    pub needstage: ::std::os::raw::c_int,
    pub nstate: ::std::option::Option<
        unsafe extern "C" fn(
            m: *const mjModel,
            instance: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub nsensordata: ::std::option::Option<
        unsafe extern "C" fn(
            m: *const mjModel,
            instance: ::std::os::raw::c_int,
            sensor_id: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub init: ::std::option::Option<
        unsafe extern "C" fn(
            m: *const mjModel,
            d: *mut mjData,
            instance: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub destroy: ::std::option::Option<
        unsafe extern "C" fn(d: *mut mjData, instance: ::std::os::raw::c_int),
    >,
    pub copy: ::std::option::Option<
        unsafe extern "C" fn(
            dest: *mut mjData,
            m: *const mjModel,
            src: *const mjData,
            instance: ::std::os::raw::c_int,
        ),
    >,
    pub reset: ::std::option::Option<
        unsafe extern "C" fn(
            m: *const mjModel,
            plugin_state: *mut mjtNum,
            plugin_data: *mut ::std::os::raw::c_void,
            instance: ::std::os::raw::c_int,
        ),
    >,
    pub compute: ::std::option::Option<
        unsafe extern "C" fn(
            m: *const mjModel,
            d: *mut mjData,
            instance: ::std::os::raw::c_int,
            capability_bit: ::std::os::raw::c_int,
        ),
    >,
    pub advance: ::std::option::Option<
        unsafe extern "C" fn(m: *const mjModel, d: *mut mjData, instance: ::std::os::raw::c_int),
    >,
    pub visualize: ::std::option::Option<
        unsafe extern "C" fn(
            m: *const mjModel,
            d: *mut mjData,
            opt: *const mjvOption,
            scn: *mut mjvScene,
            instance: ::std::os::raw::c_int,
        ),
    >,
    pub actuator_act_dot: ::std::option::Option<
        unsafe extern "C" fn(m: *const mjModel, d: *mut mjData, instance: ::std::os::raw::c_int),
    >,
    pub sdf_distance: ::std::option::Option<
        unsafe extern "C" fn(
            point: *const mjtNum,
            d: *const mjData,
            instance: ::std::os::raw::c_int,
        ) -> mjtNum,
    >,
    pub sdf_gradient: ::std::option::Option<
        unsafe extern "C" fn(
            gradient: *mut mjtNum,
            point: *const mjtNum,
            d: *const mjData,
            instance: ::std::os::raw::c_int,
        ),
    >,
    pub sdf_staticdistance: ::std::option::Option<
        unsafe extern "C" fn(point: *const mjtNum, attributes: *const mjtNum) -> mjtNum,
    >,
    pub sdf_attribute: ::std::option::Option<
        unsafe extern "C" fn(
            attribute: *mut mjtNum,
            name: *mut *const ::std::os::raw::c_char,
            value: *mut *const ::std::os::raw::c_char,
        ),
    >,
    pub sdf_aabb:
        ::std::option::Option<unsafe extern "C" fn(aabb: *mut mjtNum, attributes: *const mjtNum)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjpPlugin_"][::std::mem::size_of::<mjpPlugin_>() - 152usize];
    ["Alignment of mjpPlugin_"][::std::mem::align_of::<mjpPlugin_>() - 8usize];
    ["Offset of field: mjpPlugin_::name"][::std::mem::offset_of!(mjpPlugin_, name) - 0usize];
    ["Offset of field: mjpPlugin_::nattribute"]
        [::std::mem::offset_of!(mjpPlugin_, nattribute) - 8usize];
    ["Offset of field: mjpPlugin_::attributes"]
        [::std::mem::offset_of!(mjpPlugin_, attributes) - 16usize];
    ["Offset of field: mjpPlugin_::capabilityflags"]
        [::std::mem::offset_of!(mjpPlugin_, capabilityflags) - 24usize];
    ["Offset of field: mjpPlugin_::needstage"]
        [::std::mem::offset_of!(mjpPlugin_, needstage) - 28usize];
    ["Offset of field: mjpPlugin_::nstate"][::std::mem::offset_of!(mjpPlugin_, nstate) - 32usize];
    ["Offset of field: mjpPlugin_::nsensordata"]
        [::std::mem::offset_of!(mjpPlugin_, nsensordata) - 40usize];
    ["Offset of field: mjpPlugin_::init"][::std::mem::offset_of!(mjpPlugin_, init) - 48usize];
    ["Offset of field: mjpPlugin_::destroy"][::std::mem::offset_of!(mjpPlugin_, destroy) - 56usize];
    ["Offset of field: mjpPlugin_::copy"][::std::mem::offset_of!(mjpPlugin_, copy) - 64usize];
    ["Offset of field: mjpPlugin_::reset"][::std::mem::offset_of!(mjpPlugin_, reset) - 72usize];
    ["Offset of field: mjpPlugin_::compute"][::std::mem::offset_of!(mjpPlugin_, compute) - 80usize];
    ["Offset of field: mjpPlugin_::advance"][::std::mem::offset_of!(mjpPlugin_, advance) - 88usize];
    ["Offset of field: mjpPlugin_::visualize"]
        [::std::mem::offset_of!(mjpPlugin_, visualize) - 96usize];
    ["Offset of field: mjpPlugin_::actuator_act_dot"]
        [::std::mem::offset_of!(mjpPlugin_, actuator_act_dot) - 104usize];
    ["Offset of field: mjpPlugin_::sdf_distance"]
        [::std::mem::offset_of!(mjpPlugin_, sdf_distance) - 112usize];
    ["Offset of field: mjpPlugin_::sdf_gradient"]
        [::std::mem::offset_of!(mjpPlugin_, sdf_gradient) - 120usize];
    ["Offset of field: mjpPlugin_::sdf_staticdistance"]
        [::std::mem::offset_of!(mjpPlugin_, sdf_staticdistance) - 128usize];
    ["Offset of field: mjpPlugin_::sdf_attribute"]
        [::std::mem::offset_of!(mjpPlugin_, sdf_attribute) - 136usize];
    ["Offset of field: mjpPlugin_::sdf_aabb"]
        [::std::mem::offset_of!(mjpPlugin_, sdf_aabb) - 144usize];
};
impl Default for mjpPlugin_ {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mjpPlugin = mjpPlugin_;
pub type mjfPluginLibraryLoadCallback = ::std::option::Option<
    unsafe extern "C" fn(
        filename: *const ::std::os::raw::c_char,
        first: ::std::os::raw::c_int,
        count: ::std::os::raw::c_int,
    ),
>;
pub const mjtGridPos__mjGRID_TOPLEFT: mjtGridPos_ = 0;
pub const mjtGridPos__mjGRID_TOPRIGHT: mjtGridPos_ = 1;
pub const mjtGridPos__mjGRID_BOTTOMLEFT: mjtGridPos_ = 2;
pub const mjtGridPos__mjGRID_BOTTOMRIGHT: mjtGridPos_ = 3;
pub const mjtGridPos__mjGRID_TOP: mjtGridPos_ = 4;
pub const mjtGridPos__mjGRID_BOTTOM: mjtGridPos_ = 5;
pub const mjtGridPos__mjGRID_LEFT: mjtGridPos_ = 6;
pub const mjtGridPos__mjGRID_RIGHT: mjtGridPos_ = 7;
pub type mjtGridPos_ = ::std::os::raw::c_uint;
pub use self::mjtGridPos_ as mjtGridPos;
pub const mjtFramebuffer__mjFB_WINDOW: mjtFramebuffer_ = 0;
pub const mjtFramebuffer__mjFB_OFFSCREEN: mjtFramebuffer_ = 1;
pub type mjtFramebuffer_ = ::std::os::raw::c_uint;
pub use self::mjtFramebuffer_ as mjtFramebuffer;
pub const mjtDepthMap__mjDEPTH_ZERONEAR: mjtDepthMap_ = 0;
pub const mjtDepthMap__mjDEPTH_ZEROFAR: mjtDepthMap_ = 1;
pub type mjtDepthMap_ = ::std::os::raw::c_uint;
pub use self::mjtDepthMap_ as mjtDepthMap;
pub const mjtFontScale__mjFONTSCALE_50: mjtFontScale_ = 50;
pub const mjtFontScale__mjFONTSCALE_100: mjtFontScale_ = 100;
pub const mjtFontScale__mjFONTSCALE_150: mjtFontScale_ = 150;
pub const mjtFontScale__mjFONTSCALE_200: mjtFontScale_ = 200;
pub const mjtFontScale__mjFONTSCALE_250: mjtFontScale_ = 250;
pub const mjtFontScale__mjFONTSCALE_300: mjtFontScale_ = 300;
pub type mjtFontScale_ = ::std::os::raw::c_uint;
pub use self::mjtFontScale_ as mjtFontScale;
pub const mjtFont__mjFONT_NORMAL: mjtFont_ = 0;
pub const mjtFont__mjFONT_SHADOW: mjtFont_ = 1;
pub const mjtFont__mjFONT_BIG: mjtFont_ = 2;
pub type mjtFont_ = ::std::os::raw::c_uint;
pub use self::mjtFont_ as mjtFont;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mjrRect_ {
    pub left: ::std::os::raw::c_int,
    pub bottom: ::std::os::raw::c_int,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjrRect_"][::std::mem::size_of::<mjrRect_>() - 16usize];
    ["Alignment of mjrRect_"][::std::mem::align_of::<mjrRect_>() - 4usize];
    ["Offset of field: mjrRect_::left"][::std::mem::offset_of!(mjrRect_, left) - 0usize];
    ["Offset of field: mjrRect_::bottom"][::std::mem::offset_of!(mjrRect_, bottom) - 4usize];
    ["Offset of field: mjrRect_::width"][::std::mem::offset_of!(mjrRect_, width) - 8usize];
    ["Offset of field: mjrRect_::height"][::std::mem::offset_of!(mjrRect_, height) - 12usize];
};
pub type mjrRect = mjrRect_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mjrContext_ {
    pub lineWidth: f32,
    pub shadowClip: f32,
    pub shadowScale: f32,
    pub fogStart: f32,
    pub fogEnd: f32,
    pub fogRGBA: [f32; 4usize],
    pub shadowSize: ::std::os::raw::c_int,
    pub offWidth: ::std::os::raw::c_int,
    pub offHeight: ::std::os::raw::c_int,
    pub offSamples: ::std::os::raw::c_int,
    pub fontScale: ::std::os::raw::c_int,
    pub auxWidth: [::std::os::raw::c_int; 10usize],
    pub auxHeight: [::std::os::raw::c_int; 10usize],
    pub auxSamples: [::std::os::raw::c_int; 10usize],
    pub offFBO: ::std::os::raw::c_uint,
    pub offFBO_r: ::std::os::raw::c_uint,
    pub offColor: ::std::os::raw::c_uint,
    pub offColor_r: ::std::os::raw::c_uint,
    pub offDepthStencil: ::std::os::raw::c_uint,
    pub offDepthStencil_r: ::std::os::raw::c_uint,
    pub shadowFBO: ::std::os::raw::c_uint,
    pub shadowTex: ::std::os::raw::c_uint,
    pub auxFBO: [::std::os::raw::c_uint; 10usize],
    pub auxFBO_r: [::std::os::raw::c_uint; 10usize],
    pub auxColor: [::std::os::raw::c_uint; 10usize],
    pub auxColor_r: [::std::os::raw::c_uint; 10usize],
    pub mat_texid: [::std::os::raw::c_int; 10000usize],
    pub mat_texuniform: [::std::os::raw::c_int; 1000usize],
    pub mat_texrepeat: [f32; 2000usize],
    pub ntexture: ::std::os::raw::c_int,
    pub textureType: [::std::os::raw::c_int; 1000usize],
    pub texture: [::std::os::raw::c_uint; 1000usize],
    pub basePlane: ::std::os::raw::c_uint,
    pub baseMesh: ::std::os::raw::c_uint,
    pub baseHField: ::std::os::raw::c_uint,
    pub baseBuiltin: ::std::os::raw::c_uint,
    pub baseFontNormal: ::std::os::raw::c_uint,
    pub baseFontShadow: ::std::os::raw::c_uint,
    pub baseFontBig: ::std::os::raw::c_uint,
    pub rangePlane: ::std::os::raw::c_int,
    pub rangeMesh: ::std::os::raw::c_int,
    pub rangeHField: ::std::os::raw::c_int,
    pub rangeBuiltin: ::std::os::raw::c_int,
    pub rangeFont: ::std::os::raw::c_int,
    pub nskin: ::std::os::raw::c_int,
    pub skinvertVBO: *mut ::std::os::raw::c_uint,
    pub skinnormalVBO: *mut ::std::os::raw::c_uint,
    pub skintexcoordVBO: *mut ::std::os::raw::c_uint,
    pub skinfaceVBO: *mut ::std::os::raw::c_uint,
    pub charWidth: [::std::os::raw::c_int; 127usize],
    pub charWidthBig: [::std::os::raw::c_int; 127usize],
    pub charHeight: ::std::os::raw::c_int,
    pub charHeightBig: ::std::os::raw::c_int,
    pub glInitialized: ::std::os::raw::c_int,
    pub windowAvailable: ::std::os::raw::c_int,
    pub windowSamples: ::std::os::raw::c_int,
    pub windowStereo: ::std::os::raw::c_int,
    pub windowDoublebuffer: ::std::os::raw::c_int,
    pub currentBuffer: ::std::os::raw::c_int,
    pub readPixelFormat: ::std::os::raw::c_int,
    pub readDepthMap: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjrContext_"][::std::mem::size_of::<mjrContext_>() - 61512usize];
    ["Alignment of mjrContext_"][::std::mem::align_of::<mjrContext_>() - 8usize];
    ["Offset of field: mjrContext_::lineWidth"]
        [::std::mem::offset_of!(mjrContext_, lineWidth) - 0usize];
    ["Offset of field: mjrContext_::shadowClip"]
        [::std::mem::offset_of!(mjrContext_, shadowClip) - 4usize];
    ["Offset of field: mjrContext_::shadowScale"]
        [::std::mem::offset_of!(mjrContext_, shadowScale) - 8usize];
    ["Offset of field: mjrContext_::fogStart"]
        [::std::mem::offset_of!(mjrContext_, fogStart) - 12usize];
    ["Offset of field: mjrContext_::fogEnd"][::std::mem::offset_of!(mjrContext_, fogEnd) - 16usize];
    ["Offset of field: mjrContext_::fogRGBA"]
        [::std::mem::offset_of!(mjrContext_, fogRGBA) - 20usize];
    ["Offset of field: mjrContext_::shadowSize"]
        [::std::mem::offset_of!(mjrContext_, shadowSize) - 36usize];
    ["Offset of field: mjrContext_::offWidth"]
        [::std::mem::offset_of!(mjrContext_, offWidth) - 40usize];
    ["Offset of field: mjrContext_::offHeight"]
        [::std::mem::offset_of!(mjrContext_, offHeight) - 44usize];
    ["Offset of field: mjrContext_::offSamples"]
        [::std::mem::offset_of!(mjrContext_, offSamples) - 48usize];
    ["Offset of field: mjrContext_::fontScale"]
        [::std::mem::offset_of!(mjrContext_, fontScale) - 52usize];
    ["Offset of field: mjrContext_::auxWidth"]
        [::std::mem::offset_of!(mjrContext_, auxWidth) - 56usize];
    ["Offset of field: mjrContext_::auxHeight"]
        [::std::mem::offset_of!(mjrContext_, auxHeight) - 96usize];
    ["Offset of field: mjrContext_::auxSamples"]
        [::std::mem::offset_of!(mjrContext_, auxSamples) - 136usize];
    ["Offset of field: mjrContext_::offFBO"]
        [::std::mem::offset_of!(mjrContext_, offFBO) - 176usize];
    ["Offset of field: mjrContext_::offFBO_r"]
        [::std::mem::offset_of!(mjrContext_, offFBO_r) - 180usize];
    ["Offset of field: mjrContext_::offColor"]
        [::std::mem::offset_of!(mjrContext_, offColor) - 184usize];
    ["Offset of field: mjrContext_::offColor_r"]
        [::std::mem::offset_of!(mjrContext_, offColor_r) - 188usize];
    ["Offset of field: mjrContext_::offDepthStencil"]
        [::std::mem::offset_of!(mjrContext_, offDepthStencil) - 192usize];
    ["Offset of field: mjrContext_::offDepthStencil_r"]
        [::std::mem::offset_of!(mjrContext_, offDepthStencil_r) - 196usize];
    ["Offset of field: mjrContext_::shadowFBO"]
        [::std::mem::offset_of!(mjrContext_, shadowFBO) - 200usize];
    ["Offset of field: mjrContext_::shadowTex"]
        [::std::mem::offset_of!(mjrContext_, shadowTex) - 204usize];
    ["Offset of field: mjrContext_::auxFBO"]
        [::std::mem::offset_of!(mjrContext_, auxFBO) - 208usize];
    ["Offset of field: mjrContext_::auxFBO_r"]
        [::std::mem::offset_of!(mjrContext_, auxFBO_r) - 248usize];
    ["Offset of field: mjrContext_::auxColor"]
        [::std::mem::offset_of!(mjrContext_, auxColor) - 288usize];
    ["Offset of field: mjrContext_::auxColor_r"]
        [::std::mem::offset_of!(mjrContext_, auxColor_r) - 328usize];
    ["Offset of field: mjrContext_::mat_texid"]
        [::std::mem::offset_of!(mjrContext_, mat_texid) - 368usize];
    ["Offset of field: mjrContext_::mat_texuniform"]
        [::std::mem::offset_of!(mjrContext_, mat_texuniform) - 40368usize];
    ["Offset of field: mjrContext_::mat_texrepeat"]
        [::std::mem::offset_of!(mjrContext_, mat_texrepeat) - 44368usize];
    ["Offset of field: mjrContext_::ntexture"]
        [::std::mem::offset_of!(mjrContext_, ntexture) - 52368usize];
    ["Offset of field: mjrContext_::textureType"]
        [::std::mem::offset_of!(mjrContext_, textureType) - 52372usize];
    ["Offset of field: mjrContext_::texture"]
        [::std::mem::offset_of!(mjrContext_, texture) - 56372usize];
    ["Offset of field: mjrContext_::basePlane"]
        [::std::mem::offset_of!(mjrContext_, basePlane) - 60372usize];
    ["Offset of field: mjrContext_::baseMesh"]
        [::std::mem::offset_of!(mjrContext_, baseMesh) - 60376usize];
    ["Offset of field: mjrContext_::baseHField"]
        [::std::mem::offset_of!(mjrContext_, baseHField) - 60380usize];
    ["Offset of field: mjrContext_::baseBuiltin"]
        [::std::mem::offset_of!(mjrContext_, baseBuiltin) - 60384usize];
    ["Offset of field: mjrContext_::baseFontNormal"]
        [::std::mem::offset_of!(mjrContext_, baseFontNormal) - 60388usize];
    ["Offset of field: mjrContext_::baseFontShadow"]
        [::std::mem::offset_of!(mjrContext_, baseFontShadow) - 60392usize];
    ["Offset of field: mjrContext_::baseFontBig"]
        [::std::mem::offset_of!(mjrContext_, baseFontBig) - 60396usize];
    ["Offset of field: mjrContext_::rangePlane"]
        [::std::mem::offset_of!(mjrContext_, rangePlane) - 60400usize];
    ["Offset of field: mjrContext_::rangeMesh"]
        [::std::mem::offset_of!(mjrContext_, rangeMesh) - 60404usize];
    ["Offset of field: mjrContext_::rangeHField"]
        [::std::mem::offset_of!(mjrContext_, rangeHField) - 60408usize];
    ["Offset of field: mjrContext_::rangeBuiltin"]
        [::std::mem::offset_of!(mjrContext_, rangeBuiltin) - 60412usize];
    ["Offset of field: mjrContext_::rangeFont"]
        [::std::mem::offset_of!(mjrContext_, rangeFont) - 60416usize];
    ["Offset of field: mjrContext_::nskin"]
        [::std::mem::offset_of!(mjrContext_, nskin) - 60420usize];
    ["Offset of field: mjrContext_::skinvertVBO"]
        [::std::mem::offset_of!(mjrContext_, skinvertVBO) - 60424usize];
    ["Offset of field: mjrContext_::skinnormalVBO"]
        [::std::mem::offset_of!(mjrContext_, skinnormalVBO) - 60432usize];
    ["Offset of field: mjrContext_::skintexcoordVBO"]
        [::std::mem::offset_of!(mjrContext_, skintexcoordVBO) - 60440usize];
    ["Offset of field: mjrContext_::skinfaceVBO"]
        [::std::mem::offset_of!(mjrContext_, skinfaceVBO) - 60448usize];
    ["Offset of field: mjrContext_::charWidth"]
        [::std::mem::offset_of!(mjrContext_, charWidth) - 60456usize];
    ["Offset of field: mjrContext_::charWidthBig"]
        [::std::mem::offset_of!(mjrContext_, charWidthBig) - 60964usize];
    ["Offset of field: mjrContext_::charHeight"]
        [::std::mem::offset_of!(mjrContext_, charHeight) - 61472usize];
    ["Offset of field: mjrContext_::charHeightBig"]
        [::std::mem::offset_of!(mjrContext_, charHeightBig) - 61476usize];
    ["Offset of field: mjrContext_::glInitialized"]
        [::std::mem::offset_of!(mjrContext_, glInitialized) - 61480usize];
    ["Offset of field: mjrContext_::windowAvailable"]
        [::std::mem::offset_of!(mjrContext_, windowAvailable) - 61484usize];
    ["Offset of field: mjrContext_::windowSamples"]
        [::std::mem::offset_of!(mjrContext_, windowSamples) - 61488usize];
    ["Offset of field: mjrContext_::windowStereo"]
        [::std::mem::offset_of!(mjrContext_, windowStereo) - 61492usize];
    ["Offset of field: mjrContext_::windowDoublebuffer"]
        [::std::mem::offset_of!(mjrContext_, windowDoublebuffer) - 61496usize];
    ["Offset of field: mjrContext_::currentBuffer"]
        [::std::mem::offset_of!(mjrContext_, currentBuffer) - 61500usize];
    ["Offset of field: mjrContext_::readPixelFormat"]
        [::std::mem::offset_of!(mjrContext_, readPixelFormat) - 61504usize];
    ["Offset of field: mjrContext_::readDepthMap"]
        [::std::mem::offset_of!(mjrContext_, readDepthMap) - 61508usize];
};
impl Default for mjrContext_ {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mjrContext = mjrContext_;
pub type mjString = ::std::os::raw::c_void;
pub type mjStringVec = ::std::os::raw::c_void;
pub type mjIntVec = ::std::os::raw::c_void;
pub type mjIntVecVec = ::std::os::raw::c_void;
pub type mjFloatVec = ::std::os::raw::c_void;
pub type mjFloatVecVec = ::std::os::raw::c_void;
pub type mjDoubleVec = ::std::os::raw::c_void;
pub type mjByteVec = ::std::os::raw::c_void;
pub const mjtGeomInertia__mjINERTIA_VOLUME: mjtGeomInertia_ = 0;
pub const mjtGeomInertia__mjINERTIA_SHELL: mjtGeomInertia_ = 1;
pub type mjtGeomInertia_ = ::std::os::raw::c_uint;
pub use self::mjtGeomInertia_ as mjtGeomInertia;
pub const mjtMeshInertia__mjINERTIA_CONVEX: mjtMeshInertia_ = 0;
pub const mjtMeshInertia__mjINERTIA_EXACT: mjtMeshInertia_ = 1;
pub const mjtMeshInertia__mjINERTIA_LEGACY: mjtMeshInertia_ = 2;
pub type mjtMeshInertia_ = ::std::os::raw::c_uint;
pub use self::mjtMeshInertia_ as mjtMeshInertia;
pub const mjtBuiltin__mjBUILTIN_NONE: mjtBuiltin_ = 0;
pub const mjtBuiltin__mjBUILTIN_GRADIENT: mjtBuiltin_ = 1;
pub const mjtBuiltin__mjBUILTIN_CHECKER: mjtBuiltin_ = 2;
pub const mjtBuiltin__mjBUILTIN_FLAT: mjtBuiltin_ = 3;
pub type mjtBuiltin_ = ::std::os::raw::c_uint;
pub use self::mjtBuiltin_ as mjtBuiltin;
pub const mjtMark__mjMARK_NONE: mjtMark_ = 0;
pub const mjtMark__mjMARK_EDGE: mjtMark_ = 1;
pub const mjtMark__mjMARK_CROSS: mjtMark_ = 2;
pub const mjtMark__mjMARK_RANDOM: mjtMark_ = 3;
pub type mjtMark_ = ::std::os::raw::c_uint;
pub use self::mjtMark_ as mjtMark;
pub const mjtLimited__mjLIMITED_FALSE: mjtLimited_ = 0;
pub const mjtLimited__mjLIMITED_TRUE: mjtLimited_ = 1;
pub const mjtLimited__mjLIMITED_AUTO: mjtLimited_ = 2;
pub type mjtLimited_ = ::std::os::raw::c_uint;
pub use self::mjtLimited_ as mjtLimited;
pub const mjtAlignFree__mjALIGNFREE_FALSE: mjtAlignFree_ = 0;
pub const mjtAlignFree__mjALIGNFREE_TRUE: mjtAlignFree_ = 1;
pub const mjtAlignFree__mjALIGNFREE_AUTO: mjtAlignFree_ = 2;
pub type mjtAlignFree_ = ::std::os::raw::c_uint;
pub use self::mjtAlignFree_ as mjtAlignFree;
pub const mjtInertiaFromGeom__mjINERTIAFROMGEOM_FALSE: mjtInertiaFromGeom_ = 0;
pub const mjtInertiaFromGeom__mjINERTIAFROMGEOM_TRUE: mjtInertiaFromGeom_ = 1;
pub const mjtInertiaFromGeom__mjINERTIAFROMGEOM_AUTO: mjtInertiaFromGeom_ = 2;
pub type mjtInertiaFromGeom_ = ::std::os::raw::c_uint;
pub use self::mjtInertiaFromGeom_ as mjtInertiaFromGeom;
pub const mjtOrientation__mjORIENTATION_QUAT: mjtOrientation_ = 0;
pub const mjtOrientation__mjORIENTATION_AXISANGLE: mjtOrientation_ = 1;
pub const mjtOrientation__mjORIENTATION_XYAXES: mjtOrientation_ = 2;
pub const mjtOrientation__mjORIENTATION_ZAXIS: mjtOrientation_ = 3;
pub const mjtOrientation__mjORIENTATION_EULER: mjtOrientation_ = 4;
pub type mjtOrientation_ = ::std::os::raw::c_uint;
pub use self::mjtOrientation_ as mjtOrientation;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mjsElement_ {
    pub elemtype: mjtObj,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjsElement_"][::std::mem::size_of::<mjsElement_>() - 4usize];
    ["Alignment of mjsElement_"][::std::mem::align_of::<mjsElement_>() - 4usize];
    ["Offset of field: mjsElement_::elemtype"]
        [::std::mem::offset_of!(mjsElement_, elemtype) - 0usize];
};
impl Default for mjsElement_ {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mjsElement = mjsElement_;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mjsCompiler_ {
    pub autolimits: mjtByte,
    pub boundmass: f64,
    pub boundinertia: f64,
    pub settotalmass: f64,
    pub balanceinertia: mjtByte,
    pub fitaabb: mjtByte,
    pub degree: mjtByte,
    pub eulerseq: [::std::os::raw::c_char; 3usize],
    pub discardvisual: mjtByte,
    pub usethread: mjtByte,
    pub fusestatic: mjtByte,
    pub inertiafromgeom: ::std::os::raw::c_int,
    pub inertiagrouprange: [::std::os::raw::c_int; 2usize],
    pub alignfree: ::std::os::raw::c_int,
    pub LRopt: mjLROpt,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjsCompiler_"][::std::mem::size_of::<mjsCompiler_>() - 136usize];
    ["Alignment of mjsCompiler_"][::std::mem::align_of::<mjsCompiler_>() - 8usize];
    ["Offset of field: mjsCompiler_::autolimits"]
        [::std::mem::offset_of!(mjsCompiler_, autolimits) - 0usize];
    ["Offset of field: mjsCompiler_::boundmass"]
        [::std::mem::offset_of!(mjsCompiler_, boundmass) - 8usize];
    ["Offset of field: mjsCompiler_::boundinertia"]
        [::std::mem::offset_of!(mjsCompiler_, boundinertia) - 16usize];
    ["Offset of field: mjsCompiler_::settotalmass"]
        [::std::mem::offset_of!(mjsCompiler_, settotalmass) - 24usize];
    ["Offset of field: mjsCompiler_::balanceinertia"]
        [::std::mem::offset_of!(mjsCompiler_, balanceinertia) - 32usize];
    ["Offset of field: mjsCompiler_::fitaabb"]
        [::std::mem::offset_of!(mjsCompiler_, fitaabb) - 33usize];
    ["Offset of field: mjsCompiler_::degree"]
        [::std::mem::offset_of!(mjsCompiler_, degree) - 34usize];
    ["Offset of field: mjsCompiler_::eulerseq"]
        [::std::mem::offset_of!(mjsCompiler_, eulerseq) - 35usize];
    ["Offset of field: mjsCompiler_::discardvisual"]
        [::std::mem::offset_of!(mjsCompiler_, discardvisual) - 38usize];
    ["Offset of field: mjsCompiler_::usethread"]
        [::std::mem::offset_of!(mjsCompiler_, usethread) - 39usize];
    ["Offset of field: mjsCompiler_::fusestatic"]
        [::std::mem::offset_of!(mjsCompiler_, fusestatic) - 40usize];
    ["Offset of field: mjsCompiler_::inertiafromgeom"]
        [::std::mem::offset_of!(mjsCompiler_, inertiafromgeom) - 44usize];
    ["Offset of field: mjsCompiler_::inertiagrouprange"]
        [::std::mem::offset_of!(mjsCompiler_, inertiagrouprange) - 48usize];
    ["Offset of field: mjsCompiler_::alignfree"]
        [::std::mem::offset_of!(mjsCompiler_, alignfree) - 56usize];
    ["Offset of field: mjsCompiler_::LRopt"][::std::mem::offset_of!(mjsCompiler_, LRopt) - 64usize];
};
pub type mjsCompiler = mjsCompiler_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mjSpec_ {
    pub element: *mut mjsElement,
    pub modelname: *mut mjString,
    pub compiler: mjsCompiler,
    pub strippath: mjtByte,
    pub meshdir: *mut mjString,
    pub texturedir: *mut mjString,
    pub option: mjOption,
    pub visual: mjVisual,
    pub stat: mjStatistic,
    pub memory: usize,
    pub nemax: ::std::os::raw::c_int,
    pub nuserdata: ::std::os::raw::c_int,
    pub nuser_body: ::std::os::raw::c_int,
    pub nuser_jnt: ::std::os::raw::c_int,
    pub nuser_geom: ::std::os::raw::c_int,
    pub nuser_site: ::std::os::raw::c_int,
    pub nuser_cam: ::std::os::raw::c_int,
    pub nuser_tendon: ::std::os::raw::c_int,
    pub nuser_actuator: ::std::os::raw::c_int,
    pub nuser_sensor: ::std::os::raw::c_int,
    pub nkey: ::std::os::raw::c_int,
    pub njmax: ::std::os::raw::c_int,
    pub nconmax: ::std::os::raw::c_int,
    pub nstack: usize,
    pub comment: *mut mjString,
    pub modelfiledir: *mut mjString,
    pub hasImplicitPluginElem: mjtByte,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjSpec_"][::std::mem::size_of::<mjSpec_>() - 1264usize];
    ["Alignment of mjSpec_"][::std::mem::align_of::<mjSpec_>() - 8usize];
    ["Offset of field: mjSpec_::element"][::std::mem::offset_of!(mjSpec_, element) - 0usize];
    ["Offset of field: mjSpec_::modelname"][::std::mem::offset_of!(mjSpec_, modelname) - 8usize];
    ["Offset of field: mjSpec_::compiler"][::std::mem::offset_of!(mjSpec_, compiler) - 16usize];
    ["Offset of field: mjSpec_::strippath"][::std::mem::offset_of!(mjSpec_, strippath) - 152usize];
    ["Offset of field: mjSpec_::meshdir"][::std::mem::offset_of!(mjSpec_, meshdir) - 160usize];
    ["Offset of field: mjSpec_::texturedir"]
        [::std::mem::offset_of!(mjSpec_, texturedir) - 168usize];
    ["Offset of field: mjSpec_::option"][::std::mem::offset_of!(mjSpec_, option) - 176usize];
    ["Offset of field: mjSpec_::visual"][::std::mem::offset_of!(mjSpec_, visual) - 480usize];
    ["Offset of field: mjSpec_::stat"][::std::mem::offset_of!(mjSpec_, stat) - 1112usize];
    ["Offset of field: mjSpec_::memory"][::std::mem::offset_of!(mjSpec_, memory) - 1168usize];
    ["Offset of field: mjSpec_::nemax"][::std::mem::offset_of!(mjSpec_, nemax) - 1176usize];
    ["Offset of field: mjSpec_::nuserdata"][::std::mem::offset_of!(mjSpec_, nuserdata) - 1180usize];
    ["Offset of field: mjSpec_::nuser_body"]
        [::std::mem::offset_of!(mjSpec_, nuser_body) - 1184usize];
    ["Offset of field: mjSpec_::nuser_jnt"][::std::mem::offset_of!(mjSpec_, nuser_jnt) - 1188usize];
    ["Offset of field: mjSpec_::nuser_geom"]
        [::std::mem::offset_of!(mjSpec_, nuser_geom) - 1192usize];
    ["Offset of field: mjSpec_::nuser_site"]
        [::std::mem::offset_of!(mjSpec_, nuser_site) - 1196usize];
    ["Offset of field: mjSpec_::nuser_cam"][::std::mem::offset_of!(mjSpec_, nuser_cam) - 1200usize];
    ["Offset of field: mjSpec_::nuser_tendon"]
        [::std::mem::offset_of!(mjSpec_, nuser_tendon) - 1204usize];
    ["Offset of field: mjSpec_::nuser_actuator"]
        [::std::mem::offset_of!(mjSpec_, nuser_actuator) - 1208usize];
    ["Offset of field: mjSpec_::nuser_sensor"]
        [::std::mem::offset_of!(mjSpec_, nuser_sensor) - 1212usize];
    ["Offset of field: mjSpec_::nkey"][::std::mem::offset_of!(mjSpec_, nkey) - 1216usize];
    ["Offset of field: mjSpec_::njmax"][::std::mem::offset_of!(mjSpec_, njmax) - 1220usize];
    ["Offset of field: mjSpec_::nconmax"][::std::mem::offset_of!(mjSpec_, nconmax) - 1224usize];
    ["Offset of field: mjSpec_::nstack"][::std::mem::offset_of!(mjSpec_, nstack) - 1232usize];
    ["Offset of field: mjSpec_::comment"][::std::mem::offset_of!(mjSpec_, comment) - 1240usize];
    ["Offset of field: mjSpec_::modelfiledir"]
        [::std::mem::offset_of!(mjSpec_, modelfiledir) - 1248usize];
    ["Offset of field: mjSpec_::hasImplicitPluginElem"]
        [::std::mem::offset_of!(mjSpec_, hasImplicitPluginElem) - 1256usize];
};
impl Default for mjSpec_ {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mjSpec = mjSpec_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mjsOrientation_ {
    pub type_: mjtOrientation,
    pub axisangle: [f64; 4usize],
    pub xyaxes: [f64; 6usize],
    pub zaxis: [f64; 3usize],
    pub euler: [f64; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjsOrientation_"][::std::mem::size_of::<mjsOrientation_>() - 136usize];
    ["Alignment of mjsOrientation_"][::std::mem::align_of::<mjsOrientation_>() - 8usize];
    ["Offset of field: mjsOrientation_::type_"]
        [::std::mem::offset_of!(mjsOrientation_, type_) - 0usize];
    ["Offset of field: mjsOrientation_::axisangle"]
        [::std::mem::offset_of!(mjsOrientation_, axisangle) - 8usize];
    ["Offset of field: mjsOrientation_::xyaxes"]
        [::std::mem::offset_of!(mjsOrientation_, xyaxes) - 40usize];
    ["Offset of field: mjsOrientation_::zaxis"]
        [::std::mem::offset_of!(mjsOrientation_, zaxis) - 88usize];
    ["Offset of field: mjsOrientation_::euler"]
        [::std::mem::offset_of!(mjsOrientation_, euler) - 112usize];
};
impl Default for mjsOrientation_ {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mjsOrientation = mjsOrientation_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mjsPlugin_ {
    pub element: *mut mjsElement,
    pub name: *mut mjString,
    pub plugin_name: *mut mjString,
    pub active: mjtByte,
    pub info: *mut mjString,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjsPlugin_"][::std::mem::size_of::<mjsPlugin_>() - 40usize];
    ["Alignment of mjsPlugin_"][::std::mem::align_of::<mjsPlugin_>() - 8usize];
    ["Offset of field: mjsPlugin_::element"][::std::mem::offset_of!(mjsPlugin_, element) - 0usize];
    ["Offset of field: mjsPlugin_::name"][::std::mem::offset_of!(mjsPlugin_, name) - 8usize];
    ["Offset of field: mjsPlugin_::plugin_name"]
        [::std::mem::offset_of!(mjsPlugin_, plugin_name) - 16usize];
    ["Offset of field: mjsPlugin_::active"][::std::mem::offset_of!(mjsPlugin_, active) - 24usize];
    ["Offset of field: mjsPlugin_::info"][::std::mem::offset_of!(mjsPlugin_, info) - 32usize];
};
impl Default for mjsPlugin_ {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mjsPlugin = mjsPlugin_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mjsBody_ {
    pub element: *mut mjsElement,
    pub name: *mut mjString,
    pub childclass: *mut mjString,
    pub pos: [f64; 3usize],
    pub quat: [f64; 4usize],
    pub alt: mjsOrientation,
    pub mass: f64,
    pub ipos: [f64; 3usize],
    pub iquat: [f64; 4usize],
    pub inertia: [f64; 3usize],
    pub ialt: mjsOrientation,
    pub fullinertia: [f64; 6usize],
    pub mocap: mjtByte,
    pub gravcomp: f64,
    pub userdata: *mut mjDoubleVec,
    pub explicitinertial: mjtByte,
    pub plugin: mjsPlugin,
    pub info: *mut mjString,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjsBody_"][::std::mem::size_of::<mjsBody_>() - 568usize];
    ["Alignment of mjsBody_"][::std::mem::align_of::<mjsBody_>() - 8usize];
    ["Offset of field: mjsBody_::element"][::std::mem::offset_of!(mjsBody_, element) - 0usize];
    ["Offset of field: mjsBody_::name"][::std::mem::offset_of!(mjsBody_, name) - 8usize];
    ["Offset of field: mjsBody_::childclass"]
        [::std::mem::offset_of!(mjsBody_, childclass) - 16usize];
    ["Offset of field: mjsBody_::pos"][::std::mem::offset_of!(mjsBody_, pos) - 24usize];
    ["Offset of field: mjsBody_::quat"][::std::mem::offset_of!(mjsBody_, quat) - 48usize];
    ["Offset of field: mjsBody_::alt"][::std::mem::offset_of!(mjsBody_, alt) - 80usize];
    ["Offset of field: mjsBody_::mass"][::std::mem::offset_of!(mjsBody_, mass) - 216usize];
    ["Offset of field: mjsBody_::ipos"][::std::mem::offset_of!(mjsBody_, ipos) - 224usize];
    ["Offset of field: mjsBody_::iquat"][::std::mem::offset_of!(mjsBody_, iquat) - 248usize];
    ["Offset of field: mjsBody_::inertia"][::std::mem::offset_of!(mjsBody_, inertia) - 280usize];
    ["Offset of field: mjsBody_::ialt"][::std::mem::offset_of!(mjsBody_, ialt) - 304usize];
    ["Offset of field: mjsBody_::fullinertia"]
        [::std::mem::offset_of!(mjsBody_, fullinertia) - 440usize];
    ["Offset of field: mjsBody_::mocap"][::std::mem::offset_of!(mjsBody_, mocap) - 488usize];
    ["Offset of field: mjsBody_::gravcomp"][::std::mem::offset_of!(mjsBody_, gravcomp) - 496usize];
    ["Offset of field: mjsBody_::userdata"][::std::mem::offset_of!(mjsBody_, userdata) - 504usize];
    ["Offset of field: mjsBody_::explicitinertial"]
        [::std::mem::offset_of!(mjsBody_, explicitinertial) - 512usize];
    ["Offset of field: mjsBody_::plugin"][::std::mem::offset_of!(mjsBody_, plugin) - 520usize];
    ["Offset of field: mjsBody_::info"][::std::mem::offset_of!(mjsBody_, info) - 560usize];
};
impl Default for mjsBody_ {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mjsBody = mjsBody_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mjsFrame_ {
    pub element: *mut mjsElement,
    pub name: *mut mjString,
    pub childclass: *mut mjString,
    pub pos: [f64; 3usize],
    pub quat: [f64; 4usize],
    pub alt: mjsOrientation,
    pub info: *mut mjString,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjsFrame_"][::std::mem::size_of::<mjsFrame_>() - 224usize];
    ["Alignment of mjsFrame_"][::std::mem::align_of::<mjsFrame_>() - 8usize];
    ["Offset of field: mjsFrame_::element"][::std::mem::offset_of!(mjsFrame_, element) - 0usize];
    ["Offset of field: mjsFrame_::name"][::std::mem::offset_of!(mjsFrame_, name) - 8usize];
    ["Offset of field: mjsFrame_::childclass"]
        [::std::mem::offset_of!(mjsFrame_, childclass) - 16usize];
    ["Offset of field: mjsFrame_::pos"][::std::mem::offset_of!(mjsFrame_, pos) - 24usize];
    ["Offset of field: mjsFrame_::quat"][::std::mem::offset_of!(mjsFrame_, quat) - 48usize];
    ["Offset of field: mjsFrame_::alt"][::std::mem::offset_of!(mjsFrame_, alt) - 80usize];
    ["Offset of field: mjsFrame_::info"][::std::mem::offset_of!(mjsFrame_, info) - 216usize];
};
impl Default for mjsFrame_ {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mjsFrame = mjsFrame_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mjsJoint_ {
    pub element: *mut mjsElement,
    pub name: *mut mjString,
    pub type_: mjtJoint,
    pub pos: [f64; 3usize],
    pub axis: [f64; 3usize],
    pub ref_: f64,
    pub align: ::std::os::raw::c_int,
    pub stiffness: f64,
    pub springref: f64,
    pub springdamper: [f64; 2usize],
    pub limited: ::std::os::raw::c_int,
    pub range: [f64; 2usize],
    pub margin: f64,
    pub solref_limit: [mjtNum; 2usize],
    pub solimp_limit: [mjtNum; 5usize],
    pub actfrclimited: ::std::os::raw::c_int,
    pub actfrcrange: [f64; 2usize],
    pub armature: f64,
    pub damping: f64,
    pub frictionloss: f64,
    pub solref_friction: [mjtNum; 2usize],
    pub solimp_friction: [mjtNum; 5usize],
    pub group: ::std::os::raw::c_int,
    pub actgravcomp: mjtByte,
    pub userdata: *mut mjDoubleVec,
    pub info: *mut mjString,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjsJoint_"][::std::mem::size_of::<mjsJoint_>() - 336usize];
    ["Alignment of mjsJoint_"][::std::mem::align_of::<mjsJoint_>() - 8usize];
    ["Offset of field: mjsJoint_::element"][::std::mem::offset_of!(mjsJoint_, element) - 0usize];
    ["Offset of field: mjsJoint_::name"][::std::mem::offset_of!(mjsJoint_, name) - 8usize];
    ["Offset of field: mjsJoint_::type_"][::std::mem::offset_of!(mjsJoint_, type_) - 16usize];
    ["Offset of field: mjsJoint_::pos"][::std::mem::offset_of!(mjsJoint_, pos) - 24usize];
    ["Offset of field: mjsJoint_::axis"][::std::mem::offset_of!(mjsJoint_, axis) - 48usize];
    ["Offset of field: mjsJoint_::ref_"][::std::mem::offset_of!(mjsJoint_, ref_) - 72usize];
    ["Offset of field: mjsJoint_::align"][::std::mem::offset_of!(mjsJoint_, align) - 80usize];
    ["Offset of field: mjsJoint_::stiffness"]
        [::std::mem::offset_of!(mjsJoint_, stiffness) - 88usize];
    ["Offset of field: mjsJoint_::springref"]
        [::std::mem::offset_of!(mjsJoint_, springref) - 96usize];
    ["Offset of field: mjsJoint_::springdamper"]
        [::std::mem::offset_of!(mjsJoint_, springdamper) - 104usize];
    ["Offset of field: mjsJoint_::limited"][::std::mem::offset_of!(mjsJoint_, limited) - 120usize];
    ["Offset of field: mjsJoint_::range"][::std::mem::offset_of!(mjsJoint_, range) - 128usize];
    ["Offset of field: mjsJoint_::margin"][::std::mem::offset_of!(mjsJoint_, margin) - 144usize];
    ["Offset of field: mjsJoint_::solref_limit"]
        [::std::mem::offset_of!(mjsJoint_, solref_limit) - 152usize];
    ["Offset of field: mjsJoint_::solimp_limit"]
        [::std::mem::offset_of!(mjsJoint_, solimp_limit) - 168usize];
    ["Offset of field: mjsJoint_::actfrclimited"]
        [::std::mem::offset_of!(mjsJoint_, actfrclimited) - 208usize];
    ["Offset of field: mjsJoint_::actfrcrange"]
        [::std::mem::offset_of!(mjsJoint_, actfrcrange) - 216usize];
    ["Offset of field: mjsJoint_::armature"]
        [::std::mem::offset_of!(mjsJoint_, armature) - 232usize];
    ["Offset of field: mjsJoint_::damping"][::std::mem::offset_of!(mjsJoint_, damping) - 240usize];
    ["Offset of field: mjsJoint_::frictionloss"]
        [::std::mem::offset_of!(mjsJoint_, frictionloss) - 248usize];
    ["Offset of field: mjsJoint_::solref_friction"]
        [::std::mem::offset_of!(mjsJoint_, solref_friction) - 256usize];
    ["Offset of field: mjsJoint_::solimp_friction"]
        [::std::mem::offset_of!(mjsJoint_, solimp_friction) - 272usize];
    ["Offset of field: mjsJoint_::group"][::std::mem::offset_of!(mjsJoint_, group) - 312usize];
    ["Offset of field: mjsJoint_::actgravcomp"]
        [::std::mem::offset_of!(mjsJoint_, actgravcomp) - 316usize];
    ["Offset of field: mjsJoint_::userdata"]
        [::std::mem::offset_of!(mjsJoint_, userdata) - 320usize];
    ["Offset of field: mjsJoint_::info"][::std::mem::offset_of!(mjsJoint_, info) - 328usize];
};
impl Default for mjsJoint_ {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mjsJoint = mjsJoint_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mjsGeom_ {
    pub element: *mut mjsElement,
    pub name: *mut mjString,
    pub type_: mjtGeom,
    pub pos: [f64; 3usize],
    pub quat: [f64; 4usize],
    pub alt: mjsOrientation,
    pub fromto: [f64; 6usize],
    pub size: [f64; 3usize],
    pub contype: ::std::os::raw::c_int,
    pub conaffinity: ::std::os::raw::c_int,
    pub condim: ::std::os::raw::c_int,
    pub priority: ::std::os::raw::c_int,
    pub friction: [f64; 3usize],
    pub solmix: f64,
    pub solref: [mjtNum; 2usize],
    pub solimp: [mjtNum; 5usize],
    pub margin: f64,
    pub gap: f64,
    pub mass: f64,
    pub density: f64,
    pub typeinertia: mjtGeomInertia,
    pub fluid_ellipsoid: mjtNum,
    pub fluid_coefs: [mjtNum; 5usize],
    pub material: *mut mjString,
    pub rgba: [f32; 4usize],
    pub group: ::std::os::raw::c_int,
    pub hfieldname: *mut mjString,
    pub meshname: *mut mjString,
    pub fitscale: f64,
    pub userdata: *mut mjDoubleVec,
    pub plugin: mjsPlugin,
    pub info: *mut mjString,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjsGeom_"][::std::mem::size_of::<mjsGeom_>() - 592usize];
    ["Alignment of mjsGeom_"][::std::mem::align_of::<mjsGeom_>() - 8usize];
    ["Offset of field: mjsGeom_::element"][::std::mem::offset_of!(mjsGeom_, element) - 0usize];
    ["Offset of field: mjsGeom_::name"][::std::mem::offset_of!(mjsGeom_, name) - 8usize];
    ["Offset of field: mjsGeom_::type_"][::std::mem::offset_of!(mjsGeom_, type_) - 16usize];
    ["Offset of field: mjsGeom_::pos"][::std::mem::offset_of!(mjsGeom_, pos) - 24usize];
    ["Offset of field: mjsGeom_::quat"][::std::mem::offset_of!(mjsGeom_, quat) - 48usize];
    ["Offset of field: mjsGeom_::alt"][::std::mem::offset_of!(mjsGeom_, alt) - 80usize];
    ["Offset of field: mjsGeom_::fromto"][::std::mem::offset_of!(mjsGeom_, fromto) - 216usize];
    ["Offset of field: mjsGeom_::size"][::std::mem::offset_of!(mjsGeom_, size) - 264usize];
    ["Offset of field: mjsGeom_::contype"][::std::mem::offset_of!(mjsGeom_, contype) - 288usize];
    ["Offset of field: mjsGeom_::conaffinity"]
        [::std::mem::offset_of!(mjsGeom_, conaffinity) - 292usize];
    ["Offset of field: mjsGeom_::condim"][::std::mem::offset_of!(mjsGeom_, condim) - 296usize];
    ["Offset of field: mjsGeom_::priority"][::std::mem::offset_of!(mjsGeom_, priority) - 300usize];
    ["Offset of field: mjsGeom_::friction"][::std::mem::offset_of!(mjsGeom_, friction) - 304usize];
    ["Offset of field: mjsGeom_::solmix"][::std::mem::offset_of!(mjsGeom_, solmix) - 328usize];
    ["Offset of field: mjsGeom_::solref"][::std::mem::offset_of!(mjsGeom_, solref) - 336usize];
    ["Offset of field: mjsGeom_::solimp"][::std::mem::offset_of!(mjsGeom_, solimp) - 352usize];
    ["Offset of field: mjsGeom_::margin"][::std::mem::offset_of!(mjsGeom_, margin) - 392usize];
    ["Offset of field: mjsGeom_::gap"][::std::mem::offset_of!(mjsGeom_, gap) - 400usize];
    ["Offset of field: mjsGeom_::mass"][::std::mem::offset_of!(mjsGeom_, mass) - 408usize];
    ["Offset of field: mjsGeom_::density"][::std::mem::offset_of!(mjsGeom_, density) - 416usize];
    ["Offset of field: mjsGeom_::typeinertia"]
        [::std::mem::offset_of!(mjsGeom_, typeinertia) - 424usize];
    ["Offset of field: mjsGeom_::fluid_ellipsoid"]
        [::std::mem::offset_of!(mjsGeom_, fluid_ellipsoid) - 432usize];
    ["Offset of field: mjsGeom_::fluid_coefs"]
        [::std::mem::offset_of!(mjsGeom_, fluid_coefs) - 440usize];
    ["Offset of field: mjsGeom_::material"][::std::mem::offset_of!(mjsGeom_, material) - 480usize];
    ["Offset of field: mjsGeom_::rgba"][::std::mem::offset_of!(mjsGeom_, rgba) - 488usize];
    ["Offset of field: mjsGeom_::group"][::std::mem::offset_of!(mjsGeom_, group) - 504usize];
    ["Offset of field: mjsGeom_::hfieldname"]
        [::std::mem::offset_of!(mjsGeom_, hfieldname) - 512usize];
    ["Offset of field: mjsGeom_::meshname"][::std::mem::offset_of!(mjsGeom_, meshname) - 520usize];
    ["Offset of field: mjsGeom_::fitscale"][::std::mem::offset_of!(mjsGeom_, fitscale) - 528usize];
    ["Offset of field: mjsGeom_::userdata"][::std::mem::offset_of!(mjsGeom_, userdata) - 536usize];
    ["Offset of field: mjsGeom_::plugin"][::std::mem::offset_of!(mjsGeom_, plugin) - 544usize];
    ["Offset of field: mjsGeom_::info"][::std::mem::offset_of!(mjsGeom_, info) - 584usize];
};
impl Default for mjsGeom_ {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mjsGeom = mjsGeom_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mjsSite_ {
    pub element: *mut mjsElement,
    pub name: *mut mjString,
    pub pos: [f64; 3usize],
    pub quat: [f64; 4usize],
    pub alt: mjsOrientation,
    pub fromto: [f64; 6usize],
    pub size: [f64; 3usize],
    pub type_: mjtGeom,
    pub material: *mut mjString,
    pub group: ::std::os::raw::c_int,
    pub rgba: [f32; 4usize],
    pub userdata: *mut mjDoubleVec,
    pub info: *mut mjString,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjsSite_"][::std::mem::size_of::<mjsSite_>() - 336usize];
    ["Alignment of mjsSite_"][::std::mem::align_of::<mjsSite_>() - 8usize];
    ["Offset of field: mjsSite_::element"][::std::mem::offset_of!(mjsSite_, element) - 0usize];
    ["Offset of field: mjsSite_::name"][::std::mem::offset_of!(mjsSite_, name) - 8usize];
    ["Offset of field: mjsSite_::pos"][::std::mem::offset_of!(mjsSite_, pos) - 16usize];
    ["Offset of field: mjsSite_::quat"][::std::mem::offset_of!(mjsSite_, quat) - 40usize];
    ["Offset of field: mjsSite_::alt"][::std::mem::offset_of!(mjsSite_, alt) - 72usize];
    ["Offset of field: mjsSite_::fromto"][::std::mem::offset_of!(mjsSite_, fromto) - 208usize];
    ["Offset of field: mjsSite_::size"][::std::mem::offset_of!(mjsSite_, size) - 256usize];
    ["Offset of field: mjsSite_::type_"][::std::mem::offset_of!(mjsSite_, type_) - 280usize];
    ["Offset of field: mjsSite_::material"][::std::mem::offset_of!(mjsSite_, material) - 288usize];
    ["Offset of field: mjsSite_::group"][::std::mem::offset_of!(mjsSite_, group) - 296usize];
    ["Offset of field: mjsSite_::rgba"][::std::mem::offset_of!(mjsSite_, rgba) - 300usize];
    ["Offset of field: mjsSite_::userdata"][::std::mem::offset_of!(mjsSite_, userdata) - 320usize];
    ["Offset of field: mjsSite_::info"][::std::mem::offset_of!(mjsSite_, info) - 328usize];
};
impl Default for mjsSite_ {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mjsSite = mjsSite_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mjsCamera_ {
    pub element: *mut mjsElement,
    pub name: *mut mjString,
    pub pos: [f64; 3usize],
    pub quat: [f64; 4usize],
    pub alt: mjsOrientation,
    pub mode: mjtCamLight,
    pub targetbody: *mut mjString,
    pub orthographic: ::std::os::raw::c_int,
    pub fovy: f64,
    pub ipd: f64,
    pub intrinsic: [f32; 4usize],
    pub sensor_size: [f32; 2usize],
    pub resolution: [f32; 2usize],
    pub focal_length: [f32; 2usize],
    pub focal_pixel: [f32; 2usize],
    pub principal_length: [f32; 2usize],
    pub principal_pixel: [f32; 2usize],
    pub userdata: *mut mjDoubleVec,
    pub info: *mut mjString,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjsCamera_"][::std::mem::size_of::<mjsCamera_>() - 328usize];
    ["Alignment of mjsCamera_"][::std::mem::align_of::<mjsCamera_>() - 8usize];
    ["Offset of field: mjsCamera_::element"][::std::mem::offset_of!(mjsCamera_, element) - 0usize];
    ["Offset of field: mjsCamera_::name"][::std::mem::offset_of!(mjsCamera_, name) - 8usize];
    ["Offset of field: mjsCamera_::pos"][::std::mem::offset_of!(mjsCamera_, pos) - 16usize];
    ["Offset of field: mjsCamera_::quat"][::std::mem::offset_of!(mjsCamera_, quat) - 40usize];
    ["Offset of field: mjsCamera_::alt"][::std::mem::offset_of!(mjsCamera_, alt) - 72usize];
    ["Offset of field: mjsCamera_::mode"][::std::mem::offset_of!(mjsCamera_, mode) - 208usize];
    ["Offset of field: mjsCamera_::targetbody"]
        [::std::mem::offset_of!(mjsCamera_, targetbody) - 216usize];
    ["Offset of field: mjsCamera_::orthographic"]
        [::std::mem::offset_of!(mjsCamera_, orthographic) - 224usize];
    ["Offset of field: mjsCamera_::fovy"][::std::mem::offset_of!(mjsCamera_, fovy) - 232usize];
    ["Offset of field: mjsCamera_::ipd"][::std::mem::offset_of!(mjsCamera_, ipd) - 240usize];
    ["Offset of field: mjsCamera_::intrinsic"]
        [::std::mem::offset_of!(mjsCamera_, intrinsic) - 248usize];
    ["Offset of field: mjsCamera_::sensor_size"]
        [::std::mem::offset_of!(mjsCamera_, sensor_size) - 264usize];
    ["Offset of field: mjsCamera_::resolution"]
        [::std::mem::offset_of!(mjsCamera_, resolution) - 272usize];
    ["Offset of field: mjsCamera_::focal_length"]
        [::std::mem::offset_of!(mjsCamera_, focal_length) - 280usize];
    ["Offset of field: mjsCamera_::focal_pixel"]
        [::std::mem::offset_of!(mjsCamera_, focal_pixel) - 288usize];
    ["Offset of field: mjsCamera_::principal_length"]
        [::std::mem::offset_of!(mjsCamera_, principal_length) - 296usize];
    ["Offset of field: mjsCamera_::principal_pixel"]
        [::std::mem::offset_of!(mjsCamera_, principal_pixel) - 304usize];
    ["Offset of field: mjsCamera_::userdata"]
        [::std::mem::offset_of!(mjsCamera_, userdata) - 312usize];
    ["Offset of field: mjsCamera_::info"][::std::mem::offset_of!(mjsCamera_, info) - 320usize];
};
impl Default for mjsCamera_ {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mjsCamera = mjsCamera_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mjsLight_ {
    pub element: *mut mjsElement,
    pub name: *mut mjString,
    pub pos: [f64; 3usize],
    pub dir: [f64; 3usize],
    pub mode: mjtCamLight,
    pub targetbody: *mut mjString,
    pub active: mjtByte,
    pub directional: mjtByte,
    pub castshadow: mjtByte,
    pub bulbradius: f64,
    pub attenuation: [f32; 3usize],
    pub cutoff: f32,
    pub exponent: f32,
    pub ambient: [f32; 3usize],
    pub diffuse: [f32; 3usize],
    pub specular: [f32; 3usize],
    pub info: *mut mjString,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjsLight_"][::std::mem::size_of::<mjsLight_>() - 160usize];
    ["Alignment of mjsLight_"][::std::mem::align_of::<mjsLight_>() - 8usize];
    ["Offset of field: mjsLight_::element"][::std::mem::offset_of!(mjsLight_, element) - 0usize];
    ["Offset of field: mjsLight_::name"][::std::mem::offset_of!(mjsLight_, name) - 8usize];
    ["Offset of field: mjsLight_::pos"][::std::mem::offset_of!(mjsLight_, pos) - 16usize];
    ["Offset of field: mjsLight_::dir"][::std::mem::offset_of!(mjsLight_, dir) - 40usize];
    ["Offset of field: mjsLight_::mode"][::std::mem::offset_of!(mjsLight_, mode) - 64usize];
    ["Offset of field: mjsLight_::targetbody"]
        [::std::mem::offset_of!(mjsLight_, targetbody) - 72usize];
    ["Offset of field: mjsLight_::active"][::std::mem::offset_of!(mjsLight_, active) - 80usize];
    ["Offset of field: mjsLight_::directional"]
        [::std::mem::offset_of!(mjsLight_, directional) - 81usize];
    ["Offset of field: mjsLight_::castshadow"]
        [::std::mem::offset_of!(mjsLight_, castshadow) - 82usize];
    ["Offset of field: mjsLight_::bulbradius"]
        [::std::mem::offset_of!(mjsLight_, bulbradius) - 88usize];
    ["Offset of field: mjsLight_::attenuation"]
        [::std::mem::offset_of!(mjsLight_, attenuation) - 96usize];
    ["Offset of field: mjsLight_::cutoff"][::std::mem::offset_of!(mjsLight_, cutoff) - 108usize];
    ["Offset of field: mjsLight_::exponent"]
        [::std::mem::offset_of!(mjsLight_, exponent) - 112usize];
    ["Offset of field: mjsLight_::ambient"][::std::mem::offset_of!(mjsLight_, ambient) - 116usize];
    ["Offset of field: mjsLight_::diffuse"][::std::mem::offset_of!(mjsLight_, diffuse) - 128usize];
    ["Offset of field: mjsLight_::specular"]
        [::std::mem::offset_of!(mjsLight_, specular) - 140usize];
    ["Offset of field: mjsLight_::info"][::std::mem::offset_of!(mjsLight_, info) - 152usize];
};
impl Default for mjsLight_ {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mjsLight = mjsLight_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mjsFlex_ {
    pub element: *mut mjsElement,
    pub name: *mut mjString,
    pub contype: ::std::os::raw::c_int,
    pub conaffinity: ::std::os::raw::c_int,
    pub condim: ::std::os::raw::c_int,
    pub priority: ::std::os::raw::c_int,
    pub friction: [f64; 3usize],
    pub solmix: f64,
    pub solref: [mjtNum; 2usize],
    pub solimp: [mjtNum; 5usize],
    pub margin: f64,
    pub gap: f64,
    pub dim: ::std::os::raw::c_int,
    pub radius: f64,
    pub internal: mjtByte,
    pub flatskin: mjtByte,
    pub selfcollide: ::std::os::raw::c_int,
    pub activelayers: ::std::os::raw::c_int,
    pub group: ::std::os::raw::c_int,
    pub edgestiffness: f64,
    pub edgedamping: f64,
    pub rgba: [f32; 4usize],
    pub material: *mut mjString,
    pub young: f64,
    pub poisson: f64,
    pub damping: f64,
    pub thickness: f64,
    pub vertbody: *mut mjStringVec,
    pub vert: *mut mjDoubleVec,
    pub elem: *mut mjIntVec,
    pub texcoord: *mut mjFloatVec,
    pub info: *mut mjString,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjsFlex_"][::std::mem::size_of::<mjsFlex_>() - 280usize];
    ["Alignment of mjsFlex_"][::std::mem::align_of::<mjsFlex_>() - 8usize];
    ["Offset of field: mjsFlex_::element"][::std::mem::offset_of!(mjsFlex_, element) - 0usize];
    ["Offset of field: mjsFlex_::name"][::std::mem::offset_of!(mjsFlex_, name) - 8usize];
    ["Offset of field: mjsFlex_::contype"][::std::mem::offset_of!(mjsFlex_, contype) - 16usize];
    ["Offset of field: mjsFlex_::conaffinity"]
        [::std::mem::offset_of!(mjsFlex_, conaffinity) - 20usize];
    ["Offset of field: mjsFlex_::condim"][::std::mem::offset_of!(mjsFlex_, condim) - 24usize];
    ["Offset of field: mjsFlex_::priority"][::std::mem::offset_of!(mjsFlex_, priority) - 28usize];
    ["Offset of field: mjsFlex_::friction"][::std::mem::offset_of!(mjsFlex_, friction) - 32usize];
    ["Offset of field: mjsFlex_::solmix"][::std::mem::offset_of!(mjsFlex_, solmix) - 56usize];
    ["Offset of field: mjsFlex_::solref"][::std::mem::offset_of!(mjsFlex_, solref) - 64usize];
    ["Offset of field: mjsFlex_::solimp"][::std::mem::offset_of!(mjsFlex_, solimp) - 80usize];
    ["Offset of field: mjsFlex_::margin"][::std::mem::offset_of!(mjsFlex_, margin) - 120usize];
    ["Offset of field: mjsFlex_::gap"][::std::mem::offset_of!(mjsFlex_, gap) - 128usize];
    ["Offset of field: mjsFlex_::dim"][::std::mem::offset_of!(mjsFlex_, dim) - 136usize];
    ["Offset of field: mjsFlex_::radius"][::std::mem::offset_of!(mjsFlex_, radius) - 144usize];
    ["Offset of field: mjsFlex_::internal"][::std::mem::offset_of!(mjsFlex_, internal) - 152usize];
    ["Offset of field: mjsFlex_::flatskin"][::std::mem::offset_of!(mjsFlex_, flatskin) - 153usize];
    ["Offset of field: mjsFlex_::selfcollide"]
        [::std::mem::offset_of!(mjsFlex_, selfcollide) - 156usize];
    ["Offset of field: mjsFlex_::activelayers"]
        [::std::mem::offset_of!(mjsFlex_, activelayers) - 160usize];
    ["Offset of field: mjsFlex_::group"][::std::mem::offset_of!(mjsFlex_, group) - 164usize];
    ["Offset of field: mjsFlex_::edgestiffness"]
        [::std::mem::offset_of!(mjsFlex_, edgestiffness) - 168usize];
    ["Offset of field: mjsFlex_::edgedamping"]
        [::std::mem::offset_of!(mjsFlex_, edgedamping) - 176usize];
    ["Offset of field: mjsFlex_::rgba"][::std::mem::offset_of!(mjsFlex_, rgba) - 184usize];
    ["Offset of field: mjsFlex_::material"][::std::mem::offset_of!(mjsFlex_, material) - 200usize];
    ["Offset of field: mjsFlex_::young"][::std::mem::offset_of!(mjsFlex_, young) - 208usize];
    ["Offset of field: mjsFlex_::poisson"][::std::mem::offset_of!(mjsFlex_, poisson) - 216usize];
    ["Offset of field: mjsFlex_::damping"][::std::mem::offset_of!(mjsFlex_, damping) - 224usize];
    ["Offset of field: mjsFlex_::thickness"]
        [::std::mem::offset_of!(mjsFlex_, thickness) - 232usize];
    ["Offset of field: mjsFlex_::vertbody"][::std::mem::offset_of!(mjsFlex_, vertbody) - 240usize];
    ["Offset of field: mjsFlex_::vert"][::std::mem::offset_of!(mjsFlex_, vert) - 248usize];
    ["Offset of field: mjsFlex_::elem"][::std::mem::offset_of!(mjsFlex_, elem) - 256usize];
    ["Offset of field: mjsFlex_::texcoord"][::std::mem::offset_of!(mjsFlex_, texcoord) - 264usize];
    ["Offset of field: mjsFlex_::info"][::std::mem::offset_of!(mjsFlex_, info) - 272usize];
};
impl Default for mjsFlex_ {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mjsFlex = mjsFlex_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mjsMesh_ {
    pub element: *mut mjsElement,
    pub name: *mut mjString,
    pub content_type: *mut mjString,
    pub file: *mut mjString,
    pub refpos: [f64; 3usize],
    pub refquat: [f64; 4usize],
    pub scale: [f64; 3usize],
    pub inertia: mjtMeshInertia,
    pub smoothnormal: mjtByte,
    pub maxhullvert: ::std::os::raw::c_int,
    pub uservert: *mut mjFloatVec,
    pub usernormal: *mut mjFloatVec,
    pub usertexcoord: *mut mjFloatVec,
    pub userface: *mut mjIntVec,
    pub userfacetexcoord: *mut mjIntVec,
    pub plugin: mjsPlugin,
    pub info: *mut mjString,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjsMesh_"][::std::mem::size_of::<mjsMesh_>() - 216usize];
    ["Alignment of mjsMesh_"][::std::mem::align_of::<mjsMesh_>() - 8usize];
    ["Offset of field: mjsMesh_::element"][::std::mem::offset_of!(mjsMesh_, element) - 0usize];
    ["Offset of field: mjsMesh_::name"][::std::mem::offset_of!(mjsMesh_, name) - 8usize];
    ["Offset of field: mjsMesh_::content_type"]
        [::std::mem::offset_of!(mjsMesh_, content_type) - 16usize];
    ["Offset of field: mjsMesh_::file"][::std::mem::offset_of!(mjsMesh_, file) - 24usize];
    ["Offset of field: mjsMesh_::refpos"][::std::mem::offset_of!(mjsMesh_, refpos) - 32usize];
    ["Offset of field: mjsMesh_::refquat"][::std::mem::offset_of!(mjsMesh_, refquat) - 56usize];
    ["Offset of field: mjsMesh_::scale"][::std::mem::offset_of!(mjsMesh_, scale) - 88usize];
    ["Offset of field: mjsMesh_::inertia"][::std::mem::offset_of!(mjsMesh_, inertia) - 112usize];
    ["Offset of field: mjsMesh_::smoothnormal"]
        [::std::mem::offset_of!(mjsMesh_, smoothnormal) - 116usize];
    ["Offset of field: mjsMesh_::maxhullvert"]
        [::std::mem::offset_of!(mjsMesh_, maxhullvert) - 120usize];
    ["Offset of field: mjsMesh_::uservert"][::std::mem::offset_of!(mjsMesh_, uservert) - 128usize];
    ["Offset of field: mjsMesh_::usernormal"]
        [::std::mem::offset_of!(mjsMesh_, usernormal) - 136usize];
    ["Offset of field: mjsMesh_::usertexcoord"]
        [::std::mem::offset_of!(mjsMesh_, usertexcoord) - 144usize];
    ["Offset of field: mjsMesh_::userface"][::std::mem::offset_of!(mjsMesh_, userface) - 152usize];
    ["Offset of field: mjsMesh_::userfacetexcoord"]
        [::std::mem::offset_of!(mjsMesh_, userfacetexcoord) - 160usize];
    ["Offset of field: mjsMesh_::plugin"][::std::mem::offset_of!(mjsMesh_, plugin) - 168usize];
    ["Offset of field: mjsMesh_::info"][::std::mem::offset_of!(mjsMesh_, info) - 208usize];
};
impl Default for mjsMesh_ {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mjsMesh = mjsMesh_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mjsHField_ {
    pub element: *mut mjsElement,
    pub name: *mut mjString,
    pub content_type: *mut mjString,
    pub file: *mut mjString,
    pub size: [f64; 4usize],
    pub nrow: ::std::os::raw::c_int,
    pub ncol: ::std::os::raw::c_int,
    pub userdata: *mut mjFloatVec,
    pub info: *mut mjString,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjsHField_"][::std::mem::size_of::<mjsHField_>() - 88usize];
    ["Alignment of mjsHField_"][::std::mem::align_of::<mjsHField_>() - 8usize];
    ["Offset of field: mjsHField_::element"][::std::mem::offset_of!(mjsHField_, element) - 0usize];
    ["Offset of field: mjsHField_::name"][::std::mem::offset_of!(mjsHField_, name) - 8usize];
    ["Offset of field: mjsHField_::content_type"]
        [::std::mem::offset_of!(mjsHField_, content_type) - 16usize];
    ["Offset of field: mjsHField_::file"][::std::mem::offset_of!(mjsHField_, file) - 24usize];
    ["Offset of field: mjsHField_::size"][::std::mem::offset_of!(mjsHField_, size) - 32usize];
    ["Offset of field: mjsHField_::nrow"][::std::mem::offset_of!(mjsHField_, nrow) - 64usize];
    ["Offset of field: mjsHField_::ncol"][::std::mem::offset_of!(mjsHField_, ncol) - 68usize];
    ["Offset of field: mjsHField_::userdata"]
        [::std::mem::offset_of!(mjsHField_, userdata) - 72usize];
    ["Offset of field: mjsHField_::info"][::std::mem::offset_of!(mjsHField_, info) - 80usize];
};
impl Default for mjsHField_ {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mjsHField = mjsHField_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mjsSkin_ {
    pub element: *mut mjsElement,
    pub name: *mut mjString,
    pub file: *mut mjString,
    pub material: *mut mjString,
    pub rgba: [f32; 4usize],
    pub inflate: f32,
    pub group: ::std::os::raw::c_int,
    pub vert: *mut mjFloatVec,
    pub texcoord: *mut mjFloatVec,
    pub face: *mut mjIntVec,
    pub bodyname: *mut mjStringVec,
    pub bindpos: *mut mjFloatVec,
    pub bindquat: *mut mjFloatVec,
    pub vertid: *mut mjIntVecVec,
    pub vertweight: *mut mjFloatVecVec,
    pub info: *mut mjString,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjsSkin_"][::std::mem::size_of::<mjsSkin_>() - 128usize];
    ["Alignment of mjsSkin_"][::std::mem::align_of::<mjsSkin_>() - 8usize];
    ["Offset of field: mjsSkin_::element"][::std::mem::offset_of!(mjsSkin_, element) - 0usize];
    ["Offset of field: mjsSkin_::name"][::std::mem::offset_of!(mjsSkin_, name) - 8usize];
    ["Offset of field: mjsSkin_::file"][::std::mem::offset_of!(mjsSkin_, file) - 16usize];
    ["Offset of field: mjsSkin_::material"][::std::mem::offset_of!(mjsSkin_, material) - 24usize];
    ["Offset of field: mjsSkin_::rgba"][::std::mem::offset_of!(mjsSkin_, rgba) - 32usize];
    ["Offset of field: mjsSkin_::inflate"][::std::mem::offset_of!(mjsSkin_, inflate) - 48usize];
    ["Offset of field: mjsSkin_::group"][::std::mem::offset_of!(mjsSkin_, group) - 52usize];
    ["Offset of field: mjsSkin_::vert"][::std::mem::offset_of!(mjsSkin_, vert) - 56usize];
    ["Offset of field: mjsSkin_::texcoord"][::std::mem::offset_of!(mjsSkin_, texcoord) - 64usize];
    ["Offset of field: mjsSkin_::face"][::std::mem::offset_of!(mjsSkin_, face) - 72usize];
    ["Offset of field: mjsSkin_::bodyname"][::std::mem::offset_of!(mjsSkin_, bodyname) - 80usize];
    ["Offset of field: mjsSkin_::bindpos"][::std::mem::offset_of!(mjsSkin_, bindpos) - 88usize];
    ["Offset of field: mjsSkin_::bindquat"][::std::mem::offset_of!(mjsSkin_, bindquat) - 96usize];
    ["Offset of field: mjsSkin_::vertid"][::std::mem::offset_of!(mjsSkin_, vertid) - 104usize];
    ["Offset of field: mjsSkin_::vertweight"]
        [::std::mem::offset_of!(mjsSkin_, vertweight) - 112usize];
    ["Offset of field: mjsSkin_::info"][::std::mem::offset_of!(mjsSkin_, info) - 120usize];
};
impl Default for mjsSkin_ {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mjsSkin = mjsSkin_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mjsTexture_ {
    pub element: *mut mjsElement,
    pub name: *mut mjString,
    pub type_: mjtTexture,
    pub builtin: ::std::os::raw::c_int,
    pub mark: ::std::os::raw::c_int,
    pub rgb1: [f64; 3usize],
    pub rgb2: [f64; 3usize],
    pub markrgb: [f64; 3usize],
    pub random: f64,
    pub height: ::std::os::raw::c_int,
    pub width: ::std::os::raw::c_int,
    pub nchannel: ::std::os::raw::c_int,
    pub content_type: *mut mjString,
    pub file: *mut mjString,
    pub gridsize: [::std::os::raw::c_int; 2usize],
    pub gridlayout: [::std::os::raw::c_char; 13usize],
    pub cubefiles: *mut mjStringVec,
    pub data: *mut mjByteVec,
    pub hflip: mjtByte,
    pub vflip: mjtByte,
    pub info: *mut mjString,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjsTexture_"][::std::mem::size_of::<mjsTexture_>() - 200usize];
    ["Alignment of mjsTexture_"][::std::mem::align_of::<mjsTexture_>() - 8usize];
    ["Offset of field: mjsTexture_::element"]
        [::std::mem::offset_of!(mjsTexture_, element) - 0usize];
    ["Offset of field: mjsTexture_::name"][::std::mem::offset_of!(mjsTexture_, name) - 8usize];
    ["Offset of field: mjsTexture_::type_"][::std::mem::offset_of!(mjsTexture_, type_) - 16usize];
    ["Offset of field: mjsTexture_::builtin"]
        [::std::mem::offset_of!(mjsTexture_, builtin) - 20usize];
    ["Offset of field: mjsTexture_::mark"][::std::mem::offset_of!(mjsTexture_, mark) - 24usize];
    ["Offset of field: mjsTexture_::rgb1"][::std::mem::offset_of!(mjsTexture_, rgb1) - 32usize];
    ["Offset of field: mjsTexture_::rgb2"][::std::mem::offset_of!(mjsTexture_, rgb2) - 56usize];
    ["Offset of field: mjsTexture_::markrgb"]
        [::std::mem::offset_of!(mjsTexture_, markrgb) - 80usize];
    ["Offset of field: mjsTexture_::random"]
        [::std::mem::offset_of!(mjsTexture_, random) - 104usize];
    ["Offset of field: mjsTexture_::height"]
        [::std::mem::offset_of!(mjsTexture_, height) - 112usize];
    ["Offset of field: mjsTexture_::width"][::std::mem::offset_of!(mjsTexture_, width) - 116usize];
    ["Offset of field: mjsTexture_::nchannel"]
        [::std::mem::offset_of!(mjsTexture_, nchannel) - 120usize];
    ["Offset of field: mjsTexture_::content_type"]
        [::std::mem::offset_of!(mjsTexture_, content_type) - 128usize];
    ["Offset of field: mjsTexture_::file"][::std::mem::offset_of!(mjsTexture_, file) - 136usize];
    ["Offset of field: mjsTexture_::gridsize"]
        [::std::mem::offset_of!(mjsTexture_, gridsize) - 144usize];
    ["Offset of field: mjsTexture_::gridlayout"]
        [::std::mem::offset_of!(mjsTexture_, gridlayout) - 152usize];
    ["Offset of field: mjsTexture_::cubefiles"]
        [::std::mem::offset_of!(mjsTexture_, cubefiles) - 168usize];
    ["Offset of field: mjsTexture_::data"][::std::mem::offset_of!(mjsTexture_, data) - 176usize];
    ["Offset of field: mjsTexture_::hflip"][::std::mem::offset_of!(mjsTexture_, hflip) - 184usize];
    ["Offset of field: mjsTexture_::vflip"][::std::mem::offset_of!(mjsTexture_, vflip) - 185usize];
    ["Offset of field: mjsTexture_::info"][::std::mem::offset_of!(mjsTexture_, info) - 192usize];
};
impl Default for mjsTexture_ {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mjsTexture = mjsTexture_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mjsMaterial_ {
    pub element: *mut mjsElement,
    pub name: *mut mjString,
    pub textures: *mut mjStringVec,
    pub texuniform: mjtByte,
    pub texrepeat: [f32; 2usize],
    pub emission: f32,
    pub specular: f32,
    pub shininess: f32,
    pub reflectance: f32,
    pub metallic: f32,
    pub roughness: f32,
    pub rgba: [f32; 4usize],
    pub info: *mut mjString,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjsMaterial_"][::std::mem::size_of::<mjsMaterial_>() - 88usize];
    ["Alignment of mjsMaterial_"][::std::mem::align_of::<mjsMaterial_>() - 8usize];
    ["Offset of field: mjsMaterial_::element"]
        [::std::mem::offset_of!(mjsMaterial_, element) - 0usize];
    ["Offset of field: mjsMaterial_::name"][::std::mem::offset_of!(mjsMaterial_, name) - 8usize];
    ["Offset of field: mjsMaterial_::textures"]
        [::std::mem::offset_of!(mjsMaterial_, textures) - 16usize];
    ["Offset of field: mjsMaterial_::texuniform"]
        [::std::mem::offset_of!(mjsMaterial_, texuniform) - 24usize];
    ["Offset of field: mjsMaterial_::texrepeat"]
        [::std::mem::offset_of!(mjsMaterial_, texrepeat) - 28usize];
    ["Offset of field: mjsMaterial_::emission"]
        [::std::mem::offset_of!(mjsMaterial_, emission) - 36usize];
    ["Offset of field: mjsMaterial_::specular"]
        [::std::mem::offset_of!(mjsMaterial_, specular) - 40usize];
    ["Offset of field: mjsMaterial_::shininess"]
        [::std::mem::offset_of!(mjsMaterial_, shininess) - 44usize];
    ["Offset of field: mjsMaterial_::reflectance"]
        [::std::mem::offset_of!(mjsMaterial_, reflectance) - 48usize];
    ["Offset of field: mjsMaterial_::metallic"]
        [::std::mem::offset_of!(mjsMaterial_, metallic) - 52usize];
    ["Offset of field: mjsMaterial_::roughness"]
        [::std::mem::offset_of!(mjsMaterial_, roughness) - 56usize];
    ["Offset of field: mjsMaterial_::rgba"][::std::mem::offset_of!(mjsMaterial_, rgba) - 60usize];
    ["Offset of field: mjsMaterial_::info"][::std::mem::offset_of!(mjsMaterial_, info) - 80usize];
};
impl Default for mjsMaterial_ {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mjsMaterial = mjsMaterial_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mjsPair_ {
    pub element: *mut mjsElement,
    pub name: *mut mjString,
    pub geomname1: *mut mjString,
    pub geomname2: *mut mjString,
    pub condim: ::std::os::raw::c_int,
    pub solref: [mjtNum; 2usize],
    pub solreffriction: [mjtNum; 2usize],
    pub solimp: [mjtNum; 5usize],
    pub margin: f64,
    pub gap: f64,
    pub friction: [f64; 5usize],
    pub info: *mut mjString,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjsPair_"][::std::mem::size_of::<mjsPair_>() - 176usize];
    ["Alignment of mjsPair_"][::std::mem::align_of::<mjsPair_>() - 8usize];
    ["Offset of field: mjsPair_::element"][::std::mem::offset_of!(mjsPair_, element) - 0usize];
    ["Offset of field: mjsPair_::name"][::std::mem::offset_of!(mjsPair_, name) - 8usize];
    ["Offset of field: mjsPair_::geomname1"][::std::mem::offset_of!(mjsPair_, geomname1) - 16usize];
    ["Offset of field: mjsPair_::geomname2"][::std::mem::offset_of!(mjsPair_, geomname2) - 24usize];
    ["Offset of field: mjsPair_::condim"][::std::mem::offset_of!(mjsPair_, condim) - 32usize];
    ["Offset of field: mjsPair_::solref"][::std::mem::offset_of!(mjsPair_, solref) - 40usize];
    ["Offset of field: mjsPair_::solreffriction"]
        [::std::mem::offset_of!(mjsPair_, solreffriction) - 56usize];
    ["Offset of field: mjsPair_::solimp"][::std::mem::offset_of!(mjsPair_, solimp) - 72usize];
    ["Offset of field: mjsPair_::margin"][::std::mem::offset_of!(mjsPair_, margin) - 112usize];
    ["Offset of field: mjsPair_::gap"][::std::mem::offset_of!(mjsPair_, gap) - 120usize];
    ["Offset of field: mjsPair_::friction"][::std::mem::offset_of!(mjsPair_, friction) - 128usize];
    ["Offset of field: mjsPair_::info"][::std::mem::offset_of!(mjsPair_, info) - 168usize];
};
impl Default for mjsPair_ {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mjsPair = mjsPair_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mjsExclude_ {
    pub element: *mut mjsElement,
    pub name: *mut mjString,
    pub bodyname1: *mut mjString,
    pub bodyname2: *mut mjString,
    pub info: *mut mjString,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjsExclude_"][::std::mem::size_of::<mjsExclude_>() - 40usize];
    ["Alignment of mjsExclude_"][::std::mem::align_of::<mjsExclude_>() - 8usize];
    ["Offset of field: mjsExclude_::element"]
        [::std::mem::offset_of!(mjsExclude_, element) - 0usize];
    ["Offset of field: mjsExclude_::name"][::std::mem::offset_of!(mjsExclude_, name) - 8usize];
    ["Offset of field: mjsExclude_::bodyname1"]
        [::std::mem::offset_of!(mjsExclude_, bodyname1) - 16usize];
    ["Offset of field: mjsExclude_::bodyname2"]
        [::std::mem::offset_of!(mjsExclude_, bodyname2) - 24usize];
    ["Offset of field: mjsExclude_::info"][::std::mem::offset_of!(mjsExclude_, info) - 32usize];
};
impl Default for mjsExclude_ {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mjsExclude = mjsExclude_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mjsEquality_ {
    pub element: *mut mjsElement,
    pub name: *mut mjString,
    pub type_: mjtEq,
    pub data: [f64; 11usize],
    pub active: mjtByte,
    pub name1: *mut mjString,
    pub name2: *mut mjString,
    pub objtype: mjtObj,
    pub solref: [mjtNum; 2usize],
    pub solimp: [mjtNum; 5usize],
    pub info: *mut mjString,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjsEquality_"][::std::mem::size_of::<mjsEquality_>() - 208usize];
    ["Alignment of mjsEquality_"][::std::mem::align_of::<mjsEquality_>() - 8usize];
    ["Offset of field: mjsEquality_::element"]
        [::std::mem::offset_of!(mjsEquality_, element) - 0usize];
    ["Offset of field: mjsEquality_::name"][::std::mem::offset_of!(mjsEquality_, name) - 8usize];
    ["Offset of field: mjsEquality_::type_"][::std::mem::offset_of!(mjsEquality_, type_) - 16usize];
    ["Offset of field: mjsEquality_::data"][::std::mem::offset_of!(mjsEquality_, data) - 24usize];
    ["Offset of field: mjsEquality_::active"]
        [::std::mem::offset_of!(mjsEquality_, active) - 112usize];
    ["Offset of field: mjsEquality_::name1"]
        [::std::mem::offset_of!(mjsEquality_, name1) - 120usize];
    ["Offset of field: mjsEquality_::name2"]
        [::std::mem::offset_of!(mjsEquality_, name2) - 128usize];
    ["Offset of field: mjsEquality_::objtype"]
        [::std::mem::offset_of!(mjsEquality_, objtype) - 136usize];
    ["Offset of field: mjsEquality_::solref"]
        [::std::mem::offset_of!(mjsEquality_, solref) - 144usize];
    ["Offset of field: mjsEquality_::solimp"]
        [::std::mem::offset_of!(mjsEquality_, solimp) - 160usize];
    ["Offset of field: mjsEquality_::info"][::std::mem::offset_of!(mjsEquality_, info) - 200usize];
};
impl Default for mjsEquality_ {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mjsEquality = mjsEquality_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mjsTendon_ {
    pub element: *mut mjsElement,
    pub name: *mut mjString,
    pub stiffness: f64,
    pub springlength: [f64; 2usize],
    pub damping: f64,
    pub frictionloss: f64,
    pub solref_friction: [mjtNum; 2usize],
    pub solimp_friction: [mjtNum; 5usize],
    pub limited: ::std::os::raw::c_int,
    pub range: [f64; 2usize],
    pub margin: f64,
    pub solref_limit: [mjtNum; 2usize],
    pub solimp_limit: [mjtNum; 5usize],
    pub material: *mut mjString,
    pub width: f64,
    pub rgba: [f32; 4usize],
    pub group: ::std::os::raw::c_int,
    pub userdata: *mut mjDoubleVec,
    pub info: *mut mjString,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjsTendon_"][::std::mem::size_of::<mjsTendon_>() - 256usize];
    ["Alignment of mjsTendon_"][::std::mem::align_of::<mjsTendon_>() - 8usize];
    ["Offset of field: mjsTendon_::element"][::std::mem::offset_of!(mjsTendon_, element) - 0usize];
    ["Offset of field: mjsTendon_::name"][::std::mem::offset_of!(mjsTendon_, name) - 8usize];
    ["Offset of field: mjsTendon_::stiffness"]
        [::std::mem::offset_of!(mjsTendon_, stiffness) - 16usize];
    ["Offset of field: mjsTendon_::springlength"]
        [::std::mem::offset_of!(mjsTendon_, springlength) - 24usize];
    ["Offset of field: mjsTendon_::damping"][::std::mem::offset_of!(mjsTendon_, damping) - 40usize];
    ["Offset of field: mjsTendon_::frictionloss"]
        [::std::mem::offset_of!(mjsTendon_, frictionloss) - 48usize];
    ["Offset of field: mjsTendon_::solref_friction"]
        [::std::mem::offset_of!(mjsTendon_, solref_friction) - 56usize];
    ["Offset of field: mjsTendon_::solimp_friction"]
        [::std::mem::offset_of!(mjsTendon_, solimp_friction) - 72usize];
    ["Offset of field: mjsTendon_::limited"]
        [::std::mem::offset_of!(mjsTendon_, limited) - 112usize];
    ["Offset of field: mjsTendon_::range"][::std::mem::offset_of!(mjsTendon_, range) - 120usize];
    ["Offset of field: mjsTendon_::margin"][::std::mem::offset_of!(mjsTendon_, margin) - 136usize];
    ["Offset of field: mjsTendon_::solref_limit"]
        [::std::mem::offset_of!(mjsTendon_, solref_limit) - 144usize];
    ["Offset of field: mjsTendon_::solimp_limit"]
        [::std::mem::offset_of!(mjsTendon_, solimp_limit) - 160usize];
    ["Offset of field: mjsTendon_::material"]
        [::std::mem::offset_of!(mjsTendon_, material) - 200usize];
    ["Offset of field: mjsTendon_::width"][::std::mem::offset_of!(mjsTendon_, width) - 208usize];
    ["Offset of field: mjsTendon_::rgba"][::std::mem::offset_of!(mjsTendon_, rgba) - 216usize];
    ["Offset of field: mjsTendon_::group"][::std::mem::offset_of!(mjsTendon_, group) - 232usize];
    ["Offset of field: mjsTendon_::userdata"]
        [::std::mem::offset_of!(mjsTendon_, userdata) - 240usize];
    ["Offset of field: mjsTendon_::info"][::std::mem::offset_of!(mjsTendon_, info) - 248usize];
};
impl Default for mjsTendon_ {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mjsTendon = mjsTendon_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mjsWrap_ {
    pub element: *mut mjsElement,
    pub info: *mut mjString,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjsWrap_"][::std::mem::size_of::<mjsWrap_>() - 16usize];
    ["Alignment of mjsWrap_"][::std::mem::align_of::<mjsWrap_>() - 8usize];
    ["Offset of field: mjsWrap_::element"][::std::mem::offset_of!(mjsWrap_, element) - 0usize];
    ["Offset of field: mjsWrap_::info"][::std::mem::offset_of!(mjsWrap_, info) - 8usize];
};
impl Default for mjsWrap_ {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mjsWrap = mjsWrap_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mjsActuator_ {
    pub element: *mut mjsElement,
    pub name: *mut mjString,
    pub gaintype: mjtGain,
    pub gainprm: [f64; 10usize],
    pub biastype: mjtBias,
    pub biasprm: [f64; 10usize],
    pub dyntype: mjtDyn,
    pub dynprm: [f64; 10usize],
    pub actdim: ::std::os::raw::c_int,
    pub actearly: mjtByte,
    pub trntype: mjtTrn,
    pub gear: [f64; 6usize],
    pub target: *mut mjString,
    pub refsite: *mut mjString,
    pub slidersite: *mut mjString,
    pub cranklength: f64,
    pub lengthrange: [f64; 2usize],
    pub inheritrange: f64,
    pub ctrllimited: ::std::os::raw::c_int,
    pub ctrlrange: [f64; 2usize],
    pub forcelimited: ::std::os::raw::c_int,
    pub forcerange: [f64; 2usize],
    pub actlimited: ::std::os::raw::c_int,
    pub actrange: [f64; 2usize],
    pub group: ::std::os::raw::c_int,
    pub userdata: *mut mjDoubleVec,
    pub plugin: mjsPlugin,
    pub info: *mut mjString,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjsActuator_"][::std::mem::size_of::<mjsActuator_>() - 536usize];
    ["Alignment of mjsActuator_"][::std::mem::align_of::<mjsActuator_>() - 8usize];
    ["Offset of field: mjsActuator_::element"]
        [::std::mem::offset_of!(mjsActuator_, element) - 0usize];
    ["Offset of field: mjsActuator_::name"][::std::mem::offset_of!(mjsActuator_, name) - 8usize];
    ["Offset of field: mjsActuator_::gaintype"]
        [::std::mem::offset_of!(mjsActuator_, gaintype) - 16usize];
    ["Offset of field: mjsActuator_::gainprm"]
        [::std::mem::offset_of!(mjsActuator_, gainprm) - 24usize];
    ["Offset of field: mjsActuator_::biastype"]
        [::std::mem::offset_of!(mjsActuator_, biastype) - 104usize];
    ["Offset of field: mjsActuator_::biasprm"]
        [::std::mem::offset_of!(mjsActuator_, biasprm) - 112usize];
    ["Offset of field: mjsActuator_::dyntype"]
        [::std::mem::offset_of!(mjsActuator_, dyntype) - 192usize];
    ["Offset of field: mjsActuator_::dynprm"]
        [::std::mem::offset_of!(mjsActuator_, dynprm) - 200usize];
    ["Offset of field: mjsActuator_::actdim"]
        [::std::mem::offset_of!(mjsActuator_, actdim) - 280usize];
    ["Offset of field: mjsActuator_::actearly"]
        [::std::mem::offset_of!(mjsActuator_, actearly) - 284usize];
    ["Offset of field: mjsActuator_::trntype"]
        [::std::mem::offset_of!(mjsActuator_, trntype) - 288usize];
    ["Offset of field: mjsActuator_::gear"][::std::mem::offset_of!(mjsActuator_, gear) - 296usize];
    ["Offset of field: mjsActuator_::target"]
        [::std::mem::offset_of!(mjsActuator_, target) - 344usize];
    ["Offset of field: mjsActuator_::refsite"]
        [::std::mem::offset_of!(mjsActuator_, refsite) - 352usize];
    ["Offset of field: mjsActuator_::slidersite"]
        [::std::mem::offset_of!(mjsActuator_, slidersite) - 360usize];
    ["Offset of field: mjsActuator_::cranklength"]
        [::std::mem::offset_of!(mjsActuator_, cranklength) - 368usize];
    ["Offset of field: mjsActuator_::lengthrange"]
        [::std::mem::offset_of!(mjsActuator_, lengthrange) - 376usize];
    ["Offset of field: mjsActuator_::inheritrange"]
        [::std::mem::offset_of!(mjsActuator_, inheritrange) - 392usize];
    ["Offset of field: mjsActuator_::ctrllimited"]
        [::std::mem::offset_of!(mjsActuator_, ctrllimited) - 400usize];
    ["Offset of field: mjsActuator_::ctrlrange"]
        [::std::mem::offset_of!(mjsActuator_, ctrlrange) - 408usize];
    ["Offset of field: mjsActuator_::forcelimited"]
        [::std::mem::offset_of!(mjsActuator_, forcelimited) - 424usize];
    ["Offset of field: mjsActuator_::forcerange"]
        [::std::mem::offset_of!(mjsActuator_, forcerange) - 432usize];
    ["Offset of field: mjsActuator_::actlimited"]
        [::std::mem::offset_of!(mjsActuator_, actlimited) - 448usize];
    ["Offset of field: mjsActuator_::actrange"]
        [::std::mem::offset_of!(mjsActuator_, actrange) - 456usize];
    ["Offset of field: mjsActuator_::group"]
        [::std::mem::offset_of!(mjsActuator_, group) - 472usize];
    ["Offset of field: mjsActuator_::userdata"]
        [::std::mem::offset_of!(mjsActuator_, userdata) - 480usize];
    ["Offset of field: mjsActuator_::plugin"]
        [::std::mem::offset_of!(mjsActuator_, plugin) - 488usize];
    ["Offset of field: mjsActuator_::info"][::std::mem::offset_of!(mjsActuator_, info) - 528usize];
};
impl Default for mjsActuator_ {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mjsActuator = mjsActuator_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mjsSensor_ {
    pub element: *mut mjsElement,
    pub name: *mut mjString,
    pub type_: mjtSensor,
    pub objtype: mjtObj,
    pub objname: *mut mjString,
    pub reftype: mjtObj,
    pub refname: *mut mjString,
    pub datatype: mjtDataType,
    pub needstage: mjtStage,
    pub dim: ::std::os::raw::c_int,
    pub cutoff: f64,
    pub noise: f64,
    pub userdata: *mut mjDoubleVec,
    pub plugin: mjsPlugin,
    pub info: *mut mjString,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjsSensor_"][::std::mem::size_of::<mjsSensor_>() - 136usize];
    ["Alignment of mjsSensor_"][::std::mem::align_of::<mjsSensor_>() - 8usize];
    ["Offset of field: mjsSensor_::element"][::std::mem::offset_of!(mjsSensor_, element) - 0usize];
    ["Offset of field: mjsSensor_::name"][::std::mem::offset_of!(mjsSensor_, name) - 8usize];
    ["Offset of field: mjsSensor_::type_"][::std::mem::offset_of!(mjsSensor_, type_) - 16usize];
    ["Offset of field: mjsSensor_::objtype"][::std::mem::offset_of!(mjsSensor_, objtype) - 20usize];
    ["Offset of field: mjsSensor_::objname"][::std::mem::offset_of!(mjsSensor_, objname) - 24usize];
    ["Offset of field: mjsSensor_::reftype"][::std::mem::offset_of!(mjsSensor_, reftype) - 32usize];
    ["Offset of field: mjsSensor_::refname"][::std::mem::offset_of!(mjsSensor_, refname) - 40usize];
    ["Offset of field: mjsSensor_::datatype"]
        [::std::mem::offset_of!(mjsSensor_, datatype) - 48usize];
    ["Offset of field: mjsSensor_::needstage"]
        [::std::mem::offset_of!(mjsSensor_, needstage) - 52usize];
    ["Offset of field: mjsSensor_::dim"][::std::mem::offset_of!(mjsSensor_, dim) - 56usize];
    ["Offset of field: mjsSensor_::cutoff"][::std::mem::offset_of!(mjsSensor_, cutoff) - 64usize];
    ["Offset of field: mjsSensor_::noise"][::std::mem::offset_of!(mjsSensor_, noise) - 72usize];
    ["Offset of field: mjsSensor_::userdata"]
        [::std::mem::offset_of!(mjsSensor_, userdata) - 80usize];
    ["Offset of field: mjsSensor_::plugin"][::std::mem::offset_of!(mjsSensor_, plugin) - 88usize];
    ["Offset of field: mjsSensor_::info"][::std::mem::offset_of!(mjsSensor_, info) - 128usize];
};
impl Default for mjsSensor_ {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mjsSensor = mjsSensor_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mjsNumeric_ {
    pub element: *mut mjsElement,
    pub name: *mut mjString,
    pub data: *mut mjDoubleVec,
    pub size: ::std::os::raw::c_int,
    pub info: *mut mjString,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjsNumeric_"][::std::mem::size_of::<mjsNumeric_>() - 40usize];
    ["Alignment of mjsNumeric_"][::std::mem::align_of::<mjsNumeric_>() - 8usize];
    ["Offset of field: mjsNumeric_::element"]
        [::std::mem::offset_of!(mjsNumeric_, element) - 0usize];
    ["Offset of field: mjsNumeric_::name"][::std::mem::offset_of!(mjsNumeric_, name) - 8usize];
    ["Offset of field: mjsNumeric_::data"][::std::mem::offset_of!(mjsNumeric_, data) - 16usize];
    ["Offset of field: mjsNumeric_::size"][::std::mem::offset_of!(mjsNumeric_, size) - 24usize];
    ["Offset of field: mjsNumeric_::info"][::std::mem::offset_of!(mjsNumeric_, info) - 32usize];
};
impl Default for mjsNumeric_ {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mjsNumeric = mjsNumeric_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mjsText_ {
    pub element: *mut mjsElement,
    pub name: *mut mjString,
    pub data: *mut mjString,
    pub info: *mut mjString,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjsText_"][::std::mem::size_of::<mjsText_>() - 32usize];
    ["Alignment of mjsText_"][::std::mem::align_of::<mjsText_>() - 8usize];
    ["Offset of field: mjsText_::element"][::std::mem::offset_of!(mjsText_, element) - 0usize];
    ["Offset of field: mjsText_::name"][::std::mem::offset_of!(mjsText_, name) - 8usize];
    ["Offset of field: mjsText_::data"][::std::mem::offset_of!(mjsText_, data) - 16usize];
    ["Offset of field: mjsText_::info"][::std::mem::offset_of!(mjsText_, info) - 24usize];
};
impl Default for mjsText_ {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mjsText = mjsText_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mjsTuple_ {
    pub element: *mut mjsElement,
    pub name: *mut mjString,
    pub objtype: *mut mjIntVec,
    pub objname: *mut mjStringVec,
    pub objprm: *mut mjDoubleVec,
    pub info: *mut mjString,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjsTuple_"][::std::mem::size_of::<mjsTuple_>() - 48usize];
    ["Alignment of mjsTuple_"][::std::mem::align_of::<mjsTuple_>() - 8usize];
    ["Offset of field: mjsTuple_::element"][::std::mem::offset_of!(mjsTuple_, element) - 0usize];
    ["Offset of field: mjsTuple_::name"][::std::mem::offset_of!(mjsTuple_, name) - 8usize];
    ["Offset of field: mjsTuple_::objtype"][::std::mem::offset_of!(mjsTuple_, objtype) - 16usize];
    ["Offset of field: mjsTuple_::objname"][::std::mem::offset_of!(mjsTuple_, objname) - 24usize];
    ["Offset of field: mjsTuple_::objprm"][::std::mem::offset_of!(mjsTuple_, objprm) - 32usize];
    ["Offset of field: mjsTuple_::info"][::std::mem::offset_of!(mjsTuple_, info) - 40usize];
};
impl Default for mjsTuple_ {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mjsTuple = mjsTuple_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mjsKey_ {
    pub element: *mut mjsElement,
    pub name: *mut mjString,
    pub time: f64,
    pub qpos: *mut mjDoubleVec,
    pub qvel: *mut mjDoubleVec,
    pub act: *mut mjDoubleVec,
    pub mpos: *mut mjDoubleVec,
    pub mquat: *mut mjDoubleVec,
    pub ctrl: *mut mjDoubleVec,
    pub info: *mut mjString,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjsKey_"][::std::mem::size_of::<mjsKey_>() - 80usize];
    ["Alignment of mjsKey_"][::std::mem::align_of::<mjsKey_>() - 8usize];
    ["Offset of field: mjsKey_::element"][::std::mem::offset_of!(mjsKey_, element) - 0usize];
    ["Offset of field: mjsKey_::name"][::std::mem::offset_of!(mjsKey_, name) - 8usize];
    ["Offset of field: mjsKey_::time"][::std::mem::offset_of!(mjsKey_, time) - 16usize];
    ["Offset of field: mjsKey_::qpos"][::std::mem::offset_of!(mjsKey_, qpos) - 24usize];
    ["Offset of field: mjsKey_::qvel"][::std::mem::offset_of!(mjsKey_, qvel) - 32usize];
    ["Offset of field: mjsKey_::act"][::std::mem::offset_of!(mjsKey_, act) - 40usize];
    ["Offset of field: mjsKey_::mpos"][::std::mem::offset_of!(mjsKey_, mpos) - 48usize];
    ["Offset of field: mjsKey_::mquat"][::std::mem::offset_of!(mjsKey_, mquat) - 56usize];
    ["Offset of field: mjsKey_::ctrl"][::std::mem::offset_of!(mjsKey_, ctrl) - 64usize];
    ["Offset of field: mjsKey_::info"][::std::mem::offset_of!(mjsKey_, info) - 72usize];
};
impl Default for mjsKey_ {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mjsKey = mjsKey_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mjsDefault_ {
    pub element: *mut mjsElement,
    pub name: *mut mjString,
    pub joint: *mut mjsJoint,
    pub geom: *mut mjsGeom,
    pub site: *mut mjsSite,
    pub camera: *mut mjsCamera,
    pub light: *mut mjsLight,
    pub flex: *mut mjsFlex,
    pub mesh: *mut mjsMesh,
    pub material: *mut mjsMaterial,
    pub pair: *mut mjsPair,
    pub equality: *mut mjsEquality,
    pub tendon: *mut mjsTendon,
    pub actuator: *mut mjsActuator,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjsDefault_"][::std::mem::size_of::<mjsDefault_>() - 112usize];
    ["Alignment of mjsDefault_"][::std::mem::align_of::<mjsDefault_>() - 8usize];
    ["Offset of field: mjsDefault_::element"]
        [::std::mem::offset_of!(mjsDefault_, element) - 0usize];
    ["Offset of field: mjsDefault_::name"][::std::mem::offset_of!(mjsDefault_, name) - 8usize];
    ["Offset of field: mjsDefault_::joint"][::std::mem::offset_of!(mjsDefault_, joint) - 16usize];
    ["Offset of field: mjsDefault_::geom"][::std::mem::offset_of!(mjsDefault_, geom) - 24usize];
    ["Offset of field: mjsDefault_::site"][::std::mem::offset_of!(mjsDefault_, site) - 32usize];
    ["Offset of field: mjsDefault_::camera"][::std::mem::offset_of!(mjsDefault_, camera) - 40usize];
    ["Offset of field: mjsDefault_::light"][::std::mem::offset_of!(mjsDefault_, light) - 48usize];
    ["Offset of field: mjsDefault_::flex"][::std::mem::offset_of!(mjsDefault_, flex) - 56usize];
    ["Offset of field: mjsDefault_::mesh"][::std::mem::offset_of!(mjsDefault_, mesh) - 64usize];
    ["Offset of field: mjsDefault_::material"]
        [::std::mem::offset_of!(mjsDefault_, material) - 72usize];
    ["Offset of field: mjsDefault_::pair"][::std::mem::offset_of!(mjsDefault_, pair) - 80usize];
    ["Offset of field: mjsDefault_::equality"]
        [::std::mem::offset_of!(mjsDefault_, equality) - 88usize];
    ["Offset of field: mjsDefault_::tendon"][::std::mem::offset_of!(mjsDefault_, tendon) - 96usize];
    ["Offset of field: mjsDefault_::actuator"]
        [::std::mem::offset_of!(mjsDefault_, actuator) - 104usize];
};
impl Default for mjsDefault_ {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mjsDefault = mjsDefault_;
pub const mjtButton__mjBUTTON_NONE: mjtButton_ = 0;
pub const mjtButton__mjBUTTON_LEFT: mjtButton_ = 1;
pub const mjtButton__mjBUTTON_RIGHT: mjtButton_ = 2;
pub const mjtButton__mjBUTTON_MIDDLE: mjtButton_ = 3;
pub type mjtButton_ = ::std::os::raw::c_uint;
pub use self::mjtButton_ as mjtButton;
pub const mjtEvent__mjEVENT_NONE: mjtEvent_ = 0;
pub const mjtEvent__mjEVENT_MOVE: mjtEvent_ = 1;
pub const mjtEvent__mjEVENT_PRESS: mjtEvent_ = 2;
pub const mjtEvent__mjEVENT_RELEASE: mjtEvent_ = 3;
pub const mjtEvent__mjEVENT_SCROLL: mjtEvent_ = 4;
pub const mjtEvent__mjEVENT_KEY: mjtEvent_ = 5;
pub const mjtEvent__mjEVENT_RESIZE: mjtEvent_ = 6;
pub const mjtEvent__mjEVENT_REDRAW: mjtEvent_ = 7;
pub const mjtEvent__mjEVENT_FILESDROP: mjtEvent_ = 8;
pub type mjtEvent_ = ::std::os::raw::c_uint;
pub use self::mjtEvent_ as mjtEvent;
pub const mjtItem__mjITEM_END: mjtItem_ = -2;
pub const mjtItem__mjITEM_SECTION: mjtItem_ = -1;
pub const mjtItem__mjITEM_SEPARATOR: mjtItem_ = 0;
pub const mjtItem__mjITEM_STATIC: mjtItem_ = 1;
pub const mjtItem__mjITEM_BUTTON: mjtItem_ = 2;
pub const mjtItem__mjITEM_CHECKINT: mjtItem_ = 3;
pub const mjtItem__mjITEM_CHECKBYTE: mjtItem_ = 4;
pub const mjtItem__mjITEM_RADIO: mjtItem_ = 5;
pub const mjtItem__mjITEM_RADIOLINE: mjtItem_ = 6;
pub const mjtItem__mjITEM_SELECT: mjtItem_ = 7;
pub const mjtItem__mjITEM_SLIDERINT: mjtItem_ = 8;
pub const mjtItem__mjITEM_SLIDERNUM: mjtItem_ = 9;
pub const mjtItem__mjITEM_EDITINT: mjtItem_ = 10;
pub const mjtItem__mjITEM_EDITNUM: mjtItem_ = 11;
pub const mjtItem__mjITEM_EDITFLOAT: mjtItem_ = 12;
pub const mjtItem__mjITEM_EDITTXT: mjtItem_ = 13;
pub const mjtItem__mjNITEM: mjtItem_ = 14;
pub type mjtItem_ = ::std::os::raw::c_int;
pub use self::mjtItem_ as mjtItem;
pub const mjtSection__mjSECT_CLOSED: mjtSection_ = 0;
pub const mjtSection__mjSECT_OPEN: mjtSection_ = 1;
pub const mjtSection__mjSECT_FIXED: mjtSection_ = 2;
pub type mjtSection_ = ::std::os::raw::c_uint;
pub use self::mjtSection_ as mjtSection;
pub type mjfItemEnable = ::std::option::Option<
    unsafe extern "C" fn(
        category: ::std::os::raw::c_int,
        data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mjuiState_ {
    pub nrect: ::std::os::raw::c_int,
    pub rect: [mjrRect; 25usize],
    pub userdata: *mut ::std::os::raw::c_void,
    pub type_: ::std::os::raw::c_int,
    pub left: ::std::os::raw::c_int,
    pub right: ::std::os::raw::c_int,
    pub middle: ::std::os::raw::c_int,
    pub doubleclick: ::std::os::raw::c_int,
    pub button: ::std::os::raw::c_int,
    pub buttontime: f64,
    pub x: f64,
    pub y: f64,
    pub dx: f64,
    pub dy: f64,
    pub sx: f64,
    pub sy: f64,
    pub control: ::std::os::raw::c_int,
    pub shift: ::std::os::raw::c_int,
    pub alt: ::std::os::raw::c_int,
    pub key: ::std::os::raw::c_int,
    pub keytime: f64,
    pub mouserect: ::std::os::raw::c_int,
    pub dragrect: ::std::os::raw::c_int,
    pub dragbutton: ::std::os::raw::c_int,
    pub dropcount: ::std::os::raw::c_int,
    pub droppaths: *mut *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjuiState_"][::std::mem::size_of::<mjuiState_>() - 544usize];
    ["Alignment of mjuiState_"][::std::mem::align_of::<mjuiState_>() - 8usize];
    ["Offset of field: mjuiState_::nrect"][::std::mem::offset_of!(mjuiState_, nrect) - 0usize];
    ["Offset of field: mjuiState_::rect"][::std::mem::offset_of!(mjuiState_, rect) - 4usize];
    ["Offset of field: mjuiState_::userdata"]
        [::std::mem::offset_of!(mjuiState_, userdata) - 408usize];
    ["Offset of field: mjuiState_::type_"][::std::mem::offset_of!(mjuiState_, type_) - 416usize];
    ["Offset of field: mjuiState_::left"][::std::mem::offset_of!(mjuiState_, left) - 420usize];
    ["Offset of field: mjuiState_::right"][::std::mem::offset_of!(mjuiState_, right) - 424usize];
    ["Offset of field: mjuiState_::middle"][::std::mem::offset_of!(mjuiState_, middle) - 428usize];
    ["Offset of field: mjuiState_::doubleclick"]
        [::std::mem::offset_of!(mjuiState_, doubleclick) - 432usize];
    ["Offset of field: mjuiState_::button"][::std::mem::offset_of!(mjuiState_, button) - 436usize];
    ["Offset of field: mjuiState_::buttontime"]
        [::std::mem::offset_of!(mjuiState_, buttontime) - 440usize];
    ["Offset of field: mjuiState_::x"][::std::mem::offset_of!(mjuiState_, x) - 448usize];
    ["Offset of field: mjuiState_::y"][::std::mem::offset_of!(mjuiState_, y) - 456usize];
    ["Offset of field: mjuiState_::dx"][::std::mem::offset_of!(mjuiState_, dx) - 464usize];
    ["Offset of field: mjuiState_::dy"][::std::mem::offset_of!(mjuiState_, dy) - 472usize];
    ["Offset of field: mjuiState_::sx"][::std::mem::offset_of!(mjuiState_, sx) - 480usize];
    ["Offset of field: mjuiState_::sy"][::std::mem::offset_of!(mjuiState_, sy) - 488usize];
    ["Offset of field: mjuiState_::control"]
        [::std::mem::offset_of!(mjuiState_, control) - 496usize];
    ["Offset of field: mjuiState_::shift"][::std::mem::offset_of!(mjuiState_, shift) - 500usize];
    ["Offset of field: mjuiState_::alt"][::std::mem::offset_of!(mjuiState_, alt) - 504usize];
    ["Offset of field: mjuiState_::key"][::std::mem::offset_of!(mjuiState_, key) - 508usize];
    ["Offset of field: mjuiState_::keytime"]
        [::std::mem::offset_of!(mjuiState_, keytime) - 512usize];
    ["Offset of field: mjuiState_::mouserect"]
        [::std::mem::offset_of!(mjuiState_, mouserect) - 520usize];
    ["Offset of field: mjuiState_::dragrect"]
        [::std::mem::offset_of!(mjuiState_, dragrect) - 524usize];
    ["Offset of field: mjuiState_::dragbutton"]
        [::std::mem::offset_of!(mjuiState_, dragbutton) - 528usize];
    ["Offset of field: mjuiState_::dropcount"]
        [::std::mem::offset_of!(mjuiState_, dropcount) - 532usize];
    ["Offset of field: mjuiState_::droppaths"]
        [::std::mem::offset_of!(mjuiState_, droppaths) - 536usize];
};
impl Default for mjuiState_ {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mjuiState = mjuiState_;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mjuiThemeSpacing_ {
    pub total: ::std::os::raw::c_int,
    pub scroll: ::std::os::raw::c_int,
    pub label: ::std::os::raw::c_int,
    pub section: ::std::os::raw::c_int,
    pub cornersect: ::std::os::raw::c_int,
    pub cornersep: ::std::os::raw::c_int,
    pub itemside: ::std::os::raw::c_int,
    pub itemmid: ::std::os::raw::c_int,
    pub itemver: ::std::os::raw::c_int,
    pub texthor: ::std::os::raw::c_int,
    pub textver: ::std::os::raw::c_int,
    pub linescroll: ::std::os::raw::c_int,
    pub samples: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjuiThemeSpacing_"][::std::mem::size_of::<mjuiThemeSpacing_>() - 52usize];
    ["Alignment of mjuiThemeSpacing_"][::std::mem::align_of::<mjuiThemeSpacing_>() - 4usize];
    ["Offset of field: mjuiThemeSpacing_::total"]
        [::std::mem::offset_of!(mjuiThemeSpacing_, total) - 0usize];
    ["Offset of field: mjuiThemeSpacing_::scroll"]
        [::std::mem::offset_of!(mjuiThemeSpacing_, scroll) - 4usize];
    ["Offset of field: mjuiThemeSpacing_::label"]
        [::std::mem::offset_of!(mjuiThemeSpacing_, label) - 8usize];
    ["Offset of field: mjuiThemeSpacing_::section"]
        [::std::mem::offset_of!(mjuiThemeSpacing_, section) - 12usize];
    ["Offset of field: mjuiThemeSpacing_::cornersect"]
        [::std::mem::offset_of!(mjuiThemeSpacing_, cornersect) - 16usize];
    ["Offset of field: mjuiThemeSpacing_::cornersep"]
        [::std::mem::offset_of!(mjuiThemeSpacing_, cornersep) - 20usize];
    ["Offset of field: mjuiThemeSpacing_::itemside"]
        [::std::mem::offset_of!(mjuiThemeSpacing_, itemside) - 24usize];
    ["Offset of field: mjuiThemeSpacing_::itemmid"]
        [::std::mem::offset_of!(mjuiThemeSpacing_, itemmid) - 28usize];
    ["Offset of field: mjuiThemeSpacing_::itemver"]
        [::std::mem::offset_of!(mjuiThemeSpacing_, itemver) - 32usize];
    ["Offset of field: mjuiThemeSpacing_::texthor"]
        [::std::mem::offset_of!(mjuiThemeSpacing_, texthor) - 36usize];
    ["Offset of field: mjuiThemeSpacing_::textver"]
        [::std::mem::offset_of!(mjuiThemeSpacing_, textver) - 40usize];
    ["Offset of field: mjuiThemeSpacing_::linescroll"]
        [::std::mem::offset_of!(mjuiThemeSpacing_, linescroll) - 44usize];
    ["Offset of field: mjuiThemeSpacing_::samples"]
        [::std::mem::offset_of!(mjuiThemeSpacing_, samples) - 48usize];
};
pub type mjuiThemeSpacing = mjuiThemeSpacing_;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mjuiThemeColor_ {
    pub master: [f32; 3usize],
    pub thumb: [f32; 3usize],
    pub secttitle: [f32; 3usize],
    pub secttitle2: [f32; 3usize],
    pub secttitleuncheck: [f32; 3usize],
    pub secttitleuncheck2: [f32; 3usize],
    pub secttitlecheck: [f32; 3usize],
    pub secttitlecheck2: [f32; 3usize],
    pub sectfont: [f32; 3usize],
    pub sectsymbol: [f32; 3usize],
    pub sectpane: [f32; 3usize],
    pub separator: [f32; 3usize],
    pub separator2: [f32; 3usize],
    pub shortcut: [f32; 3usize],
    pub fontactive: [f32; 3usize],
    pub fontinactive: [f32; 3usize],
    pub decorinactive: [f32; 3usize],
    pub decorinactive2: [f32; 3usize],
    pub button: [f32; 3usize],
    pub check: [f32; 3usize],
    pub radio: [f32; 3usize],
    pub select: [f32; 3usize],
    pub select2: [f32; 3usize],
    pub slider: [f32; 3usize],
    pub slider2: [f32; 3usize],
    pub edit: [f32; 3usize],
    pub edit2: [f32; 3usize],
    pub cursor: [f32; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjuiThemeColor_"][::std::mem::size_of::<mjuiThemeColor_>() - 336usize];
    ["Alignment of mjuiThemeColor_"][::std::mem::align_of::<mjuiThemeColor_>() - 4usize];
    ["Offset of field: mjuiThemeColor_::master"]
        [::std::mem::offset_of!(mjuiThemeColor_, master) - 0usize];
    ["Offset of field: mjuiThemeColor_::thumb"]
        [::std::mem::offset_of!(mjuiThemeColor_, thumb) - 12usize];
    ["Offset of field: mjuiThemeColor_::secttitle"]
        [::std::mem::offset_of!(mjuiThemeColor_, secttitle) - 24usize];
    ["Offset of field: mjuiThemeColor_::secttitle2"]
        [::std::mem::offset_of!(mjuiThemeColor_, secttitle2) - 36usize];
    ["Offset of field: mjuiThemeColor_::secttitleuncheck"]
        [::std::mem::offset_of!(mjuiThemeColor_, secttitleuncheck) - 48usize];
    ["Offset of field: mjuiThemeColor_::secttitleuncheck2"]
        [::std::mem::offset_of!(mjuiThemeColor_, secttitleuncheck2) - 60usize];
    ["Offset of field: mjuiThemeColor_::secttitlecheck"]
        [::std::mem::offset_of!(mjuiThemeColor_, secttitlecheck) - 72usize];
    ["Offset of field: mjuiThemeColor_::secttitlecheck2"]
        [::std::mem::offset_of!(mjuiThemeColor_, secttitlecheck2) - 84usize];
    ["Offset of field: mjuiThemeColor_::sectfont"]
        [::std::mem::offset_of!(mjuiThemeColor_, sectfont) - 96usize];
    ["Offset of field: mjuiThemeColor_::sectsymbol"]
        [::std::mem::offset_of!(mjuiThemeColor_, sectsymbol) - 108usize];
    ["Offset of field: mjuiThemeColor_::sectpane"]
        [::std::mem::offset_of!(mjuiThemeColor_, sectpane) - 120usize];
    ["Offset of field: mjuiThemeColor_::separator"]
        [::std::mem::offset_of!(mjuiThemeColor_, separator) - 132usize];
    ["Offset of field: mjuiThemeColor_::separator2"]
        [::std::mem::offset_of!(mjuiThemeColor_, separator2) - 144usize];
    ["Offset of field: mjuiThemeColor_::shortcut"]
        [::std::mem::offset_of!(mjuiThemeColor_, shortcut) - 156usize];
    ["Offset of field: mjuiThemeColor_::fontactive"]
        [::std::mem::offset_of!(mjuiThemeColor_, fontactive) - 168usize];
    ["Offset of field: mjuiThemeColor_::fontinactive"]
        [::std::mem::offset_of!(mjuiThemeColor_, fontinactive) - 180usize];
    ["Offset of field: mjuiThemeColor_::decorinactive"]
        [::std::mem::offset_of!(mjuiThemeColor_, decorinactive) - 192usize];
    ["Offset of field: mjuiThemeColor_::decorinactive2"]
        [::std::mem::offset_of!(mjuiThemeColor_, decorinactive2) - 204usize];
    ["Offset of field: mjuiThemeColor_::button"]
        [::std::mem::offset_of!(mjuiThemeColor_, button) - 216usize];
    ["Offset of field: mjuiThemeColor_::check"]
        [::std::mem::offset_of!(mjuiThemeColor_, check) - 228usize];
    ["Offset of field: mjuiThemeColor_::radio"]
        [::std::mem::offset_of!(mjuiThemeColor_, radio) - 240usize];
    ["Offset of field: mjuiThemeColor_::select"]
        [::std::mem::offset_of!(mjuiThemeColor_, select) - 252usize];
    ["Offset of field: mjuiThemeColor_::select2"]
        [::std::mem::offset_of!(mjuiThemeColor_, select2) - 264usize];
    ["Offset of field: mjuiThemeColor_::slider"]
        [::std::mem::offset_of!(mjuiThemeColor_, slider) - 276usize];
    ["Offset of field: mjuiThemeColor_::slider2"]
        [::std::mem::offset_of!(mjuiThemeColor_, slider2) - 288usize];
    ["Offset of field: mjuiThemeColor_::edit"]
        [::std::mem::offset_of!(mjuiThemeColor_, edit) - 300usize];
    ["Offset of field: mjuiThemeColor_::edit2"]
        [::std::mem::offset_of!(mjuiThemeColor_, edit2) - 312usize];
    ["Offset of field: mjuiThemeColor_::cursor"]
        [::std::mem::offset_of!(mjuiThemeColor_, cursor) - 324usize];
};
pub type mjuiThemeColor = mjuiThemeColor_;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mjuiItemSingle_ {
    pub modifier: ::std::os::raw::c_int,
    pub shortcut: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjuiItemSingle_"][::std::mem::size_of::<mjuiItemSingle_>() - 8usize];
    ["Alignment of mjuiItemSingle_"][::std::mem::align_of::<mjuiItemSingle_>() - 4usize];
    ["Offset of field: mjuiItemSingle_::modifier"]
        [::std::mem::offset_of!(mjuiItemSingle_, modifier) - 0usize];
    ["Offset of field: mjuiItemSingle_::shortcut"]
        [::std::mem::offset_of!(mjuiItemSingle_, shortcut) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mjuiItemMulti_ {
    pub nelem: ::std::os::raw::c_int,
    pub name: [[::std::os::raw::c_char; 40usize]; 35usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjuiItemMulti_"][::std::mem::size_of::<mjuiItemMulti_>() - 1404usize];
    ["Alignment of mjuiItemMulti_"][::std::mem::align_of::<mjuiItemMulti_>() - 4usize];
    ["Offset of field: mjuiItemMulti_::nelem"]
        [::std::mem::offset_of!(mjuiItemMulti_, nelem) - 0usize];
    ["Offset of field: mjuiItemMulti_::name"]
        [::std::mem::offset_of!(mjuiItemMulti_, name) - 4usize];
};
impl Default for mjuiItemMulti_ {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mjuiItemSlider_ {
    pub range: [f64; 2usize],
    pub divisions: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjuiItemSlider_"][::std::mem::size_of::<mjuiItemSlider_>() - 24usize];
    ["Alignment of mjuiItemSlider_"][::std::mem::align_of::<mjuiItemSlider_>() - 8usize];
    ["Offset of field: mjuiItemSlider_::range"]
        [::std::mem::offset_of!(mjuiItemSlider_, range) - 0usize];
    ["Offset of field: mjuiItemSlider_::divisions"]
        [::std::mem::offset_of!(mjuiItemSlider_, divisions) - 16usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mjuiItemEdit_ {
    pub nelem: ::std::os::raw::c_int,
    pub range: [[f64; 2usize]; 7usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjuiItemEdit_"][::std::mem::size_of::<mjuiItemEdit_>() - 120usize];
    ["Alignment of mjuiItemEdit_"][::std::mem::align_of::<mjuiItemEdit_>() - 8usize];
    ["Offset of field: mjuiItemEdit_::nelem"]
        [::std::mem::offset_of!(mjuiItemEdit_, nelem) - 0usize];
    ["Offset of field: mjuiItemEdit_::range"]
        [::std::mem::offset_of!(mjuiItemEdit_, range) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mjuiItem_ {
    pub type_: ::std::os::raw::c_int,
    pub name: [::std::os::raw::c_char; 40usize],
    pub state: ::std::os::raw::c_int,
    pub pdata: *mut ::std::os::raw::c_void,
    pub sectionid: ::std::os::raw::c_int,
    pub itemid: ::std::os::raw::c_int,
    pub userid: ::std::os::raw::c_int,
    pub __bindgen_anon_1: mjuiItem___bindgen_ty_1,
    pub rect: mjrRect,
    pub skip: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union mjuiItem___bindgen_ty_1 {
    pub single: mjuiItemSingle_,
    pub multi: mjuiItemMulti_,
    pub slider: mjuiItemSlider_,
    pub edit: mjuiItemEdit_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjuiItem___bindgen_ty_1"]
        [::std::mem::size_of::<mjuiItem___bindgen_ty_1>() - 1408usize];
    ["Alignment of mjuiItem___bindgen_ty_1"]
        [::std::mem::align_of::<mjuiItem___bindgen_ty_1>() - 8usize];
    ["Offset of field: mjuiItem___bindgen_ty_1::single"]
        [::std::mem::offset_of!(mjuiItem___bindgen_ty_1, single) - 0usize];
    ["Offset of field: mjuiItem___bindgen_ty_1::multi"]
        [::std::mem::offset_of!(mjuiItem___bindgen_ty_1, multi) - 0usize];
    ["Offset of field: mjuiItem___bindgen_ty_1::slider"]
        [::std::mem::offset_of!(mjuiItem___bindgen_ty_1, slider) - 0usize];
    ["Offset of field: mjuiItem___bindgen_ty_1::edit"]
        [::std::mem::offset_of!(mjuiItem___bindgen_ty_1, edit) - 0usize];
};
impl Default for mjuiItem___bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjuiItem_"][::std::mem::size_of::<mjuiItem_>() - 1504usize];
    ["Alignment of mjuiItem_"][::std::mem::align_of::<mjuiItem_>() - 8usize];
    ["Offset of field: mjuiItem_::type_"][::std::mem::offset_of!(mjuiItem_, type_) - 0usize];
    ["Offset of field: mjuiItem_::name"][::std::mem::offset_of!(mjuiItem_, name) - 4usize];
    ["Offset of field: mjuiItem_::state"][::std::mem::offset_of!(mjuiItem_, state) - 44usize];
    ["Offset of field: mjuiItem_::pdata"][::std::mem::offset_of!(mjuiItem_, pdata) - 48usize];
    ["Offset of field: mjuiItem_::sectionid"]
        [::std::mem::offset_of!(mjuiItem_, sectionid) - 56usize];
    ["Offset of field: mjuiItem_::itemid"][::std::mem::offset_of!(mjuiItem_, itemid) - 60usize];
    ["Offset of field: mjuiItem_::userid"][::std::mem::offset_of!(mjuiItem_, userid) - 64usize];
    ["Offset of field: mjuiItem_::rect"][::std::mem::offset_of!(mjuiItem_, rect) - 1480usize];
    ["Offset of field: mjuiItem_::skip"][::std::mem::offset_of!(mjuiItem_, skip) - 1496usize];
};
impl Default for mjuiItem_ {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mjuiItem = mjuiItem_;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mjuiSection_ {
    pub name: [::std::os::raw::c_char; 40usize],
    pub state: ::std::os::raw::c_int,
    pub modifier: ::std::os::raw::c_int,
    pub shortcut: ::std::os::raw::c_int,
    pub checkbox: ::std::os::raw::c_int,
    pub nitem: ::std::os::raw::c_int,
    pub item: [mjuiItem; 200usize],
    pub rtitle: mjrRect,
    pub rcontent: mjrRect,
    pub lastclick: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjuiSection_"][::std::mem::size_of::<mjuiSection_>() - 300904usize];
    ["Alignment of mjuiSection_"][::std::mem::align_of::<mjuiSection_>() - 8usize];
    ["Offset of field: mjuiSection_::name"][::std::mem::offset_of!(mjuiSection_, name) - 0usize];
    ["Offset of field: mjuiSection_::state"][::std::mem::offset_of!(mjuiSection_, state) - 40usize];
    ["Offset of field: mjuiSection_::modifier"]
        [::std::mem::offset_of!(mjuiSection_, modifier) - 44usize];
    ["Offset of field: mjuiSection_::shortcut"]
        [::std::mem::offset_of!(mjuiSection_, shortcut) - 48usize];
    ["Offset of field: mjuiSection_::checkbox"]
        [::std::mem::offset_of!(mjuiSection_, checkbox) - 52usize];
    ["Offset of field: mjuiSection_::nitem"][::std::mem::offset_of!(mjuiSection_, nitem) - 56usize];
    ["Offset of field: mjuiSection_::item"][::std::mem::offset_of!(mjuiSection_, item) - 64usize];
    ["Offset of field: mjuiSection_::rtitle"]
        [::std::mem::offset_of!(mjuiSection_, rtitle) - 300864usize];
    ["Offset of field: mjuiSection_::rcontent"]
        [::std::mem::offset_of!(mjuiSection_, rcontent) - 300880usize];
    ["Offset of field: mjuiSection_::lastclick"]
        [::std::mem::offset_of!(mjuiSection_, lastclick) - 300896usize];
};
impl Default for mjuiSection_ {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mjuiSection = mjuiSection_;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mjUI_ {
    pub spacing: mjuiThemeSpacing,
    pub color: mjuiThemeColor,
    pub predicate: mjfItemEnable,
    pub userdata: *mut ::std::os::raw::c_void,
    pub rectid: ::std::os::raw::c_int,
    pub auxid: ::std::os::raw::c_int,
    pub radiocol: ::std::os::raw::c_int,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub maxheight: ::std::os::raw::c_int,
    pub scroll: ::std::os::raw::c_int,
    pub mousesect: ::std::os::raw::c_int,
    pub mouseitem: ::std::os::raw::c_int,
    pub mousehelp: ::std::os::raw::c_int,
    pub mouseclicks: ::std::os::raw::c_int,
    pub mousesectcheck: ::std::os::raw::c_int,
    pub editsect: ::std::os::raw::c_int,
    pub edititem: ::std::os::raw::c_int,
    pub editcursor: ::std::os::raw::c_int,
    pub editscroll: ::std::os::raw::c_int,
    pub edittext: [::std::os::raw::c_char; 300usize],
    pub editchanged: *mut mjuiItem,
    pub nsect: ::std::os::raw::c_int,
    pub sect: [mjuiSection; 10usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjUI_"][::std::mem::size_of::<mjUI_>() - 3009832usize];
    ["Alignment of mjUI_"][::std::mem::align_of::<mjUI_>() - 8usize];
    ["Offset of field: mjUI_::spacing"][::std::mem::offset_of!(mjUI_, spacing) - 0usize];
    ["Offset of field: mjUI_::color"][::std::mem::offset_of!(mjUI_, color) - 52usize];
    ["Offset of field: mjUI_::predicate"][::std::mem::offset_of!(mjUI_, predicate) - 392usize];
    ["Offset of field: mjUI_::userdata"][::std::mem::offset_of!(mjUI_, userdata) - 400usize];
    ["Offset of field: mjUI_::rectid"][::std::mem::offset_of!(mjUI_, rectid) - 408usize];
    ["Offset of field: mjUI_::auxid"][::std::mem::offset_of!(mjUI_, auxid) - 412usize];
    ["Offset of field: mjUI_::radiocol"][::std::mem::offset_of!(mjUI_, radiocol) - 416usize];
    ["Offset of field: mjUI_::width"][::std::mem::offset_of!(mjUI_, width) - 420usize];
    ["Offset of field: mjUI_::height"][::std::mem::offset_of!(mjUI_, height) - 424usize];
    ["Offset of field: mjUI_::maxheight"][::std::mem::offset_of!(mjUI_, maxheight) - 428usize];
    ["Offset of field: mjUI_::scroll"][::std::mem::offset_of!(mjUI_, scroll) - 432usize];
    ["Offset of field: mjUI_::mousesect"][::std::mem::offset_of!(mjUI_, mousesect) - 436usize];
    ["Offset of field: mjUI_::mouseitem"][::std::mem::offset_of!(mjUI_, mouseitem) - 440usize];
    ["Offset of field: mjUI_::mousehelp"][::std::mem::offset_of!(mjUI_, mousehelp) - 444usize];
    ["Offset of field: mjUI_::mouseclicks"][::std::mem::offset_of!(mjUI_, mouseclicks) - 448usize];
    ["Offset of field: mjUI_::mousesectcheck"]
        [::std::mem::offset_of!(mjUI_, mousesectcheck) - 452usize];
    ["Offset of field: mjUI_::editsect"][::std::mem::offset_of!(mjUI_, editsect) - 456usize];
    ["Offset of field: mjUI_::edititem"][::std::mem::offset_of!(mjUI_, edititem) - 460usize];
    ["Offset of field: mjUI_::editcursor"][::std::mem::offset_of!(mjUI_, editcursor) - 464usize];
    ["Offset of field: mjUI_::editscroll"][::std::mem::offset_of!(mjUI_, editscroll) - 468usize];
    ["Offset of field: mjUI_::edittext"][::std::mem::offset_of!(mjUI_, edittext) - 472usize];
    ["Offset of field: mjUI_::editchanged"][::std::mem::offset_of!(mjUI_, editchanged) - 776usize];
    ["Offset of field: mjUI_::nsect"][::std::mem::offset_of!(mjUI_, nsect) - 784usize];
    ["Offset of field: mjUI_::sect"][::std::mem::offset_of!(mjUI_, sect) - 792usize];
};
impl Default for mjUI_ {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mjUI = mjUI_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mjuiDef_ {
    pub type_: ::std::os::raw::c_int,
    pub name: [::std::os::raw::c_char; 40usize],
    pub state: ::std::os::raw::c_int,
    pub pdata: *mut ::std::os::raw::c_void,
    pub other: [::std::os::raw::c_char; 300usize],
    pub otherint: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjuiDef_"][::std::mem::size_of::<mjuiDef_>() - 360usize];
    ["Alignment of mjuiDef_"][::std::mem::align_of::<mjuiDef_>() - 8usize];
    ["Offset of field: mjuiDef_::type_"][::std::mem::offset_of!(mjuiDef_, type_) - 0usize];
    ["Offset of field: mjuiDef_::name"][::std::mem::offset_of!(mjuiDef_, name) - 4usize];
    ["Offset of field: mjuiDef_::state"][::std::mem::offset_of!(mjuiDef_, state) - 44usize];
    ["Offset of field: mjuiDef_::pdata"][::std::mem::offset_of!(mjuiDef_, pdata) - 48usize];
    ["Offset of field: mjuiDef_::other"][::std::mem::offset_of!(mjuiDef_, other) - 56usize];
    ["Offset of field: mjuiDef_::otherint"][::std::mem::offset_of!(mjuiDef_, otherint) - 356usize];
};
impl Default for mjuiDef_ {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mjuiDef = mjuiDef_;
unsafe extern "C" {
    pub static mut mju_user_error:
        ::std::option::Option<unsafe extern "C" fn(arg1: *const ::std::os::raw::c_char)>;
}
unsafe extern "C" {
    pub static mut mju_user_warning:
        ::std::option::Option<unsafe extern "C" fn(arg1: *const ::std::os::raw::c_char)>;
}
unsafe extern "C" {
    pub static mut mju_user_malloc:
        ::std::option::Option<unsafe extern "C" fn(arg1: usize) -> *mut ::std::os::raw::c_void>;
}
unsafe extern "C" {
    pub static mut mju_user_free:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>;
}
unsafe extern "C" {
    pub static mut mjcb_passive: mjfGeneric;
}
unsafe extern "C" {
    pub static mut mjcb_control: mjfGeneric;
}
unsafe extern "C" {
    pub static mut mjcb_contactfilter: mjfConFilt;
}
unsafe extern "C" {
    pub static mut mjcb_sensor: mjfSensor;
}
unsafe extern "C" {
    pub static mut mjcb_time: mjfTime;
}
unsafe extern "C" {
    pub static mut mjcb_act_dyn: mjfAct;
}
unsafe extern "C" {
    pub static mut mjcb_act_gain: mjfAct;
}
unsafe extern "C" {
    pub static mut mjcb_act_bias: mjfAct;
}
unsafe extern "C" {
    pub static mut mjCOLLISIONFUNC: [[mjfCollision; 9usize]; 9usize];
}
unsafe extern "C" {
    pub static mut mjDISABLESTRING: [*const ::std::os::raw::c_char; 16usize];
}
unsafe extern "C" {
    pub static mut mjENABLESTRING: [*const ::std::os::raw::c_char; 7usize];
}
unsafe extern "C" {
    pub static mut mjTIMERSTRING: [*const ::std::os::raw::c_char; 15usize];
}
unsafe extern "C" {
    pub static mut mjLABELSTRING: [*const ::std::os::raw::c_char; 17usize];
}
unsafe extern "C" {
    pub static mut mjFRAMESTRING: [*const ::std::os::raw::c_char; 8usize];
}
unsafe extern "C" {
    pub static mut mjVISSTRING: [[*const ::std::os::raw::c_char; 3usize]; 32usize];
}
unsafe extern "C" {
    pub static mut mjRNDSTRING: [[*const ::std::os::raw::c_char; 3usize]; 10usize];
}
unsafe extern "C" {
    pub fn mj_defaultVFS(vfs: *mut mjVFS);
}
unsafe extern "C" {
    pub fn mj_addFileVFS(
        vfs: *mut mjVFS,
        directory: *const ::std::os::raw::c_char,
        filename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mj_addBufferVFS(
        vfs: *mut mjVFS,
        name: *const ::std::os::raw::c_char,
        buffer: *const ::std::os::raw::c_void,
        nbuffer: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mj_deleteFileVFS(
        vfs: *mut mjVFS,
        filename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mj_deleteVFS(vfs: *mut mjVFS);
}
unsafe extern "C" {
    pub fn mj_loadXML(
        filename: *const ::std::os::raw::c_char,
        vfs: *const mjVFS,
        error: *mut ::std::os::raw::c_char,
        error_sz: ::std::os::raw::c_int,
    ) -> *mut mjModel;
}
unsafe extern "C" {
    pub fn mj_parseXML(
        filename: *const ::std::os::raw::c_char,
        vfs: *const mjVFS,
        error: *mut ::std::os::raw::c_char,
        error_sz: ::std::os::raw::c_int,
    ) -> *mut mjSpec;
}
unsafe extern "C" {
    pub fn mj_parseXMLString(
        xml: *const ::std::os::raw::c_char,
        vfs: *const mjVFS,
        error: *mut ::std::os::raw::c_char,
        error_sz: ::std::os::raw::c_int,
    ) -> *mut mjSpec;
}
unsafe extern "C" {
    pub fn mj_compile(s: *mut mjSpec, vfs: *const mjVFS) -> *mut mjModel;
}
unsafe extern "C" {
    pub fn mj_recompile(
        s: *mut mjSpec,
        vfs: *const mjVFS,
        m: *mut mjModel,
        d: *mut mjData,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mj_saveLastXML(
        filename: *const ::std::os::raw::c_char,
        m: *const mjModel,
        error: *mut ::std::os::raw::c_char,
        error_sz: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mj_freeLastXML();
}
unsafe extern "C" {
    pub fn mj_saveXMLString(
        s: *const mjSpec,
        xml: *mut ::std::os::raw::c_char,
        xml_sz: ::std::os::raw::c_int,
        error: *mut ::std::os::raw::c_char,
        error_sz: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mj_saveXML(
        s: *const mjSpec,
        filename: *const ::std::os::raw::c_char,
        error: *mut ::std::os::raw::c_char,
        error_sz: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mj_step(m: *const mjModel, d: *mut mjData);
}
unsafe extern "C" {
    pub fn mj_step1(m: *const mjModel, d: *mut mjData);
}
unsafe extern "C" {
    pub fn mj_step2(m: *const mjModel, d: *mut mjData);
}
unsafe extern "C" {
    pub fn mj_forward(m: *const mjModel, d: *mut mjData);
}
unsafe extern "C" {
    pub fn mj_inverse(m: *const mjModel, d: *mut mjData);
}
unsafe extern "C" {
    pub fn mj_forwardSkip(
        m: *const mjModel,
        d: *mut mjData,
        skipstage: ::std::os::raw::c_int,
        skipsensor: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn mj_inverseSkip(
        m: *const mjModel,
        d: *mut mjData,
        skipstage: ::std::os::raw::c_int,
        skipsensor: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn mj_defaultLROpt(opt: *mut mjLROpt);
}
unsafe extern "C" {
    pub fn mj_defaultSolRefImp(solref: *mut mjtNum, solimp: *mut mjtNum);
}
unsafe extern "C" {
    pub fn mj_defaultOption(opt: *mut mjOption);
}
unsafe extern "C" {
    pub fn mj_defaultVisual(vis: *mut mjVisual);
}
unsafe extern "C" {
    pub fn mj_copyModel(dest: *mut mjModel, src: *const mjModel) -> *mut mjModel;
}
unsafe extern "C" {
    pub fn mj_saveModel(
        m: *const mjModel,
        filename: *const ::std::os::raw::c_char,
        buffer: *mut ::std::os::raw::c_void,
        buffer_sz: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn mj_loadModel(filename: *const ::std::os::raw::c_char, vfs: *const mjVFS)
        -> *mut mjModel;
}
unsafe extern "C" {
    pub fn mj_deleteModel(m: *mut mjModel);
}
unsafe extern "C" {
    pub fn mj_sizeModel(m: *const mjModel) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mj_makeData(m: *const mjModel) -> *mut mjData;
}
unsafe extern "C" {
    pub fn mj_copyData(dest: *mut mjData, m: *const mjModel, src: *const mjData) -> *mut mjData;
}
unsafe extern "C" {
    pub fn mj_resetData(m: *const mjModel, d: *mut mjData);
}
unsafe extern "C" {
    pub fn mj_resetDataDebug(
        m: *const mjModel,
        d: *mut mjData,
        debug_value: ::std::os::raw::c_uchar,
    );
}
unsafe extern "C" {
    pub fn mj_resetDataKeyframe(m: *const mjModel, d: *mut mjData, key: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn mj_markStack(d: *mut mjData);
}
unsafe extern "C" {
    pub fn mj_freeStack(d: *mut mjData);
}
unsafe extern "C" {
    pub fn mj_stackAllocByte(
        d: *mut mjData,
        bytes: usize,
        alignment: usize,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn mj_stackAllocNum(d: *mut mjData, size: usize) -> *mut mjtNum;
}
unsafe extern "C" {
    pub fn mj_stackAllocInt(d: *mut mjData, size: usize) -> *mut ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mj_deleteData(d: *mut mjData);
}
unsafe extern "C" {
    pub fn mj_resetCallbacks();
}
unsafe extern "C" {
    pub fn mj_setConst(m: *mut mjModel, d: *mut mjData);
}
unsafe extern "C" {
    pub fn mj_setLengthRange(
        m: *mut mjModel,
        d: *mut mjData,
        index: ::std::os::raw::c_int,
        opt: *const mjLROpt,
        error: *mut ::std::os::raw::c_char,
        error_sz: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mj_makeSpec() -> *mut mjSpec;
}
unsafe extern "C" {
    pub fn mj_copySpec(s: *const mjSpec) -> *mut mjSpec;
}
unsafe extern "C" {
    pub fn mj_deleteSpec(s: *mut mjSpec);
}
unsafe extern "C" {
    pub fn mjs_activatePlugin(
        s: *mut mjSpec,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mj_printFormattedModel(
        m: *const mjModel,
        filename: *const ::std::os::raw::c_char,
        float_format: *const ::std::os::raw::c_char,
    );
}
unsafe extern "C" {
    pub fn mj_printModel(m: *const mjModel, filename: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn mj_printFormattedData(
        m: *const mjModel,
        d: *mut mjData,
        filename: *const ::std::os::raw::c_char,
        float_format: *const ::std::os::raw::c_char,
    );
}
unsafe extern "C" {
    pub fn mj_printData(m: *const mjModel, d: *mut mjData, filename: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn mju_printMat(mat: *const mjtNum, nr: ::std::os::raw::c_int, nc: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn mju_printMatSparse(
        mat: *const mjtNum,
        nr: ::std::os::raw::c_int,
        rownnz: *const ::std::os::raw::c_int,
        rowadr: *const ::std::os::raw::c_int,
        colind: *const ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn mj_printSchema(
        filename: *const ::std::os::raw::c_char,
        buffer: *mut ::std::os::raw::c_char,
        buffer_sz: ::std::os::raw::c_int,
        flg_html: ::std::os::raw::c_int,
        flg_pad: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mj_fwdPosition(m: *const mjModel, d: *mut mjData);
}
unsafe extern "C" {
    pub fn mj_fwdVelocity(m: *const mjModel, d: *mut mjData);
}
unsafe extern "C" {
    pub fn mj_fwdActuation(m: *const mjModel, d: *mut mjData);
}
unsafe extern "C" {
    pub fn mj_fwdAcceleration(m: *const mjModel, d: *mut mjData);
}
unsafe extern "C" {
    pub fn mj_fwdConstraint(m: *const mjModel, d: *mut mjData);
}
unsafe extern "C" {
    pub fn mj_Euler(m: *const mjModel, d: *mut mjData);
}
unsafe extern "C" {
    pub fn mj_RungeKutta(m: *const mjModel, d: *mut mjData, N: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn mj_implicit(m: *const mjModel, d: *mut mjData);
}
unsafe extern "C" {
    pub fn mj_invPosition(m: *const mjModel, d: *mut mjData);
}
unsafe extern "C" {
    pub fn mj_invVelocity(m: *const mjModel, d: *mut mjData);
}
unsafe extern "C" {
    pub fn mj_invConstraint(m: *const mjModel, d: *mut mjData);
}
unsafe extern "C" {
    pub fn mj_compareFwdInv(m: *const mjModel, d: *mut mjData);
}
unsafe extern "C" {
    pub fn mj_sensorPos(m: *const mjModel, d: *mut mjData);
}
unsafe extern "C" {
    pub fn mj_sensorVel(m: *const mjModel, d: *mut mjData);
}
unsafe extern "C" {
    pub fn mj_sensorAcc(m: *const mjModel, d: *mut mjData);
}
unsafe extern "C" {
    pub fn mj_energyPos(m: *const mjModel, d: *mut mjData);
}
unsafe extern "C" {
    pub fn mj_energyVel(m: *const mjModel, d: *mut mjData);
}
unsafe extern "C" {
    pub fn mj_checkPos(m: *const mjModel, d: *mut mjData);
}
unsafe extern "C" {
    pub fn mj_checkVel(m: *const mjModel, d: *mut mjData);
}
unsafe extern "C" {
    pub fn mj_checkAcc(m: *const mjModel, d: *mut mjData);
}
unsafe extern "C" {
    pub fn mj_kinematics(m: *const mjModel, d: *mut mjData);
}
unsafe extern "C" {
    pub fn mj_comPos(m: *const mjModel, d: *mut mjData);
}
unsafe extern "C" {
    pub fn mj_camlight(m: *const mjModel, d: *mut mjData);
}
unsafe extern "C" {
    pub fn mj_flex(m: *const mjModel, d: *mut mjData);
}
unsafe extern "C" {
    pub fn mj_tendon(m: *const mjModel, d: *mut mjData);
}
unsafe extern "C" {
    pub fn mj_transmission(m: *const mjModel, d: *mut mjData);
}
unsafe extern "C" {
    pub fn mj_crb(m: *const mjModel, d: *mut mjData);
}
unsafe extern "C" {
    pub fn mj_factorM(m: *const mjModel, d: *mut mjData);
}
unsafe extern "C" {
    pub fn mj_solveM(
        m: *const mjModel,
        d: *mut mjData,
        x: *mut mjtNum,
        y: *const mjtNum,
        n: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn mj_solveM2(
        m: *const mjModel,
        d: *mut mjData,
        x: *mut mjtNum,
        y: *const mjtNum,
        sqrtInvD: *const mjtNum,
        n: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn mj_comVel(m: *const mjModel, d: *mut mjData);
}
unsafe extern "C" {
    pub fn mj_passive(m: *const mjModel, d: *mut mjData);
}
unsafe extern "C" {
    pub fn mj_subtreeVel(m: *const mjModel, d: *mut mjData);
}
unsafe extern "C" {
    pub fn mj_rne(
        m: *const mjModel,
        d: *mut mjData,
        flg_acc: ::std::os::raw::c_int,
        result: *mut mjtNum,
    );
}
unsafe extern "C" {
    pub fn mj_rnePostConstraint(m: *const mjModel, d: *mut mjData);
}
unsafe extern "C" {
    pub fn mj_collision(m: *const mjModel, d: *mut mjData);
}
unsafe extern "C" {
    pub fn mj_makeConstraint(m: *const mjModel, d: *mut mjData);
}
unsafe extern "C" {
    pub fn mj_island(m: *const mjModel, d: *mut mjData);
}
unsafe extern "C" {
    pub fn mj_projectConstraint(m: *const mjModel, d: *mut mjData);
}
unsafe extern "C" {
    pub fn mj_referenceConstraint(m: *const mjModel, d: *mut mjData);
}
unsafe extern "C" {
    pub fn mj_constraintUpdate(
        m: *const mjModel,
        d: *mut mjData,
        jar: *const mjtNum,
        cost: *mut mjtNum,
        flg_coneHessian: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn mj_stateSize(m: *const mjModel, spec: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mj_getState(
        m: *const mjModel,
        d: *const mjData,
        state: *mut mjtNum,
        spec: ::std::os::raw::c_uint,
    );
}
unsafe extern "C" {
    pub fn mj_setState(
        m: *const mjModel,
        d: *mut mjData,
        state: *const mjtNum,
        spec: ::std::os::raw::c_uint,
    );
}
unsafe extern "C" {
    pub fn mj_setKeyframe(m: *mut mjModel, d: *const mjData, k: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn mj_addContact(
        m: *const mjModel,
        d: *mut mjData,
        con: *const mjContact,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mj_isPyramidal(m: *const mjModel) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mj_isSparse(m: *const mjModel) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mj_isDual(m: *const mjModel) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mj_mulJacVec(m: *const mjModel, d: *const mjData, res: *mut mjtNum, vec: *const mjtNum);
}
unsafe extern "C" {
    pub fn mj_mulJacTVec(m: *const mjModel, d: *const mjData, res: *mut mjtNum, vec: *const mjtNum);
}
unsafe extern "C" {
    pub fn mj_jac(
        m: *const mjModel,
        d: *const mjData,
        jacp: *mut mjtNum,
        jacr: *mut mjtNum,
        point: *const mjtNum,
        body: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn mj_jacBody(
        m: *const mjModel,
        d: *const mjData,
        jacp: *mut mjtNum,
        jacr: *mut mjtNum,
        body: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn mj_jacBodyCom(
        m: *const mjModel,
        d: *const mjData,
        jacp: *mut mjtNum,
        jacr: *mut mjtNum,
        body: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn mj_jacSubtreeCom(
        m: *const mjModel,
        d: *mut mjData,
        jacp: *mut mjtNum,
        body: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn mj_jacGeom(
        m: *const mjModel,
        d: *const mjData,
        jacp: *mut mjtNum,
        jacr: *mut mjtNum,
        geom: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn mj_jacSite(
        m: *const mjModel,
        d: *const mjData,
        jacp: *mut mjtNum,
        jacr: *mut mjtNum,
        site: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn mj_jacPointAxis(
        m: *const mjModel,
        d: *mut mjData,
        jacPoint: *mut mjtNum,
        jacAxis: *mut mjtNum,
        point: *const mjtNum,
        axis: *const mjtNum,
        body: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn mj_jacDot(
        m: *const mjModel,
        d: *const mjData,
        jacp: *mut mjtNum,
        jacr: *mut mjtNum,
        point: *const mjtNum,
        body: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn mj_angmomMat(
        m: *const mjModel,
        d: *mut mjData,
        mat: *mut mjtNum,
        body: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn mj_name2id(
        m: *const mjModel,
        type_: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mj_id2name(
        m: *const mjModel,
        type_: ::std::os::raw::c_int,
        id: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn mj_fullM(m: *const mjModel, dst: *mut mjtNum, M: *const mjtNum);
}
unsafe extern "C" {
    pub fn mj_mulM(m: *const mjModel, d: *const mjData, res: *mut mjtNum, vec: *const mjtNum);
}
unsafe extern "C" {
    pub fn mj_mulM2(m: *const mjModel, d: *const mjData, res: *mut mjtNum, vec: *const mjtNum);
}
unsafe extern "C" {
    pub fn mj_addM(
        m: *const mjModel,
        d: *mut mjData,
        dst: *mut mjtNum,
        rownnz: *mut ::std::os::raw::c_int,
        rowadr: *mut ::std::os::raw::c_int,
        colind: *mut ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn mj_applyFT(
        m: *const mjModel,
        d: *mut mjData,
        force: *const mjtNum,
        torque: *const mjtNum,
        point: *const mjtNum,
        body: ::std::os::raw::c_int,
        qfrc_target: *mut mjtNum,
    );
}
unsafe extern "C" {
    pub fn mj_objectVelocity(
        m: *const mjModel,
        d: *const mjData,
        objtype: ::std::os::raw::c_int,
        objid: ::std::os::raw::c_int,
        res: *mut mjtNum,
        flg_local: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn mj_objectAcceleration(
        m: *const mjModel,
        d: *const mjData,
        objtype: ::std::os::raw::c_int,
        objid: ::std::os::raw::c_int,
        res: *mut mjtNum,
        flg_local: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn mj_geomDistance(
        m: *const mjModel,
        d: *const mjData,
        geom1: ::std::os::raw::c_int,
        geom2: ::std::os::raw::c_int,
        distmax: mjtNum,
        fromto: *mut mjtNum,
    ) -> mjtNum;
}
unsafe extern "C" {
    pub fn mj_contactForce(
        m: *const mjModel,
        d: *const mjData,
        id: ::std::os::raw::c_int,
        result: *mut mjtNum,
    );
}
unsafe extern "C" {
    pub fn mj_differentiatePos(
        m: *const mjModel,
        qvel: *mut mjtNum,
        dt: mjtNum,
        qpos1: *const mjtNum,
        qpos2: *const mjtNum,
    );
}
unsafe extern "C" {
    pub fn mj_integratePos(m: *const mjModel, qpos: *mut mjtNum, qvel: *const mjtNum, dt: mjtNum);
}
unsafe extern "C" {
    pub fn mj_normalizeQuat(m: *const mjModel, qpos: *mut mjtNum);
}
unsafe extern "C" {
    pub fn mj_local2Global(
        d: *mut mjData,
        xpos: *mut mjtNum,
        xmat: *mut mjtNum,
        pos: *const mjtNum,
        quat: *const mjtNum,
        body: ::std::os::raw::c_int,
        sameframe: mjtByte,
    );
}
unsafe extern "C" {
    pub fn mj_getTotalmass(m: *const mjModel) -> mjtNum;
}
unsafe extern "C" {
    pub fn mj_setTotalmass(m: *mut mjModel, newmass: mjtNum);
}
unsafe extern "C" {
    pub fn mj_getPluginConfig(
        m: *const mjModel,
        plugin_id: ::std::os::raw::c_int,
        attrib: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn mj_loadPluginLibrary(path: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn mj_loadAllPluginLibraries(
        directory: *const ::std::os::raw::c_char,
        callback: mjfPluginLibraryLoadCallback,
    );
}
unsafe extern "C" {
    pub fn mj_version() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mj_versionString() -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn mj_multiRay(
        m: *const mjModel,
        d: *mut mjData,
        pnt: *const mjtNum,
        vec: *const mjtNum,
        geomgroup: *const mjtByte,
        flg_static: mjtByte,
        bodyexclude: ::std::os::raw::c_int,
        geomid: *mut ::std::os::raw::c_int,
        dist: *mut mjtNum,
        nray: ::std::os::raw::c_int,
        cutoff: mjtNum,
    );
}
unsafe extern "C" {
    pub fn mj_ray(
        m: *const mjModel,
        d: *const mjData,
        pnt: *const mjtNum,
        vec: *const mjtNum,
        geomgroup: *const mjtByte,
        flg_static: mjtByte,
        bodyexclude: ::std::os::raw::c_int,
        geomid: *mut ::std::os::raw::c_int,
    ) -> mjtNum;
}
unsafe extern "C" {
    pub fn mj_rayHfield(
        m: *const mjModel,
        d: *const mjData,
        geomid: ::std::os::raw::c_int,
        pnt: *const mjtNum,
        vec: *const mjtNum,
    ) -> mjtNum;
}
unsafe extern "C" {
    pub fn mj_rayMesh(
        m: *const mjModel,
        d: *const mjData,
        geomid: ::std::os::raw::c_int,
        pnt: *const mjtNum,
        vec: *const mjtNum,
    ) -> mjtNum;
}
unsafe extern "C" {
    pub fn mju_rayGeom(
        pos: *const mjtNum,
        mat: *const mjtNum,
        size: *const mjtNum,
        pnt: *const mjtNum,
        vec: *const mjtNum,
        geomtype: ::std::os::raw::c_int,
    ) -> mjtNum;
}
unsafe extern "C" {
    pub fn mju_rayFlex(
        m: *const mjModel,
        d: *const mjData,
        flex_layer: ::std::os::raw::c_int,
        flg_vert: mjtByte,
        flg_edge: mjtByte,
        flg_face: mjtByte,
        flg_skin: mjtByte,
        flexid: ::std::os::raw::c_int,
        pnt: *const mjtNum,
        vec: *const mjtNum,
        vertid: *mut ::std::os::raw::c_int,
    ) -> mjtNum;
}
unsafe extern "C" {
    pub fn mju_raySkin(
        nface: ::std::os::raw::c_int,
        nvert: ::std::os::raw::c_int,
        face: *const ::std::os::raw::c_int,
        vert: *const f32,
        pnt: *const mjtNum,
        vec: *const mjtNum,
        vertid: *mut ::std::os::raw::c_int,
    ) -> mjtNum;
}
unsafe extern "C" {
    pub fn mjv_defaultCamera(cam: *mut mjvCamera);
}
unsafe extern "C" {
    pub fn mjv_defaultFreeCamera(m: *const mjModel, cam: *mut mjvCamera);
}
unsafe extern "C" {
    pub fn mjv_defaultPerturb(pert: *mut mjvPerturb);
}
unsafe extern "C" {
    pub fn mjv_room2model(
        modelpos: *mut mjtNum,
        modelquat: *mut mjtNum,
        roompos: *const mjtNum,
        roomquat: *const mjtNum,
        scn: *const mjvScene,
    );
}
unsafe extern "C" {
    pub fn mjv_model2room(
        roompos: *mut mjtNum,
        roomquat: *mut mjtNum,
        modelpos: *const mjtNum,
        modelquat: *const mjtNum,
        scn: *const mjvScene,
    );
}
unsafe extern "C" {
    pub fn mjv_cameraInModel(
        headpos: *mut mjtNum,
        forward: *mut mjtNum,
        up: *mut mjtNum,
        scn: *const mjvScene,
    );
}
unsafe extern "C" {
    pub fn mjv_cameraInRoom(
        headpos: *mut mjtNum,
        forward: *mut mjtNum,
        up: *mut mjtNum,
        scn: *const mjvScene,
    );
}
unsafe extern "C" {
    pub fn mjv_frustumHeight(scn: *const mjvScene) -> mjtNum;
}
unsafe extern "C" {
    pub fn mjv_alignToCamera(res: *mut mjtNum, vec: *const mjtNum, forward: *const mjtNum);
}
unsafe extern "C" {
    pub fn mjv_moveCamera(
        m: *const mjModel,
        action: ::std::os::raw::c_int,
        reldx: mjtNum,
        reldy: mjtNum,
        scn: *const mjvScene,
        cam: *mut mjvCamera,
    );
}
unsafe extern "C" {
    pub fn mjv_moveCameraFromState(
        scnstate: *const mjvSceneState,
        action: ::std::os::raw::c_int,
        reldx: mjtNum,
        reldy: mjtNum,
        scn: *const mjvScene,
        cam: *mut mjvCamera,
    );
}
unsafe extern "C" {
    pub fn mjv_movePerturb(
        m: *const mjModel,
        d: *const mjData,
        action: ::std::os::raw::c_int,
        reldx: mjtNum,
        reldy: mjtNum,
        scn: *const mjvScene,
        pert: *mut mjvPerturb,
    );
}
unsafe extern "C" {
    pub fn mjv_movePerturbFromState(
        scnstate: *const mjvSceneState,
        action: ::std::os::raw::c_int,
        reldx: mjtNum,
        reldy: mjtNum,
        scn: *const mjvScene,
        pert: *mut mjvPerturb,
    );
}
unsafe extern "C" {
    pub fn mjv_moveModel(
        m: *const mjModel,
        action: ::std::os::raw::c_int,
        reldx: mjtNum,
        reldy: mjtNum,
        roomup: *const mjtNum,
        scn: *mut mjvScene,
    );
}
unsafe extern "C" {
    pub fn mjv_initPerturb(
        m: *const mjModel,
        d: *mut mjData,
        scn: *const mjvScene,
        pert: *mut mjvPerturb,
    );
}
unsafe extern "C" {
    pub fn mjv_applyPerturbPose(
        m: *const mjModel,
        d: *mut mjData,
        pert: *const mjvPerturb,
        flg_paused: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn mjv_applyPerturbForce(m: *const mjModel, d: *mut mjData, pert: *const mjvPerturb);
}
unsafe extern "C" {
    pub fn mjv_averageCamera(cam1: *const mjvGLCamera, cam2: *const mjvGLCamera) -> mjvGLCamera;
}
unsafe extern "C" {
    pub fn mjv_select(
        m: *const mjModel,
        d: *const mjData,
        vopt: *const mjvOption,
        aspectratio: mjtNum,
        relx: mjtNum,
        rely: mjtNum,
        scn: *const mjvScene,
        selpnt: *mut mjtNum,
        geomid: *mut ::std::os::raw::c_int,
        flexid: *mut ::std::os::raw::c_int,
        skinid: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mjv_defaultOption(opt: *mut mjvOption);
}
unsafe extern "C" {
    pub fn mjv_defaultFigure(fig: *mut mjvFigure);
}
unsafe extern "C" {
    pub fn mjv_initGeom(
        geom: *mut mjvGeom,
        type_: ::std::os::raw::c_int,
        size: *const mjtNum,
        pos: *const mjtNum,
        mat: *const mjtNum,
        rgba: *const f32,
    );
}
unsafe extern "C" {
    pub fn mjv_connector(
        geom: *mut mjvGeom,
        type_: ::std::os::raw::c_int,
        width: mjtNum,
        from: *const mjtNum,
        to: *const mjtNum,
    );
}
unsafe extern "C" {
    pub fn mjv_defaultScene(scn: *mut mjvScene);
}
unsafe extern "C" {
    pub fn mjv_makeScene(m: *const mjModel, scn: *mut mjvScene, maxgeom: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn mjv_freeScene(scn: *mut mjvScene);
}
unsafe extern "C" {
    pub fn mjv_updateScene(
        m: *const mjModel,
        d: *mut mjData,
        opt: *const mjvOption,
        pert: *const mjvPerturb,
        cam: *mut mjvCamera,
        catmask: ::std::os::raw::c_int,
        scn: *mut mjvScene,
    );
}
unsafe extern "C" {
    pub fn mjv_updateSceneFromState(
        scnstate: *const mjvSceneState,
        opt: *const mjvOption,
        pert: *const mjvPerturb,
        cam: *mut mjvCamera,
        catmask: ::std::os::raw::c_int,
        scn: *mut mjvScene,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mjv_copyModel(dest: *mut mjModel, src: *const mjModel);
}
unsafe extern "C" {
    pub fn mjv_defaultSceneState(scnstate: *mut mjvSceneState);
}
unsafe extern "C" {
    pub fn mjv_makeSceneState(
        m: *const mjModel,
        d: *const mjData,
        scnstate: *mut mjvSceneState,
        maxgeom: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn mjv_freeSceneState(scnstate: *mut mjvSceneState);
}
unsafe extern "C" {
    pub fn mjv_updateSceneState(
        m: *const mjModel,
        d: *mut mjData,
        opt: *const mjvOption,
        scnstate: *mut mjvSceneState,
    );
}
unsafe extern "C" {
    pub fn mjv_addGeoms(
        m: *const mjModel,
        d: *mut mjData,
        opt: *const mjvOption,
        pert: *const mjvPerturb,
        catmask: ::std::os::raw::c_int,
        scn: *mut mjvScene,
    );
}
unsafe extern "C" {
    pub fn mjv_makeLights(m: *const mjModel, d: *const mjData, scn: *mut mjvScene);
}
unsafe extern "C" {
    pub fn mjv_updateCamera(
        m: *const mjModel,
        d: *const mjData,
        cam: *mut mjvCamera,
        scn: *mut mjvScene,
    );
}
unsafe extern "C" {
    pub fn mjv_updateSkin(m: *const mjModel, d: *const mjData, scn: *mut mjvScene);
}
unsafe extern "C" {
    pub fn mjr_defaultContext(con: *mut mjrContext);
}
unsafe extern "C" {
    pub fn mjr_makeContext(
        m: *const mjModel,
        con: *mut mjrContext,
        fontscale: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn mjr_changeFont(fontscale: ::std::os::raw::c_int, con: *mut mjrContext);
}
unsafe extern "C" {
    pub fn mjr_addAux(
        index: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        samples: ::std::os::raw::c_int,
        con: *mut mjrContext,
    );
}
unsafe extern "C" {
    pub fn mjr_freeContext(con: *mut mjrContext);
}
unsafe extern "C" {
    pub fn mjr_resizeOffscreen(
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        con: *mut mjrContext,
    );
}
unsafe extern "C" {
    pub fn mjr_uploadTexture(
        m: *const mjModel,
        con: *const mjrContext,
        texid: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn mjr_uploadMesh(m: *const mjModel, con: *const mjrContext, meshid: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn mjr_uploadHField(
        m: *const mjModel,
        con: *const mjrContext,
        hfieldid: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn mjr_restoreBuffer(con: *const mjrContext);
}
unsafe extern "C" {
    pub fn mjr_setBuffer(framebuffer: ::std::os::raw::c_int, con: *mut mjrContext);
}
unsafe extern "C" {
    pub fn mjr_readPixels(
        rgb: *mut ::std::os::raw::c_uchar,
        depth: *mut f32,
        viewport: mjrRect,
        con: *const mjrContext,
    );
}
unsafe extern "C" {
    pub fn mjr_drawPixels(
        rgb: *const ::std::os::raw::c_uchar,
        depth: *const f32,
        viewport: mjrRect,
        con: *const mjrContext,
    );
}
unsafe extern "C" {
    pub fn mjr_blitBuffer(
        src: mjrRect,
        dst: mjrRect,
        flg_color: ::std::os::raw::c_int,
        flg_depth: ::std::os::raw::c_int,
        con: *const mjrContext,
    );
}
unsafe extern "C" {
    pub fn mjr_setAux(index: ::std::os::raw::c_int, con: *const mjrContext);
}
unsafe extern "C" {
    pub fn mjr_blitAux(
        index: ::std::os::raw::c_int,
        src: mjrRect,
        left: ::std::os::raw::c_int,
        bottom: ::std::os::raw::c_int,
        con: *const mjrContext,
    );
}
unsafe extern "C" {
    pub fn mjr_text(
        font: ::std::os::raw::c_int,
        txt: *const ::std::os::raw::c_char,
        con: *const mjrContext,
        x: f32,
        y: f32,
        r: f32,
        g: f32,
        b: f32,
    );
}
unsafe extern "C" {
    pub fn mjr_overlay(
        font: ::std::os::raw::c_int,
        gridpos: ::std::os::raw::c_int,
        viewport: mjrRect,
        overlay: *const ::std::os::raw::c_char,
        overlay2: *const ::std::os::raw::c_char,
        con: *const mjrContext,
    );
}
unsafe extern "C" {
    pub fn mjr_maxViewport(con: *const mjrContext) -> mjrRect;
}
unsafe extern "C" {
    pub fn mjr_rectangle(viewport: mjrRect, r: f32, g: f32, b: f32, a: f32);
}
unsafe extern "C" {
    pub fn mjr_label(
        viewport: mjrRect,
        font: ::std::os::raw::c_int,
        txt: *const ::std::os::raw::c_char,
        r: f32,
        g: f32,
        b: f32,
        a: f32,
        rt: f32,
        gt: f32,
        bt: f32,
        con: *const mjrContext,
    );
}
unsafe extern "C" {
    pub fn mjr_figure(viewport: mjrRect, fig: *mut mjvFigure, con: *const mjrContext);
}
unsafe extern "C" {
    pub fn mjr_render(viewport: mjrRect, scn: *mut mjvScene, con: *const mjrContext);
}
unsafe extern "C" {
    pub fn mjr_finish();
}
unsafe extern "C" {
    pub fn mjr_getError() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mjr_findRect(
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        nrect: ::std::os::raw::c_int,
        rect: *const mjrRect,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mjui_themeSpacing(ind: ::std::os::raw::c_int) -> mjuiThemeSpacing;
}
unsafe extern "C" {
    pub fn mjui_themeColor(ind: ::std::os::raw::c_int) -> mjuiThemeColor;
}
unsafe extern "C" {
    pub fn mjui_add(ui: *mut mjUI, def: *const mjuiDef);
}
unsafe extern "C" {
    pub fn mjui_addToSection(ui: *mut mjUI, sect: ::std::os::raw::c_int, def: *const mjuiDef);
}
unsafe extern "C" {
    pub fn mjui_resize(ui: *mut mjUI, con: *const mjrContext);
}
unsafe extern "C" {
    pub fn mjui_update(
        section: ::std::os::raw::c_int,
        item: ::std::os::raw::c_int,
        ui: *const mjUI,
        state: *const mjuiState,
        con: *const mjrContext,
    );
}
unsafe extern "C" {
    pub fn mjui_event(
        ui: *mut mjUI,
        state: *mut mjuiState,
        con: *const mjrContext,
    ) -> *mut mjuiItem;
}
unsafe extern "C" {
    pub fn mjui_render(ui: *mut mjUI, state: *const mjuiState, con: *const mjrContext);
}
unsafe extern "C" {
    pub fn mju_error(msg: *const ::std::os::raw::c_char, ...);
}
unsafe extern "C" {
    pub fn mju_error_i(msg: *const ::std::os::raw::c_char, i: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn mju_error_s(msg: *const ::std::os::raw::c_char, text: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn mju_warning(msg: *const ::std::os::raw::c_char, ...);
}
unsafe extern "C" {
    pub fn mju_warning_i(msg: *const ::std::os::raw::c_char, i: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn mju_warning_s(msg: *const ::std::os::raw::c_char, text: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn mju_clearHandlers();
}
unsafe extern "C" {
    pub fn mju_malloc(size: usize) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn mju_free(ptr: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn mj_warning(d: *mut mjData, warning: ::std::os::raw::c_int, info: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn mju_writeLog(type_: *const ::std::os::raw::c_char, msg: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn mjs_getError(s: *mut mjSpec) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn mjs_isWarning(s: *mut mjSpec) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mju_zero3(res: *mut mjtNum);
}
unsafe extern "C" {
    pub fn mju_copy3(res: *mut mjtNum, data: *const mjtNum);
}
unsafe extern "C" {
    pub fn mju_scl3(res: *mut mjtNum, vec: *const mjtNum, scl: mjtNum);
}
unsafe extern "C" {
    pub fn mju_add3(res: *mut mjtNum, vec1: *const mjtNum, vec2: *const mjtNum);
}
unsafe extern "C" {
    pub fn mju_sub3(res: *mut mjtNum, vec1: *const mjtNum, vec2: *const mjtNum);
}
unsafe extern "C" {
    pub fn mju_addTo3(res: *mut mjtNum, vec: *const mjtNum);
}
unsafe extern "C" {
    pub fn mju_subFrom3(res: *mut mjtNum, vec: *const mjtNum);
}
unsafe extern "C" {
    pub fn mju_addToScl3(res: *mut mjtNum, vec: *const mjtNum, scl: mjtNum);
}
unsafe extern "C" {
    pub fn mju_addScl3(res: *mut mjtNum, vec1: *const mjtNum, vec2: *const mjtNum, scl: mjtNum);
}
unsafe extern "C" {
    pub fn mju_normalize3(vec: *mut mjtNum) -> mjtNum;
}
unsafe extern "C" {
    pub fn mju_norm3(vec: *const mjtNum) -> mjtNum;
}
unsafe extern "C" {
    pub fn mju_dot3(vec1: *const mjtNum, vec2: *const mjtNum) -> mjtNum;
}
unsafe extern "C" {
    pub fn mju_dist3(pos1: *const mjtNum, pos2: *const mjtNum) -> mjtNum;
}
unsafe extern "C" {
    pub fn mju_mulMatVec3(res: *mut mjtNum, mat: *const mjtNum, vec: *const mjtNum);
}
unsafe extern "C" {
    pub fn mju_mulMatTVec3(res: *mut mjtNum, mat: *const mjtNum, vec: *const mjtNum);
}
unsafe extern "C" {
    pub fn mju_cross(res: *mut mjtNum, a: *const mjtNum, b: *const mjtNum);
}
unsafe extern "C" {
    pub fn mju_zero4(res: *mut mjtNum);
}
unsafe extern "C" {
    pub fn mju_unit4(res: *mut mjtNum);
}
unsafe extern "C" {
    pub fn mju_copy4(res: *mut mjtNum, data: *const mjtNum);
}
unsafe extern "C" {
    pub fn mju_normalize4(vec: *mut mjtNum) -> mjtNum;
}
unsafe extern "C" {
    pub fn mju_zero(res: *mut mjtNum, n: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn mju_fill(res: *mut mjtNum, val: mjtNum, n: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn mju_copy(res: *mut mjtNum, vec: *const mjtNum, n: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn mju_sum(vec: *const mjtNum, n: ::std::os::raw::c_int) -> mjtNum;
}
unsafe extern "C" {
    pub fn mju_L1(vec: *const mjtNum, n: ::std::os::raw::c_int) -> mjtNum;
}
unsafe extern "C" {
    pub fn mju_scl(res: *mut mjtNum, vec: *const mjtNum, scl: mjtNum, n: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn mju_add(
        res: *mut mjtNum,
        vec1: *const mjtNum,
        vec2: *const mjtNum,
        n: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn mju_sub(
        res: *mut mjtNum,
        vec1: *const mjtNum,
        vec2: *const mjtNum,
        n: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn mju_addTo(res: *mut mjtNum, vec: *const mjtNum, n: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn mju_subFrom(res: *mut mjtNum, vec: *const mjtNum, n: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn mju_addToScl(
        res: *mut mjtNum,
        vec: *const mjtNum,
        scl: mjtNum,
        n: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn mju_addScl(
        res: *mut mjtNum,
        vec1: *const mjtNum,
        vec2: *const mjtNum,
        scl: mjtNum,
        n: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn mju_normalize(res: *mut mjtNum, n: ::std::os::raw::c_int) -> mjtNum;
}
unsafe extern "C" {
    pub fn mju_norm(res: *const mjtNum, n: ::std::os::raw::c_int) -> mjtNum;
}
unsafe extern "C" {
    pub fn mju_dot(vec1: *const mjtNum, vec2: *const mjtNum, n: ::std::os::raw::c_int) -> mjtNum;
}
unsafe extern "C" {
    pub fn mju_mulMatVec(
        res: *mut mjtNum,
        mat: *const mjtNum,
        vec: *const mjtNum,
        nr: ::std::os::raw::c_int,
        nc: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn mju_mulMatTVec(
        res: *mut mjtNum,
        mat: *const mjtNum,
        vec: *const mjtNum,
        nr: ::std::os::raw::c_int,
        nc: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn mju_mulVecMatVec(
        vec1: *const mjtNum,
        mat: *const mjtNum,
        vec2: *const mjtNum,
        n: ::std::os::raw::c_int,
    ) -> mjtNum;
}
unsafe extern "C" {
    pub fn mju_transpose(
        res: *mut mjtNum,
        mat: *const mjtNum,
        nr: ::std::os::raw::c_int,
        nc: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn mju_symmetrize(res: *mut mjtNum, mat: *const mjtNum, n: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn mju_eye(mat: *mut mjtNum, n: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn mju_mulMatMat(
        res: *mut mjtNum,
        mat1: *const mjtNum,
        mat2: *const mjtNum,
        r1: ::std::os::raw::c_int,
        c1: ::std::os::raw::c_int,
        c2: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn mju_mulMatMatT(
        res: *mut mjtNum,
        mat1: *const mjtNum,
        mat2: *const mjtNum,
        r1: ::std::os::raw::c_int,
        c1: ::std::os::raw::c_int,
        r2: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn mju_mulMatTMat(
        res: *mut mjtNum,
        mat1: *const mjtNum,
        mat2: *const mjtNum,
        r1: ::std::os::raw::c_int,
        c1: ::std::os::raw::c_int,
        c2: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn mju_sqrMatTD(
        res: *mut mjtNum,
        mat: *const mjtNum,
        diag: *const mjtNum,
        nr: ::std::os::raw::c_int,
        nc: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn mju_transformSpatial(
        res: *mut mjtNum,
        vec: *const mjtNum,
        flg_force: ::std::os::raw::c_int,
        newpos: *const mjtNum,
        oldpos: *const mjtNum,
        rotnew2old: *const mjtNum,
    );
}
unsafe extern "C" {
    pub fn mju_dense2sparse(
        res: *mut mjtNum,
        mat: *const mjtNum,
        nr: ::std::os::raw::c_int,
        nc: ::std::os::raw::c_int,
        rownnz: *mut ::std::os::raw::c_int,
        rowadr: *mut ::std::os::raw::c_int,
        colind: *mut ::std::os::raw::c_int,
        nnz: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mju_sparse2dense(
        res: *mut mjtNum,
        mat: *const mjtNum,
        nr: ::std::os::raw::c_int,
        nc: ::std::os::raw::c_int,
        rownnz: *const ::std::os::raw::c_int,
        rowadr: *const ::std::os::raw::c_int,
        colind: *const ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn mju_rotVecQuat(res: *mut mjtNum, vec: *const mjtNum, quat: *const mjtNum);
}
unsafe extern "C" {
    pub fn mju_negQuat(res: *mut mjtNum, quat: *const mjtNum);
}
unsafe extern "C" {
    pub fn mju_mulQuat(res: *mut mjtNum, quat1: *const mjtNum, quat2: *const mjtNum);
}
unsafe extern "C" {
    pub fn mju_mulQuatAxis(res: *mut mjtNum, quat: *const mjtNum, axis: *const mjtNum);
}
unsafe extern "C" {
    pub fn mju_axisAngle2Quat(res: *mut mjtNum, axis: *const mjtNum, angle: mjtNum);
}
unsafe extern "C" {
    pub fn mju_quat2Vel(res: *mut mjtNum, quat: *const mjtNum, dt: mjtNum);
}
unsafe extern "C" {
    pub fn mju_subQuat(res: *mut mjtNum, qa: *const mjtNum, qb: *const mjtNum);
}
unsafe extern "C" {
    pub fn mju_quat2Mat(res: *mut mjtNum, quat: *const mjtNum);
}
unsafe extern "C" {
    pub fn mju_mat2Quat(quat: *mut mjtNum, mat: *const mjtNum);
}
unsafe extern "C" {
    pub fn mju_derivQuat(res: *mut mjtNum, quat: *const mjtNum, vel: *const mjtNum);
}
unsafe extern "C" {
    pub fn mju_quatIntegrate(quat: *mut mjtNum, vel: *const mjtNum, scale: mjtNum);
}
unsafe extern "C" {
    pub fn mju_quatZ2Vec(quat: *mut mjtNum, vec: *const mjtNum);
}
unsafe extern "C" {
    pub fn mju_mat2Rot(quat: *mut mjtNum, mat: *const mjtNum) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mju_euler2Quat(
        quat: *mut mjtNum,
        euler: *const mjtNum,
        seq: *const ::std::os::raw::c_char,
    );
}
unsafe extern "C" {
    pub fn mju_mulPose(
        posres: *mut mjtNum,
        quatres: *mut mjtNum,
        pos1: *const mjtNum,
        quat1: *const mjtNum,
        pos2: *const mjtNum,
        quat2: *const mjtNum,
    );
}
unsafe extern "C" {
    pub fn mju_negPose(
        posres: *mut mjtNum,
        quatres: *mut mjtNum,
        pos: *const mjtNum,
        quat: *const mjtNum,
    );
}
unsafe extern "C" {
    pub fn mju_trnVecPose(
        res: *mut mjtNum,
        pos: *const mjtNum,
        quat: *const mjtNum,
        vec: *const mjtNum,
    );
}
unsafe extern "C" {
    pub fn mju_cholFactor(
        mat: *mut mjtNum,
        n: ::std::os::raw::c_int,
        mindiag: mjtNum,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mju_cholSolve(
        res: *mut mjtNum,
        mat: *const mjtNum,
        vec: *const mjtNum,
        n: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn mju_cholUpdate(
        mat: *mut mjtNum,
        x: *mut mjtNum,
        n: ::std::os::raw::c_int,
        flg_plus: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mju_cholFactorBand(
        mat: *mut mjtNum,
        ntotal: ::std::os::raw::c_int,
        nband: ::std::os::raw::c_int,
        ndense: ::std::os::raw::c_int,
        diagadd: mjtNum,
        diagmul: mjtNum,
    ) -> mjtNum;
}
unsafe extern "C" {
    pub fn mju_cholSolveBand(
        res: *mut mjtNum,
        mat: *const mjtNum,
        vec: *const mjtNum,
        ntotal: ::std::os::raw::c_int,
        nband: ::std::os::raw::c_int,
        ndense: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn mju_band2Dense(
        res: *mut mjtNum,
        mat: *const mjtNum,
        ntotal: ::std::os::raw::c_int,
        nband: ::std::os::raw::c_int,
        ndense: ::std::os::raw::c_int,
        flg_sym: mjtByte,
    );
}
unsafe extern "C" {
    pub fn mju_dense2Band(
        res: *mut mjtNum,
        mat: *const mjtNum,
        ntotal: ::std::os::raw::c_int,
        nband: ::std::os::raw::c_int,
        ndense: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn mju_bandMulMatVec(
        res: *mut mjtNum,
        mat: *const mjtNum,
        vec: *const mjtNum,
        ntotal: ::std::os::raw::c_int,
        nband: ::std::os::raw::c_int,
        ndense: ::std::os::raw::c_int,
        nvec: ::std::os::raw::c_int,
        flg_sym: mjtByte,
    );
}
unsafe extern "C" {
    pub fn mju_bandDiag(
        i: ::std::os::raw::c_int,
        ntotal: ::std::os::raw::c_int,
        nband: ::std::os::raw::c_int,
        ndense: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mju_eig3(
        eigval: *mut mjtNum,
        eigvec: *mut mjtNum,
        quat: *mut mjtNum,
        mat: *const mjtNum,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mju_boxQP(
        res: *mut mjtNum,
        R: *mut mjtNum,
        index: *mut ::std::os::raw::c_int,
        H: *const mjtNum,
        g: *const mjtNum,
        n: ::std::os::raw::c_int,
        lower: *const mjtNum,
        upper: *const mjtNum,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mju_boxQPmalloc(
        res: *mut *mut mjtNum,
        R: *mut *mut mjtNum,
        index: *mut *mut ::std::os::raw::c_int,
        H: *mut *mut mjtNum,
        g: *mut *mut mjtNum,
        n: ::std::os::raw::c_int,
        lower: *mut *mut mjtNum,
        upper: *mut *mut mjtNum,
    );
}
unsafe extern "C" {
    pub fn mju_muscleGain(
        len: mjtNum,
        vel: mjtNum,
        lengthrange: *const mjtNum,
        acc0: mjtNum,
        prm: *const mjtNum,
    ) -> mjtNum;
}
unsafe extern "C" {
    pub fn mju_muscleBias(
        len: mjtNum,
        lengthrange: *const mjtNum,
        acc0: mjtNum,
        prm: *const mjtNum,
    ) -> mjtNum;
}
unsafe extern "C" {
    pub fn mju_muscleDynamics(ctrl: mjtNum, act: mjtNum, prm: *const mjtNum) -> mjtNum;
}
unsafe extern "C" {
    pub fn mju_encodePyramid(
        pyramid: *mut mjtNum,
        force: *const mjtNum,
        mu: *const mjtNum,
        dim: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn mju_decodePyramid(
        force: *mut mjtNum,
        pyramid: *const mjtNum,
        mu: *const mjtNum,
        dim: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn mju_springDamper(
        pos0: mjtNum,
        vel0: mjtNum,
        Kp: mjtNum,
        Kv: mjtNum,
        dt: mjtNum,
    ) -> mjtNum;
}
unsafe extern "C" {
    pub fn mju_min(a: mjtNum, b: mjtNum) -> mjtNum;
}
unsafe extern "C" {
    pub fn mju_max(a: mjtNum, b: mjtNum) -> mjtNum;
}
unsafe extern "C" {
    pub fn mju_clip(x: mjtNum, min: mjtNum, max: mjtNum) -> mjtNum;
}
unsafe extern "C" {
    pub fn mju_sign(x: mjtNum) -> mjtNum;
}
unsafe extern "C" {
    pub fn mju_round(x: mjtNum) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mju_type2Str(type_: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn mju_str2Type(str_: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mju_writeNumBytes(nbytes: usize) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn mju_warningText(
        warning: ::std::os::raw::c_int,
        info: usize,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn mju_isBad(x: mjtNum) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mju_isZero(vec: *mut mjtNum, n: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mju_standardNormal(num2: *mut mjtNum) -> mjtNum;
}
unsafe extern "C" {
    pub fn mju_f2n(res: *mut mjtNum, vec: *const f32, n: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn mju_n2f(res: *mut f32, vec: *const mjtNum, n: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn mju_d2n(res: *mut mjtNum, vec: *const f64, n: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn mju_n2d(res: *mut f64, vec: *const mjtNum, n: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn mju_insertionSort(list: *mut mjtNum, n: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn mju_insertionSortInt(list: *mut ::std::os::raw::c_int, n: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn mju_Halton(index: ::std::os::raw::c_int, base: ::std::os::raw::c_int) -> mjtNum;
}
unsafe extern "C" {
    pub fn mju_strncpy(
        dst: *mut ::std::os::raw::c_char,
        src: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn mju_sigmoid(x: mjtNum) -> mjtNum;
}
unsafe extern "C" {
    pub fn mjd_transitionFD(
        m: *const mjModel,
        d: *mut mjData,
        eps: mjtNum,
        flg_centered: mjtByte,
        A: *mut mjtNum,
        B: *mut mjtNum,
        C: *mut mjtNum,
        D: *mut mjtNum,
    );
}
unsafe extern "C" {
    pub fn mjd_inverseFD(
        m: *const mjModel,
        d: *mut mjData,
        eps: mjtNum,
        flg_actuation: mjtByte,
        DfDq: *mut mjtNum,
        DfDv: *mut mjtNum,
        DfDa: *mut mjtNum,
        DsDq: *mut mjtNum,
        DsDv: *mut mjtNum,
        DsDa: *mut mjtNum,
        DmDq: *mut mjtNum,
    );
}
unsafe extern "C" {
    pub fn mjd_subQuat(qa: *const mjtNum, qb: *const mjtNum, Da: *mut mjtNum, Db: *mut mjtNum);
}
unsafe extern "C" {
    pub fn mjd_quatIntegrate(
        vel: *const mjtNum,
        scale: mjtNum,
        Dquat: *mut mjtNum,
        Dvel: *mut mjtNum,
        Dscale: *mut mjtNum,
    );
}
unsafe extern "C" {
    pub fn mjp_defaultPlugin(plugin: *mut mjpPlugin);
}
unsafe extern "C" {
    pub fn mjp_registerPlugin(plugin: *const mjpPlugin) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mjp_pluginCount() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mjp_getPlugin(
        name: *const ::std::os::raw::c_char,
        slot: *mut ::std::os::raw::c_int,
    ) -> *const mjpPlugin;
}
unsafe extern "C" {
    pub fn mjp_getPluginAtSlot(slot: ::std::os::raw::c_int) -> *const mjpPlugin;
}
unsafe extern "C" {
    pub fn mjp_defaultResourceProvider(provider: *mut mjpResourceProvider);
}
unsafe extern "C" {
    pub fn mjp_registerResourceProvider(
        provider: *const mjpResourceProvider,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mjp_resourceProviderCount() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mjp_getResourceProvider(
        resource_name: *const ::std::os::raw::c_char,
    ) -> *const mjpResourceProvider;
}
unsafe extern "C" {
    pub fn mjp_getResourceProviderAtSlot(slot: ::std::os::raw::c_int)
        -> *const mjpResourceProvider;
}
unsafe extern "C" {
    pub fn mju_threadPoolCreate(number_of_threads: usize) -> *mut mjThreadPool;
}
unsafe extern "C" {
    pub fn mju_bindThreadPool(d: *mut mjData, thread_pool: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn mju_threadPoolEnqueue(thread_pool: *mut mjThreadPool, task: *mut mjTask);
}
unsafe extern "C" {
    pub fn mju_threadPoolDestroy(thread_pool: *mut mjThreadPool);
}
unsafe extern "C" {
    pub fn mju_defaultTask(task: *mut mjTask);
}
unsafe extern "C" {
    pub fn mju_taskJoin(task: *mut mjTask);
}
unsafe extern "C" {
    pub fn mjs_attachBody(
        parent: *mut mjsFrame,
        child: *const mjsBody,
        prefix: *const ::std::os::raw::c_char,
        suffix: *const ::std::os::raw::c_char,
    ) -> *mut mjsBody;
}
unsafe extern "C" {
    pub fn mjs_attachFrame(
        parent: *mut mjsBody,
        child: *const mjsFrame,
        prefix: *const ::std::os::raw::c_char,
        suffix: *const ::std::os::raw::c_char,
    ) -> *mut mjsFrame;
}
unsafe extern "C" {
    pub fn mjs_attachToSite(
        parent: *mut mjsSite,
        child: *const mjsBody,
        prefix: *const ::std::os::raw::c_char,
        suffix: *const ::std::os::raw::c_char,
    ) -> *mut mjsBody;
}
unsafe extern "C" {
    pub fn mjs_detachBody(s: *mut mjSpec, b: *mut mjsBody) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mjs_addBody(body: *mut mjsBody, def: *const mjsDefault) -> *mut mjsBody;
}
unsafe extern "C" {
    pub fn mjs_addSite(body: *mut mjsBody, def: *const mjsDefault) -> *mut mjsSite;
}
unsafe extern "C" {
    pub fn mjs_addJoint(body: *mut mjsBody, def: *const mjsDefault) -> *mut mjsJoint;
}
unsafe extern "C" {
    pub fn mjs_addFreeJoint(body: *mut mjsBody) -> *mut mjsJoint;
}
unsafe extern "C" {
    pub fn mjs_addGeom(body: *mut mjsBody, def: *const mjsDefault) -> *mut mjsGeom;
}
unsafe extern "C" {
    pub fn mjs_addCamera(body: *mut mjsBody, def: *const mjsDefault) -> *mut mjsCamera;
}
unsafe extern "C" {
    pub fn mjs_addLight(body: *mut mjsBody, def: *const mjsDefault) -> *mut mjsLight;
}
unsafe extern "C" {
    pub fn mjs_addFrame(body: *mut mjsBody, parentframe: *mut mjsFrame) -> *mut mjsFrame;
}
unsafe extern "C" {
    pub fn mjs_delete(element: *mut mjsElement) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mjs_addActuator(s: *mut mjSpec, def: *const mjsDefault) -> *mut mjsActuator;
}
unsafe extern "C" {
    pub fn mjs_addSensor(s: *mut mjSpec) -> *mut mjsSensor;
}
unsafe extern "C" {
    pub fn mjs_addFlex(s: *mut mjSpec) -> *mut mjsFlex;
}
unsafe extern "C" {
    pub fn mjs_addPair(s: *mut mjSpec, def: *const mjsDefault) -> *mut mjsPair;
}
unsafe extern "C" {
    pub fn mjs_addExclude(s: *mut mjSpec) -> *mut mjsExclude;
}
unsafe extern "C" {
    pub fn mjs_addEquality(s: *mut mjSpec, def: *const mjsDefault) -> *mut mjsEquality;
}
unsafe extern "C" {
    pub fn mjs_addTendon(s: *mut mjSpec, def: *const mjsDefault) -> *mut mjsTendon;
}
unsafe extern "C" {
    pub fn mjs_wrapSite(
        tendon: *mut mjsTendon,
        name: *const ::std::os::raw::c_char,
    ) -> *mut mjsWrap;
}
unsafe extern "C" {
    pub fn mjs_wrapGeom(
        tendon: *mut mjsTendon,
        name: *const ::std::os::raw::c_char,
        sidesite: *const ::std::os::raw::c_char,
    ) -> *mut mjsWrap;
}
unsafe extern "C" {
    pub fn mjs_wrapJoint(
        tendon: *mut mjsTendon,
        name: *const ::std::os::raw::c_char,
        coef: f64,
    ) -> *mut mjsWrap;
}
unsafe extern "C" {
    pub fn mjs_wrapPulley(tendon: *mut mjsTendon, divisor: f64) -> *mut mjsWrap;
}
unsafe extern "C" {
    pub fn mjs_addNumeric(s: *mut mjSpec) -> *mut mjsNumeric;
}
unsafe extern "C" {
    pub fn mjs_addText(s: *mut mjSpec) -> *mut mjsText;
}
unsafe extern "C" {
    pub fn mjs_addTuple(s: *mut mjSpec) -> *mut mjsTuple;
}
unsafe extern "C" {
    pub fn mjs_addKey(s: *mut mjSpec) -> *mut mjsKey;
}
unsafe extern "C" {
    pub fn mjs_addPlugin(s: *mut mjSpec) -> *mut mjsPlugin;
}
unsafe extern "C" {
    pub fn mjs_addDefault(
        s: *mut mjSpec,
        classname: *const ::std::os::raw::c_char,
        parent: *const mjsDefault,
    ) -> *mut mjsDefault;
}
unsafe extern "C" {
    pub fn mjs_addMesh(s: *mut mjSpec, def: *const mjsDefault) -> *mut mjsMesh;
}
unsafe extern "C" {
    pub fn mjs_addHField(s: *mut mjSpec) -> *mut mjsHField;
}
unsafe extern "C" {
    pub fn mjs_addSkin(s: *mut mjSpec) -> *mut mjsSkin;
}
unsafe extern "C" {
    pub fn mjs_addTexture(s: *mut mjSpec) -> *mut mjsTexture;
}
unsafe extern "C" {
    pub fn mjs_addMaterial(s: *mut mjSpec, def: *const mjsDefault) -> *mut mjsMaterial;
}
unsafe extern "C" {
    pub fn mjs_getSpec(element: *mut mjsElement) -> *mut mjSpec;
}
unsafe extern "C" {
    pub fn mjs_findSpec(spec: *mut mjSpec, name: *const ::std::os::raw::c_char) -> *mut mjSpec;
}
unsafe extern "C" {
    pub fn mjs_findBody(s: *mut mjSpec, name: *const ::std::os::raw::c_char) -> *mut mjsBody;
}
unsafe extern "C" {
    pub fn mjs_findElement(
        s: *mut mjSpec,
        type_: mjtObj,
        name: *const ::std::os::raw::c_char,
    ) -> *mut mjsElement;
}
unsafe extern "C" {
    pub fn mjs_findChild(body: *mut mjsBody, name: *const ::std::os::raw::c_char) -> *mut mjsBody;
}
unsafe extern "C" {
    pub fn mjs_findFrame(s: *mut mjSpec, name: *const ::std::os::raw::c_char) -> *mut mjsFrame;
}
unsafe extern "C" {
    pub fn mjs_getDefault(element: *mut mjsElement) -> *mut mjsDefault;
}
unsafe extern "C" {
    pub fn mjs_findDefault(
        s: *mut mjSpec,
        classname: *const ::std::os::raw::c_char,
    ) -> *const mjsDefault;
}
unsafe extern "C" {
    pub fn mjs_getSpecDefault(s: *mut mjSpec) -> *mut mjsDefault;
}
unsafe extern "C" {
    pub fn mjs_getId(element: *mut mjsElement) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mjs_firstChild(
        body: *mut mjsBody,
        type_: mjtObj,
        recurse: ::std::os::raw::c_int,
    ) -> *mut mjsElement;
}
unsafe extern "C" {
    pub fn mjs_nextChild(
        body: *mut mjsBody,
        child: *mut mjsElement,
        recurse: ::std::os::raw::c_int,
    ) -> *mut mjsElement;
}
unsafe extern "C" {
    pub fn mjs_firstElement(s: *mut mjSpec, type_: mjtObj) -> *mut mjsElement;
}
unsafe extern "C" {
    pub fn mjs_nextElement(s: *mut mjSpec, element: *mut mjsElement) -> *mut mjsElement;
}
unsafe extern "C" {
    pub fn mjs_setBuffer(
        dest: *mut mjByteVec,
        array: *const ::std::os::raw::c_void,
        size: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn mjs_setString(dest: *mut mjString, text: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn mjs_setStringVec(dest: *mut mjStringVec, text: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn mjs_setInStringVec(
        dest: *mut mjStringVec,
        i: ::std::os::raw::c_int,
        text: *const ::std::os::raw::c_char,
    ) -> mjtByte;
}
unsafe extern "C" {
    pub fn mjs_appendString(dest: *mut mjStringVec, text: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn mjs_setInt(
        dest: *mut mjIntVec,
        array: *const ::std::os::raw::c_int,
        size: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn mjs_appendIntVec(
        dest: *mut mjIntVecVec,
        array: *const ::std::os::raw::c_int,
        size: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn mjs_setFloat(dest: *mut mjFloatVec, array: *const f32, size: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn mjs_appendFloatVec(
        dest: *mut mjFloatVecVec,
        array: *const f32,
        size: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn mjs_setDouble(dest: *mut mjDoubleVec, array: *const f64, size: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn mjs_setPluginAttributes(plugin: *mut mjsPlugin, attributes: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn mjs_getString(source: *const mjString) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn mjs_getDouble(
        source: *const mjDoubleVec,
        size: *mut ::std::os::raw::c_int,
    ) -> *const f64;
}
unsafe extern "C" {
    pub fn mjs_setDefault(element: *mut mjsElement, def: *const mjsDefault);
}
unsafe extern "C" {
    pub fn mjs_setFrame(dest: *mut mjsElement, frame: *mut mjsFrame);
}
unsafe extern "C" {
    pub fn mjs_resolveOrientation(
        quat: *mut f64,
        degree: mjtByte,
        sequence: *const ::std::os::raw::c_char,
        orientation: *const mjsOrientation,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn mjs_bodyToFrame(body: *mut *mut mjsBody) -> *mut mjsFrame;
}
unsafe extern "C" {
    pub fn mjs_defaultSpec(spec: *mut mjSpec);
}
unsafe extern "C" {
    pub fn mjs_defaultOrientation(orient: *mut mjsOrientation);
}
unsafe extern "C" {
    pub fn mjs_defaultBody(body: *mut mjsBody);
}
unsafe extern "C" {
    pub fn mjs_defaultFrame(frame: *mut mjsFrame);
}
unsafe extern "C" {
    pub fn mjs_defaultJoint(joint: *mut mjsJoint);
}
unsafe extern "C" {
    pub fn mjs_defaultGeom(geom: *mut mjsGeom);
}
unsafe extern "C" {
    pub fn mjs_defaultSite(site: *mut mjsSite);
}
unsafe extern "C" {
    pub fn mjs_defaultCamera(camera: *mut mjsCamera);
}
unsafe extern "C" {
    pub fn mjs_defaultLight(light: *mut mjsLight);
}
unsafe extern "C" {
    pub fn mjs_defaultFlex(flex: *mut mjsFlex);
}
unsafe extern "C" {
    pub fn mjs_defaultMesh(mesh: *mut mjsMesh);
}
unsafe extern "C" {
    pub fn mjs_defaultHField(hfield: *mut mjsHField);
}
unsafe extern "C" {
    pub fn mjs_defaultSkin(skin: *mut mjsSkin);
}
unsafe extern "C" {
    pub fn mjs_defaultTexture(texture: *mut mjsTexture);
}
unsafe extern "C" {
    pub fn mjs_defaultMaterial(material: *mut mjsMaterial);
}
unsafe extern "C" {
    pub fn mjs_defaultPair(pair: *mut mjsPair);
}
unsafe extern "C" {
    pub fn mjs_defaultEquality(equality: *mut mjsEquality);
}
unsafe extern "C" {
    pub fn mjs_defaultTendon(tendon: *mut mjsTendon);
}
unsafe extern "C" {
    pub fn mjs_defaultActuator(actuator: *mut mjsActuator);
}
unsafe extern "C" {
    pub fn mjs_defaultSensor(sensor: *mut mjsSensor);
}
unsafe extern "C" {
    pub fn mjs_defaultNumeric(numeric: *mut mjsNumeric);
}
unsafe extern "C" {
    pub fn mjs_defaultText(text: *mut mjsText);
}
unsafe extern "C" {
    pub fn mjs_defaultTuple(tuple: *mut mjsTuple);
}
unsafe extern "C" {
    pub fn mjs_defaultKey(key: *mut mjsKey);
}
unsafe extern "C" {
    pub fn mjs_defaultPlugin(plugin: *mut mjsPlugin);
}
unsafe extern "C" {
    pub fn mjs_asBody(element: *mut mjsElement) -> *mut mjsBody;
}
unsafe extern "C" {
    pub fn mjs_asGeom(element: *mut mjsElement) -> *mut mjsGeom;
}
unsafe extern "C" {
    pub fn mjs_asJoint(element: *mut mjsElement) -> *mut mjsJoint;
}
unsafe extern "C" {
    pub fn mjs_asSite(element: *mut mjsElement) -> *mut mjsSite;
}
unsafe extern "C" {
    pub fn mjs_asCamera(element: *mut mjsElement) -> *mut mjsCamera;
}
unsafe extern "C" {
    pub fn mjs_asLight(element: *mut mjsElement) -> *mut mjsLight;
}
unsafe extern "C" {
    pub fn mjs_asFrame(element: *mut mjsElement) -> *mut mjsFrame;
}
unsafe extern "C" {
    pub fn mjs_asActuator(element: *mut mjsElement) -> *mut mjsActuator;
}
unsafe extern "C" {
    pub fn mjs_asSensor(element: *mut mjsElement) -> *mut mjsSensor;
}
unsafe extern "C" {
    pub fn mjs_asFlex(element: *mut mjsElement) -> *mut mjsFlex;
}
unsafe extern "C" {
    pub fn mjs_asPair(element: *mut mjsElement) -> *mut mjsPair;
}
unsafe extern "C" {
    pub fn mjs_asEquality(element: *mut mjsElement) -> *mut mjsEquality;
}
unsafe extern "C" {
    pub fn mjs_asExclude(element: *mut mjsElement) -> *mut mjsExclude;
}
unsafe extern "C" {
    pub fn mjs_asTendon(element: *mut mjsElement) -> *mut mjsTendon;
}
unsafe extern "C" {
    pub fn mjs_asNumeric(element: *mut mjsElement) -> *mut mjsNumeric;
}
unsafe extern "C" {
    pub fn mjs_asText(element: *mut mjsElement) -> *mut mjsText;
}
unsafe extern "C" {
    pub fn mjs_asTuple(element: *mut mjsElement) -> *mut mjsTuple;
}
unsafe extern "C" {
    pub fn mjs_asKey(element: *mut mjsElement) -> *mut mjsKey;
}
unsafe extern "C" {
    pub fn mjs_asMesh(element: *mut mjsElement) -> *mut mjsMesh;
}
unsafe extern "C" {
    pub fn mjs_asHField(element: *mut mjsElement) -> *mut mjsHField;
}
unsafe extern "C" {
    pub fn mjs_asSkin(element: *mut mjsElement) -> *mut mjsSkin;
}
unsafe extern "C" {
    pub fn mjs_asTexture(element: *mut mjsElement) -> *mut mjsTexture;
}
unsafe extern "C" {
    pub fn mjs_asMaterial(element: *mut mjsElement) -> *mut mjsMaterial;
}
unsafe extern "C" {
    pub fn mjs_asPlugin(element: *mut mjsElement) -> *mut mjsPlugin;
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __va_list_tag"][::std::mem::size_of::<__va_list_tag>() - 24usize];
    ["Alignment of __va_list_tag"][::std::mem::align_of::<__va_list_tag>() - 8usize];
    ["Offset of field: __va_list_tag::gp_offset"]
        [::std::mem::offset_of!(__va_list_tag, gp_offset) - 0usize];
    ["Offset of field: __va_list_tag::fp_offset"]
        [::std::mem::offset_of!(__va_list_tag, fp_offset) - 4usize];
    ["Offset of field: __va_list_tag::overflow_arg_area"]
        [::std::mem::offset_of!(__va_list_tag, overflow_arg_area) - 8usize];
    ["Offset of field: __va_list_tag::reg_save_area"]
        [::std::mem::offset_of!(__va_list_tag, reg_save_area) - 16usize];
};
impl Default for __va_list_tag {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
